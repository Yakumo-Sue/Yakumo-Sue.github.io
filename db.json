{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Blog-Logo/Hexo.png","path":"img/Blog-Logo/Hexo.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/01.blogs/1316853.jpeg","path":"img/Post-Banner/01.blogs/1316853.jpeg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/1316292.jpeg","path":"img/Post-Banner/00.defaults/1316292.jpeg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/1316737.jpeg","path":"img/Post-Banner/00.defaults/1316737.jpeg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/avatar.jpg","path":"img/Post-Banner/00.defaults/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/Learning.jpg","path":"img/Post-Banner/00.defaults/Learning.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/default.png","path":"img/Post-Banner/00.defaults/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Blog-Logo/logo.png","path":"img/Blog-Logo/logo.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Blog-Logo/C++_Logo.png","path":"img/Blog-Logo/C++_Logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1690850878644},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688287284000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1688287284000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1688287284000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1688287284000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1688287284000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1688287284000},{"_id":"themes/fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1688287284000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1688287284000},{"_id":"themes/fluid/_config.yml","hash":"cc55a9d2463a16b6df404b364197fa4c5290416a","modified":1690874912247},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1688287284000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1688287284000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1688287284000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1688287284000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1688287284000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1688287284000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1688287284000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1688287284000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1688287284000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1688287284000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1688287284000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1688287284000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1688287284000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1688287284000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1688287284000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1688287284000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1688287284000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1688287284000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1688287284000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1688287284000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1688287284000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1688287284000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1688287284000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1688287284000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1688287284000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1688287284000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1688287284000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1688287284000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1688287284000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1688287284000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1688287284000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1688287284000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1688287284000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1688287284000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1688287284000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1688287284000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1688287284000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1688287284000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1688287284000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1688287284000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1688287284000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1688287284000},{"_id":"public/local-search.xml","hash":"1c6faa4fa05c67896334b705a3c02b8e2d8fea24","modified":1690851286626},{"_id":"public/archives/index.html","hash":"13a6a48ded70f8ea6a49b29801185d8514dd2acd","modified":1690851286626},{"_id":"public/index.html","hash":"0ad4e2dc2eadbf1c83c748259c13f182571e30a7","modified":1690851286626},{"_id":"public/archives/2023/index.html","hash":"60f29358d5a7cb1b9ac52bb490a7fb9ce4f87b82","modified":1690851286626},{"_id":"public/404.html","hash":"2fe861cf2ebd4826dd4e3cf667b6f3cfbb0b968c","modified":1690851286626},{"_id":"public/archives/2023/08/index.html","hash":"8798efeeea0bc380234b2a5ab51a326861ab8682","modified":1690851286626},{"_id":"public/tags/index.html","hash":"c19cd5597ce64d4c75ac505c75ef5d25d9da409f","modified":1690851286626},{"_id":"public/links/index.html","hash":"3d560f00d7ad46ee5863ea2500329eb41b6fd658","modified":1690851286626},{"_id":"public/categories/index.html","hash":"3493f14380a92ef9a3404b97ccebf6ae4213a328","modified":1690851286626},{"_id":"public/2023/08/01/hello-world/index.html","hash":"47b0ef8dc5f9299a8f22edf0877c5889803b4b1c","modified":1690851286626},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1690851286626},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1690851286626},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1690851286626},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1690851286626},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1690851286626},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1690851286626},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1690851286626},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1690851286626},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1690851286626},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1690851286626},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1690851286626},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1690851286626},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1690851286626},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1690851286626},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1690851286626},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1690851286626},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1690851286626},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1690851286626},{"_id":"source/_posts/博客部署流程.md","hash":"da5d0815dbed06bc293fc0b82bb3c8bd74fcfb31","modified":1690874487889},{"_id":"source/about/index.md","hash":"d888b83f6199e9d433b6927168467e2e8a07c132","modified":1690858130957},{"_id":"themes/fluid/source/img/avatar.jpg","hash":"97e288f919a03fb541e90c450c2ccd1cccdfc9c7","modified":1690855393532},{"_id":"themes/fluid/source/img/logo.png","hash":"1dfbe7ba9fbd39ba5eba6c409fa2981133981b26","modified":1690855369221},{"_id":"themes/fluid/source/img/Learning.jpg","hash":"c8176480228876fb4ad2e356db3ab843daba3d1b","modified":1690855379530},{"_id":"themes/fluid/source/img/1316292.jpeg","hash":"c578f56ee5c408ca8102d5fd7e38ba5a3f195b53","modified":1687736865433},{"_id":"themes/fluid/source/img/1316737.jpeg","hash":"150ffd7286023d7b953553d3bd0a81197cd47e37","modified":1687737426919},{"_id":"themes/fluid/source/img/Blog-Logo/Hexo.png","hash":"c96a69c6e3a14bf85887052e5925225a051e5fd9","modified":1690871880925},{"_id":"themes/fluid/source/img/Blog-Logo/logo.png","hash":"1dfbe7ba9fbd39ba5eba6c409fa2981133981b26","modified":1690855369221},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/avatar.jpg","hash":"97e288f919a03fb541e90c450c2ccd1cccdfc9c7","modified":1690855393532},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1688287284000},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/Learning.jpg","hash":"c8176480228876fb4ad2e356db3ab843daba3d1b","modified":1690855379530},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/1316292.jpeg","hash":"c578f56ee5c408ca8102d5fd7e38ba5a3f195b53","modified":1687736865433},{"_id":"themes/fluid/source/img/Post-Banner/01.blogs/1316853.jpeg","hash":"9016ce7a4acef621762a2d33e059d28f24a9ef91","modified":1690872039819},{"_id":"themes/fluid/source/img/Post-Banner/00.defaults/1316737.jpeg","hash":"150ffd7286023d7b953553d3bd0a81197cd47e37","modified":1687737426919},{"_id":"source/_posts/02.C++ 基础部分/01.理解 C++ 内核.md","hash":"6ffca21e486862f96ff04ff46b7fdd9c8f2ebc6a","modified":1691034378022},{"_id":"themes/fluid/source/img/Blog-Logo/C++_Logo.png","hash":"c81703cd5a19ebdde1fb9ed3e69cc8bd14fa3b86","modified":1691022872233},{"_id":"source/_posts/02.C++ 基础部分/00.C++ 基本语法学习.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1691046534439},{"_id":"source/_posts/02.C++ 基础部分/02.C++ 基础精讲.md","hash":"26fecb134ca9604a1176ebe518558e9661fe4233","modified":1691129215953},{"_id":"source/_posts/02.C++ 基础部分/03.C++ 面向对象.md","hash":"b9d2556b3c26a321a13a027a4e63d9f64a7cfa80","modified":1691129532328}],"Category":[],"Data":[],"Page":[{"layout":"about","date":"2023-08-01T02:29:36.000Z","_content":"\nFluid ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作。\n\n该主题相较于其他主题的优势：\n\n- 设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；\n- 提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；\n- 响应式页面，适配手机、平板等设备；\n- 转载文章；\n\n## 个人技能\n\n- Html + Css + JavaScript + NodeJS + MySQL + React\n- C/C++ + UE\n- 数据结构与算法 + 计算机网络 + 计算机组成原理 + 操作系统\n\n## 项目组\n\n......","source":"about/index.md","raw":"---\nlayout: about\ndate: 2023-08-01 10:29:36\n---\n\nFluid ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作。\n\n该主题相较于其他主题的优势：\n\n- 设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；\n- 提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；\n- 响应式页面，适配手机、平板等设备；\n- 转载文章；\n\n## 个人技能\n\n- Html + Css + JavaScript + NodeJS + MySQL + React\n- C/C++ + UE\n- 数据结构与算法 + 计算机网络 + 计算机组成原理 + 操作系统\n\n## 项目组\n\n......","updated":"2023-08-01T02:48:50.957Z","path":"about/index.html","_id":"clkrobmbc0000u0pk12zga84x","title":"","comments":1,"content":"<p>Fluid ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作。</p>\n<p>该主题相较于其他主题的优势：</p>\n<ul>\n<li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li>\n<li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li>\n<li>响应式页面，适配手机、平板等设备；</li>\n<li>转载文章；</li>\n</ul>\n<h2 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a>个人技能</h2><ul>\n<li>Html + Css + JavaScript + NodeJS + MySQL + React</li>\n<li>C&#x2F;C++ + UE</li>\n<li>数据结构与算法 + 计算机网络 + 计算机组成原理 + 操作系统</li>\n</ul>\n<h2 id=\"项目组\"><a href=\"#项目组\" class=\"headerlink\" title=\"项目组\"></a>项目组</h2><p>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Fluid ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作。</p>\n<p>该主题相较于其他主题的优势：</p>\n<ul>\n<li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li>\n<li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li>\n<li>响应式页面，适配手机、平板等设备；</li>\n<li>转载文章；</li>\n</ul>\n<h2 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a>个人技能</h2><ul>\n<li>Html + Css + JavaScript + NodeJS + MySQL + React</li>\n<li>C&#x2F;C++ + UE</li>\n<li>数据结构与算法 + 计算机网络 + 计算机组成原理 + 操作系统</li>\n</ul>\n<h2 id=\"项目组\"><a href=\"#项目组\" class=\"headerlink\" title=\"项目组\"></a>项目组</h2><p>……</p>\n"}],"Post":[{"title":"博客部署流程","index_img":"/img/Blog-Logo/Hexo.png","banner_img":"/img/Post-Banner/01.blogs/1316853.jpeg","_content":"\n**主要使用技术合集：**\n\n1. Hexo 博客系统\n2. Fluid 博客模板\n3. Obsidian + Github Pages 部署。\n\n## 1. Hexo 博客系统\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 **Markdown**（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 1.1 安装需求\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- Node.js （Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）\n- Git\n\n### 1.2 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n~~~cmd\nnpm install -g hexo-cli\n~~~\n\n全局安装后即可随时使用\n\n### 1.3 创建博客\n\n安装完成后，就可以在终端使用 `hexo` 指令了，可以使用以下指令创建一个 hexo 项目：\n\n~~~cmd\nhexo init hexo-blog  \ncd hexo-blog  \nyarn install\n~~~\n\n完成后项目目录如下：\n\n~~~plaintext\n.  \n├── _config.yml # 网站的基础配置，文档：https://hexo.io/zh-cn/docs/configuration  \n├── package.json  \n├── scaffolds # 文章模板  \n├── source  \n|   ├── _drafts  \n|   └── _posts # 你的 markdown 文章就需要存放在此目录下  \n└── themes # 存放主题源码\n~~~\n\n## 2. 配置 Fluid 主题\n\n1. NPM 安装\n2. 源码安装\n\n### 2.1 NPM 安装\n\n以 [hexo-theme-fluid](https://github.com/fluid-dev/hexo-theme-fluid) 主题为例，使用 npm 安装只需要执行：\n\n~~~cmd\nyarn add hexo-theme-fluid  \n# 或者  \nnpm install --save hexo-theme-fluid\n~~~\n\n然后在博客目录下创建 `_config.fluid.yml`，将主题的 `_config.yml` 内容复制进去。\n\n### 2.2 源码安装\n\n源码安装是老版本 Hexo 安装主题的方式，如果你项修改主题的源码也可以很方便的直接修改。\n\n仍然以 [hexo-theme-fluid](https://github.com/fluid-dev/hexo-theme-fluid) 主题为例，在项目的 [Releases](https://github.com/fluid-dev/hexo-theme-fluid/releases) 页面中下载源码文件：\n\n![](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011507960.png)\n\n下载解压后，在 `themes` 目录下创建一个 `fluid` 目录，将源码复制到该目录下，如下：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011509213.png)\n\n### 2.3 应用主题\n\n当你安装成功后，需要在 `_config.yml` 中将使用的主题设置为你下载好的主题，找到 `theme` 配置项，将其修改为：\n\n~~~yml\n# Extensions  \n## Plugins: https://hexo.io/plugins/  \n## Themes: https://hexo.io/themes/  \ntheme: fluid\n~~~\n\n### 2.4 配置第三方主题\n\n如果你是以 npm 方式安装主题，你需要修改你刚才在博客目录下创建 `_config.fluid.yml` 文件修改相关配置；\n\n如果你是以源码方式安装的主题，就不需要创建 `_config.fluid.yml` 文件了，只需要修改 `/themes/fluid/_config.yml` 文件中的配置就可以了。\n\n> 注意：每个主题的配置文件名称都不一样，主题的配置项也不一样，具体需要自行查看你安装主题的说明文档\n\n## 3. 部署 Github Pages\n\n然后在 Github 中创建一个新项目仓库，名称必须为 `<你的github用户名>.github.io`，创建完成后按照指引将你的博客代码上传到 github。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011512358.png)\n\n### 3.1 开启 Github Pages\n\n在执行这一步之前，先创建一个没有任何代码的新分支，命名为 `gh-pages`：\n\n~~~git\ngit checkout -b gh-pages  \nrm -f * # 确定你的当前目录没问题，把握不住删除指令的话就手动删除当前文件加的内容  \ngit push --set-upstream origin release # 上传 release 分支\n~~~\n\n在项目的设置中找到 Github Pages，并将展示分支设置为刚才创建的 `gh-pages` 分支：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011513779.png)\n\n这就意为这你在 `gh-pages` 上传的任何 html 都可以使用 `<你的github用户名>.github.io` 这个域名来访问了。\n\n我们切回 `master` 分支，之后执行 `yarn build` 将生成的 `public` 目录下的文件复制一份，然后重新切回 `gh-pages` 分支，将刚才复制的内容粘贴到 `gh-pages` 分支下，并上传代码。如果没有操作失误的话，访问 `<你的github用户名>.github.io` 即可看到你的博客了。\n\n### 3.2 Github Action 自动部署\n\n使用 Github Action 来帮我们做自动化部署。\n\nGithub Action 可以实现在一个行为触发之后再执行一些其他的行为，利用这个能力我们就可以实现当我们写完一篇文章后，将代码 Push 到 Github 仓库的这一刻，让 Github 来帮我们完成编译以及部署这个流程，也就是实现持续集成（CI）、持续交付（CD）的这个效果。\n\n关于 Github Action，详细教程可以查看 [官方文档](https://docs.github.com/cn/actions)。按照文档中所描述的，只要我们在代码中添加一层 `.github/workflows` 目录，并且在目录下创建一个 `yml` 文件来描述具体的行为，就可以实现开启 Github Action。\n\n如下是一个编写好的部署 hexo 博客的 yml 文件，你可以将其写入到 `.github/workflows/blog-deploy.yml` 文件中：\n\n~~~yml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main # default branch\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"16\"\n\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.ACCESS_TOKEN }}\n          publish_dir: ./public\n~~~\n\n保存后提交代码后，就可以在你的博客的 Github 项目仓库里的 Actions 标签页里找到创建好的 workflow 了，并且当你 push 代码时，这个工作流就会被触发：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011517404.png)\n\n\n但其实它最终会失败的，因为我们还有一步没有完成。在上面的脚本中使用了一个 Github Action 的 [secrets 上下文](https://docs.github.com/cn/actions/learn-github-actions/contexts#secrets-context)，即 `${{ secrets.ACCESS_TOKEN }}` 这里。\n\n`${{ xxx }}` 是 Github Action 中的特定模板语法，可以获取到一些 Github 相关的内置的系统变量（姑且这么说吧），但又区区别与 Github Action 的环境变量。我们这里获取的 `secrets.ACCESS_TOKEN` 是 Github Personal access token，获取这个 token 的目的是为了让当前的 Github Action 工作流有向我们的项目推送代码的权限。\n\n首先我们要获取这个 Token，你可以在你的用户头像菜单里选择 `Setting`，进入设置后选择 `Developer settings`，再选择 `Persona access token` 就可以看到它了：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518709.png)\n\n点击右上角的 `Generate new token` 按钮生成新的 Token，填写一个你比较容易区分的备注后，勾选 `repo` 和 `workflow` 权限，并将 `Expiration` 过期时间选为 `No expiration`：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518481.png)\n\n> 这个 Token 相当重要，千万不能泄露，如过泄露立刻重置该 token ！！！\n\n点击 `Generate token` 按钮后，就会生成一个 `ghp` 开头的 token，你需要在此复制该 token（后面不能再查看了，只能重新生成）:\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518736.png)\n\n复制该 token 后，进入到博客仓库的设置中，选择 `Secrets - Actions`，点击 `New repository secret` 按钮生成一个密钥信息：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011519065.png)\n\n我们将密钥名称写为 `ACCESS_TOKEN`，值填入刚才复制的 Github token。\n\n> 这里所新建的 secret 字段，就可以被 Github Action yml 配置中的 `secret` 上下文对象所获取到。\n\n至此 Github Action 工作流就可以正常使用了，你可以愉快的开始写你的博客啦，你的每次提交 Github Action 都会帮你进行自动部署。","source":"_posts/博客部署流程.md","raw":"---\ntitle: 博客部署流程\ntags: [Blog, Hexo, Fluid, Obdidian, Github Pages]\nindex_img: /img/Blog-Logo/Hexo.png\nbanner_img: /img/Post-Banner/01.blogs/1316853.jpeg\n---\n\n**主要使用技术合集：**\n\n1. Hexo 博客系统\n2. Fluid 博客模板\n3. Obsidian + Github Pages 部署。\n\n## 1. Hexo 博客系统\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 **Markdown**（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 1.1 安装需求\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- Node.js （Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）\n- Git\n\n### 1.2 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n~~~cmd\nnpm install -g hexo-cli\n~~~\n\n全局安装后即可随时使用\n\n### 1.3 创建博客\n\n安装完成后，就可以在终端使用 `hexo` 指令了，可以使用以下指令创建一个 hexo 项目：\n\n~~~cmd\nhexo init hexo-blog  \ncd hexo-blog  \nyarn install\n~~~\n\n完成后项目目录如下：\n\n~~~plaintext\n.  \n├── _config.yml # 网站的基础配置，文档：https://hexo.io/zh-cn/docs/configuration  \n├── package.json  \n├── scaffolds # 文章模板  \n├── source  \n|   ├── _drafts  \n|   └── _posts # 你的 markdown 文章就需要存放在此目录下  \n└── themes # 存放主题源码\n~~~\n\n## 2. 配置 Fluid 主题\n\n1. NPM 安装\n2. 源码安装\n\n### 2.1 NPM 安装\n\n以 [hexo-theme-fluid](https://github.com/fluid-dev/hexo-theme-fluid) 主题为例，使用 npm 安装只需要执行：\n\n~~~cmd\nyarn add hexo-theme-fluid  \n# 或者  \nnpm install --save hexo-theme-fluid\n~~~\n\n然后在博客目录下创建 `_config.fluid.yml`，将主题的 `_config.yml` 内容复制进去。\n\n### 2.2 源码安装\n\n源码安装是老版本 Hexo 安装主题的方式，如果你项修改主题的源码也可以很方便的直接修改。\n\n仍然以 [hexo-theme-fluid](https://github.com/fluid-dev/hexo-theme-fluid) 主题为例，在项目的 [Releases](https://github.com/fluid-dev/hexo-theme-fluid/releases) 页面中下载源码文件：\n\n![](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011507960.png)\n\n下载解压后，在 `themes` 目录下创建一个 `fluid` 目录，将源码复制到该目录下，如下：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011509213.png)\n\n### 2.3 应用主题\n\n当你安装成功后，需要在 `_config.yml` 中将使用的主题设置为你下载好的主题，找到 `theme` 配置项，将其修改为：\n\n~~~yml\n# Extensions  \n## Plugins: https://hexo.io/plugins/  \n## Themes: https://hexo.io/themes/  \ntheme: fluid\n~~~\n\n### 2.4 配置第三方主题\n\n如果你是以 npm 方式安装主题，你需要修改你刚才在博客目录下创建 `_config.fluid.yml` 文件修改相关配置；\n\n如果你是以源码方式安装的主题，就不需要创建 `_config.fluid.yml` 文件了，只需要修改 `/themes/fluid/_config.yml` 文件中的配置就可以了。\n\n> 注意：每个主题的配置文件名称都不一样，主题的配置项也不一样，具体需要自行查看你安装主题的说明文档\n\n## 3. 部署 Github Pages\n\n然后在 Github 中创建一个新项目仓库，名称必须为 `<你的github用户名>.github.io`，创建完成后按照指引将你的博客代码上传到 github。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011512358.png)\n\n### 3.1 开启 Github Pages\n\n在执行这一步之前，先创建一个没有任何代码的新分支，命名为 `gh-pages`：\n\n~~~git\ngit checkout -b gh-pages  \nrm -f * # 确定你的当前目录没问题，把握不住删除指令的话就手动删除当前文件加的内容  \ngit push --set-upstream origin release # 上传 release 分支\n~~~\n\n在项目的设置中找到 Github Pages，并将展示分支设置为刚才创建的 `gh-pages` 分支：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011513779.png)\n\n这就意为这你在 `gh-pages` 上传的任何 html 都可以使用 `<你的github用户名>.github.io` 这个域名来访问了。\n\n我们切回 `master` 分支，之后执行 `yarn build` 将生成的 `public` 目录下的文件复制一份，然后重新切回 `gh-pages` 分支，将刚才复制的内容粘贴到 `gh-pages` 分支下，并上传代码。如果没有操作失误的话，访问 `<你的github用户名>.github.io` 即可看到你的博客了。\n\n### 3.2 Github Action 自动部署\n\n使用 Github Action 来帮我们做自动化部署。\n\nGithub Action 可以实现在一个行为触发之后再执行一些其他的行为，利用这个能力我们就可以实现当我们写完一篇文章后，将代码 Push 到 Github 仓库的这一刻，让 Github 来帮我们完成编译以及部署这个流程，也就是实现持续集成（CI）、持续交付（CD）的这个效果。\n\n关于 Github Action，详细教程可以查看 [官方文档](https://docs.github.com/cn/actions)。按照文档中所描述的，只要我们在代码中添加一层 `.github/workflows` 目录，并且在目录下创建一个 `yml` 文件来描述具体的行为，就可以实现开启 Github Action。\n\n如下是一个编写好的部署 hexo 博客的 yml 文件，你可以将其写入到 `.github/workflows/blog-deploy.yml` 文件中：\n\n~~~yml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main # default branch\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"16\"\n\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.ACCESS_TOKEN }}\n          publish_dir: ./public\n~~~\n\n保存后提交代码后，就可以在你的博客的 Github 项目仓库里的 Actions 标签页里找到创建好的 workflow 了，并且当你 push 代码时，这个工作流就会被触发：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011517404.png)\n\n\n但其实它最终会失败的，因为我们还有一步没有完成。在上面的脚本中使用了一个 Github Action 的 [secrets 上下文](https://docs.github.com/cn/actions/learn-github-actions/contexts#secrets-context)，即 `${{ secrets.ACCESS_TOKEN }}` 这里。\n\n`${{ xxx }}` 是 Github Action 中的特定模板语法，可以获取到一些 Github 相关的内置的系统变量（姑且这么说吧），但又区区别与 Github Action 的环境变量。我们这里获取的 `secrets.ACCESS_TOKEN` 是 Github Personal access token，获取这个 token 的目的是为了让当前的 Github Action 工作流有向我们的项目推送代码的权限。\n\n首先我们要获取这个 Token，你可以在你的用户头像菜单里选择 `Setting`，进入设置后选择 `Developer settings`，再选择 `Persona access token` 就可以看到它了：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518709.png)\n\n点击右上角的 `Generate new token` 按钮生成新的 Token，填写一个你比较容易区分的备注后，勾选 `repo` 和 `workflow` 权限，并将 `Expiration` 过期时间选为 `No expiration`：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518481.png)\n\n> 这个 Token 相当重要，千万不能泄露，如过泄露立刻重置该 token ！！！\n\n点击 `Generate token` 按钮后，就会生成一个 `ghp` 开头的 token，你需要在此复制该 token（后面不能再查看了，只能重新生成）:\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518736.png)\n\n复制该 token 后，进入到博客仓库的设置中，选择 `Secrets - Actions`，点击 `New repository secret` 按钮生成一个密钥信息：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011519065.png)\n\n我们将密钥名称写为 `ACCESS_TOKEN`，值填入刚才复制的 Github token。\n\n> 这里所新建的 secret 字段，就可以被 Github Action yml 配置中的 `secret` 上下文对象所获取到。\n\n至此 Github Action 工作流就可以正常使用了，你可以愉快的开始写你的博客啦，你的每次提交 Github Action 都会帮你进行自动部署。","slug":"博客部署流程","published":1,"date":"2023-08-01T00:47:58.644Z","updated":"2023-08-01T07:32:36.376Z","_id":"clkrobmbf0001u0pkc6e72u5t","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>主要使用技术合集：</strong></p>\n<ol>\n<li>Hexo 博客系统</li>\n<li>Fluid 博客模板</li>\n<li>Obsidian + Github Pages 部署。</li>\n</ol>\n<h2 id=\"1-Hexo-博客系统\"><a href=\"#1-Hexo-博客系统\" class=\"headerlink\" title=\"1. Hexo 博客系统\"></a>1. Hexo 博客系统</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <strong>Markdown</strong>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"1-1-安装需求\"><a href=\"#1-1-安装需求\" class=\"headerlink\" title=\"1.1 安装需求\"></a>1.1 安装需求</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li>Node.js （Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）</li>\n<li>Git</li>\n</ul>\n<h3 id=\"1-2-安装-Hexo\"><a href=\"#1-2-安装-Hexo\" class=\"headerlink\" title=\"1.2 安装 Hexo\"></a>1.2 安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<p>全局安装后即可随时使用</p>\n<h3 id=\"1-3-创建博客\"><a href=\"#1-3-创建博客\" class=\"headerlink\" title=\"1.3 创建博客\"></a>1.3 创建博客</h3><p>安装完成后，就可以在终端使用 <code>hexo</code> 指令了，可以使用以下指令创建一个 hexo 项目：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo init hexo-blog  <br><span class=\"hljs-built_in\">cd</span> hexo-blog  <br>yarn install<br></code></pre></td></tr></table></figure>\n\n<p>完成后项目目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">.  <br>├── _config.yml # 网站的基础配置，文档：https://hexo.io/zh-cn/docs/configuration  <br>├── package.json  <br>├── scaffolds # 文章模板  <br>├── source  <br>|   ├── _drafts  <br>|   └── _posts # 你的 markdown 文章就需要存放在此目录下  <br>└── themes # 存放主题源码<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置-Fluid-主题\"><a href=\"#2-配置-Fluid-主题\" class=\"headerlink\" title=\"2. 配置 Fluid 主题\"></a>2. 配置 Fluid 主题</h2><ol>\n<li>NPM 安装</li>\n<li>源码安装</li>\n</ol>\n<h3 id=\"2-1-NPM-安装\"><a href=\"#2-1-NPM-安装\" class=\"headerlink\" title=\"2.1 NPM 安装\"></a>2.1 NPM 安装</h3><p>以 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">hexo-theme-fluid</a> 主题为例，使用 npm 安装只需要执行：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">yarn add hexo-theme-fluid  <br># 或者  <br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure>\n\n<p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <code>_config.yml</code> 内容复制进去。</p>\n<h3 id=\"2-2-源码安装\"><a href=\"#2-2-源码安装\" class=\"headerlink\" title=\"2.2 源码安装\"></a>2.2 源码安装</h3><p>源码安装是老版本 Hexo 安装主题的方式，如果你项修改主题的源码也可以很方便的直接修改。</p>\n<p>仍然以 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">hexo-theme-fluid</a> 主题为例，在项目的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/releases\">Releases</a> 页面中下载源码文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011507960.png\"></p>\n<p>下载解压后，在 <code>themes</code> 目录下创建一个 <code>fluid</code> 目录，将源码复制到该目录下，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011509213.png\" alt=\"image.png\"></p>\n<h3 id=\"2-3-应用主题\"><a href=\"#2-3-应用主题\" class=\"headerlink\" title=\"2.3 应用主题\"></a>2.3 应用主题</h3><p>当你安装成功后，需要在 <code>_config.yml</code> 中将使用的主题设置为你下载好的主题，找到 <code>theme</code> 配置项，将其修改为：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions  </span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/  </span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/  </span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">fluid</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-配置第三方主题\"><a href=\"#2-4-配置第三方主题\" class=\"headerlink\" title=\"2.4 配置第三方主题\"></a>2.4 配置第三方主题</h3><p>如果你是以 npm 方式安装主题，你需要修改你刚才在博客目录下创建 <code>_config.fluid.yml</code> 文件修改相关配置；</p>\n<p>如果你是以源码方式安装的主题，就不需要创建 <code>_config.fluid.yml</code> 文件了，只需要修改 <code>/themes/fluid/_config.yml</code> 文件中的配置就可以了。</p>\n<blockquote>\n<p>注意：每个主题的配置文件名称都不一样，主题的配置项也不一样，具体需要自行查看你安装主题的说明文档</p>\n</blockquote>\n<h2 id=\"3-部署-Github-Pages\"><a href=\"#3-部署-Github-Pages\" class=\"headerlink\" title=\"3. 部署 Github Pages\"></a>3. 部署 Github Pages</h2><p>然后在 Github 中创建一个新项目仓库，名称必须为 <code>&lt;你的github用户名&gt;.github.io</code>，创建完成后按照指引将你的博客代码上传到 github。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011512358.png\" alt=\"image.png\"></p>\n<h3 id=\"3-1-开启-Github-Pages\"><a href=\"#3-1-开启-Github-Pages\" class=\"headerlink\" title=\"3.1 开启 Github Pages\"></a>3.1 开启 Github Pages</h3><p>在执行这一步之前，先创建一个没有任何代码的新分支，命名为 <code>gh-pages</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">git checkout -b gh-pages  <br>rm -f * # 确定你的当前目录没问题，把握不住删除指令的话就手动删除当前文件加的内容  <br>git push --set-upstream origin release # 上传 release 分支<br></code></pre></td></tr></table></figure>\n\n<p>在项目的设置中找到 Github Pages，并将展示分支设置为刚才创建的 <code>gh-pages</code> 分支：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011513779.png\" alt=\"image.png\"></p>\n<p>这就意为这你在 <code>gh-pages</code> 上传的任何 html 都可以使用 <code>&lt;你的github用户名&gt;.github.io</code> 这个域名来访问了。</p>\n<p>我们切回 <code>master</code> 分支，之后执行 <code>yarn build</code> 将生成的 <code>public</code> 目录下的文件复制一份，然后重新切回 <code>gh-pages</code> 分支，将刚才复制的内容粘贴到 <code>gh-pages</code> 分支下，并上传代码。如果没有操作失误的话，访问 <code>&lt;你的github用户名&gt;.github.io</code> 即可看到你的博客了。</p>\n<h3 id=\"3-2-Github-Action-自动部署\"><a href=\"#3-2-Github-Action-自动部署\" class=\"headerlink\" title=\"3.2 Github Action 自动部署\"></a>3.2 Github Action 自动部署</h3><p>使用 Github Action 来帮我们做自动化部署。</p>\n<p>Github Action 可以实现在一个行为触发之后再执行一些其他的行为，利用这个能力我们就可以实现当我们写完一篇文章后，将代码 Push 到 Github 仓库的这一刻，让 Github 来帮我们完成编译以及部署这个流程，也就是实现持续集成（CI）、持续交付（CD）的这个效果。</p>\n<p>关于 Github Action，详细教程可以查看 <a href=\"https://docs.github.com/cn/actions\">官方文档</a>。按照文档中所描述的，只要我们在代码中添加一层 <code>.github/workflows</code> 目录，并且在目录下创建一个 <code>yml</code> 文件来描述具体的行为，就可以实现开启 Github Action。</p>\n<p>如下是一个编写好的部署 hexo 博客的 yml 文件，你可以将其写入到 <code>.github/workflows/blog-deploy.yml</code> 文件中：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span><br><br><span class=\"hljs-attr\">on:</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span> <span class=\"hljs-comment\"># default branch</span><br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">pages:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">permissions:</span><br>      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span><br><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-number\">16.</span><span class=\"hljs-string\">x</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">&quot;16&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">NPM</span> <span class=\"hljs-string\">dependencies</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">node_modules</span><br>          <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.OS</span> <span class=\"hljs-string\">&#125;&#125;-npm-cache</span><br>          <span class=\"hljs-attr\">restore-keys:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">Dependencies</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">peaceiris/actions-gh-pages@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">github_token:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.ACCESS_TOKEN</span> <span class=\"hljs-string\">&#125;&#125;</span><br>          <span class=\"hljs-attr\">publish_dir:</span> <span class=\"hljs-string\">./public</span><br></code></pre></td></tr></table></figure>\n\n<p>保存后提交代码后，就可以在你的博客的 Github 项目仓库里的 Actions 标签页里找到创建好的 workflow 了，并且当你 push 代码时，这个工作流就会被触发：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011517404.png\" alt=\"image.png\"></p>\n<p>但其实它最终会失败的，因为我们还有一步没有完成。在上面的脚本中使用了一个 Github Action 的 <a href=\"https://docs.github.com/cn/actions/learn-github-actions/contexts#secrets-context\">secrets 上下文</a>，即 <code>$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</code> 这里。</p>\n<p><code>$&#123;&#123; xxx &#125;&#125;</code> 是 Github Action 中的特定模板语法，可以获取到一些 Github 相关的内置的系统变量（姑且这么说吧），但又区区别与 Github Action 的环境变量。我们这里获取的 <code>secrets.ACCESS_TOKEN</code> 是 Github Personal access token，获取这个 token 的目的是为了让当前的 Github Action 工作流有向我们的项目推送代码的权限。</p>\n<p>首先我们要获取这个 Token，你可以在你的用户头像菜单里选择 <code>Setting</code>，进入设置后选择 <code>Developer settings</code>，再选择 <code>Persona access token</code> 就可以看到它了：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518709.png\" alt=\"image.png\"></p>\n<p>点击右上角的 <code>Generate new token</code> 按钮生成新的 Token，填写一个你比较容易区分的备注后，勾选 <code>repo</code> 和 <code>workflow</code> 权限，并将 <code>Expiration</code> 过期时间选为 <code>No expiration</code>：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518481.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>这个 Token 相当重要，千万不能泄露，如过泄露立刻重置该 token ！！！</p>\n</blockquote>\n<p>点击 <code>Generate token</code> 按钮后，就会生成一个 <code>ghp</code> 开头的 token，你需要在此复制该 token（后面不能再查看了，只能重新生成）:</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518736.png\" alt=\"image.png\"></p>\n<p>复制该 token 后，进入到博客仓库的设置中，选择 <code>Secrets - Actions</code>，点击 <code>New repository secret</code> 按钮生成一个密钥信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011519065.png\" alt=\"image.png\"></p>\n<p>我们将密钥名称写为 <code>ACCESS_TOKEN</code>，值填入刚才复制的 Github token。</p>\n<blockquote>\n<p>这里所新建的 secret 字段，就可以被 Github Action yml 配置中的 <code>secret</code> 上下文对象所获取到。</p>\n</blockquote>\n<p>至此 Github Action 工作流就可以正常使用了，你可以愉快的开始写你的博客啦，你的每次提交 Github Action 都会帮你进行自动部署。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>主要使用技术合集：</strong></p>\n<ol>\n<li>Hexo 博客系统</li>\n<li>Fluid 博客模板</li>\n<li>Obsidian + Github Pages 部署。</li>\n</ol>\n<h2 id=\"1-Hexo-博客系统\"><a href=\"#1-Hexo-博客系统\" class=\"headerlink\" title=\"1. Hexo 博客系统\"></a>1. Hexo 博客系统</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <strong>Markdown</strong>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"1-1-安装需求\"><a href=\"#1-1-安装需求\" class=\"headerlink\" title=\"1.1 安装需求\"></a>1.1 安装需求</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li>Node.js （Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）</li>\n<li>Git</li>\n</ul>\n<h3 id=\"1-2-安装-Hexo\"><a href=\"#1-2-安装-Hexo\" class=\"headerlink\" title=\"1.2 安装 Hexo\"></a>1.2 安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<p>全局安装后即可随时使用</p>\n<h3 id=\"1-3-创建博客\"><a href=\"#1-3-创建博客\" class=\"headerlink\" title=\"1.3 创建博客\"></a>1.3 创建博客</h3><p>安装完成后，就可以在终端使用 <code>hexo</code> 指令了，可以使用以下指令创建一个 hexo 项目：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo init hexo-blog  <br><span class=\"hljs-built_in\">cd</span> hexo-blog  <br>yarn install<br></code></pre></td></tr></table></figure>\n\n<p>完成后项目目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">.  <br>├── _config.yml # 网站的基础配置，文档：https://hexo.io/zh-cn/docs/configuration  <br>├── package.json  <br>├── scaffolds # 文章模板  <br>├── source  <br>|   ├── _drafts  <br>|   └── _posts # 你的 markdown 文章就需要存放在此目录下  <br>└── themes # 存放主题源码<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置-Fluid-主题\"><a href=\"#2-配置-Fluid-主题\" class=\"headerlink\" title=\"2. 配置 Fluid 主题\"></a>2. 配置 Fluid 主题</h2><ol>\n<li>NPM 安装</li>\n<li>源码安装</li>\n</ol>\n<h3 id=\"2-1-NPM-安装\"><a href=\"#2-1-NPM-安装\" class=\"headerlink\" title=\"2.1 NPM 安装\"></a>2.1 NPM 安装</h3><p>以 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">hexo-theme-fluid</a> 主题为例，使用 npm 安装只需要执行：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">yarn add hexo-theme-fluid  <br># 或者  <br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure>\n\n<p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <code>_config.yml</code> 内容复制进去。</p>\n<h3 id=\"2-2-源码安装\"><a href=\"#2-2-源码安装\" class=\"headerlink\" title=\"2.2 源码安装\"></a>2.2 源码安装</h3><p>源码安装是老版本 Hexo 安装主题的方式，如果你项修改主题的源码也可以很方便的直接修改。</p>\n<p>仍然以 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">hexo-theme-fluid</a> 主题为例，在项目的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/releases\">Releases</a> 页面中下载源码文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011507960.png\"></p>\n<p>下载解压后，在 <code>themes</code> 目录下创建一个 <code>fluid</code> 目录，将源码复制到该目录下，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011509213.png\" alt=\"image.png\"></p>\n<h3 id=\"2-3-应用主题\"><a href=\"#2-3-应用主题\" class=\"headerlink\" title=\"2.3 应用主题\"></a>2.3 应用主题</h3><p>当你安装成功后，需要在 <code>_config.yml</code> 中将使用的主题设置为你下载好的主题，找到 <code>theme</code> 配置项，将其修改为：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions  </span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/  </span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/  </span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">fluid</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-配置第三方主题\"><a href=\"#2-4-配置第三方主题\" class=\"headerlink\" title=\"2.4 配置第三方主题\"></a>2.4 配置第三方主题</h3><p>如果你是以 npm 方式安装主题，你需要修改你刚才在博客目录下创建 <code>_config.fluid.yml</code> 文件修改相关配置；</p>\n<p>如果你是以源码方式安装的主题，就不需要创建 <code>_config.fluid.yml</code> 文件了，只需要修改 <code>/themes/fluid/_config.yml</code> 文件中的配置就可以了。</p>\n<blockquote>\n<p>注意：每个主题的配置文件名称都不一样，主题的配置项也不一样，具体需要自行查看你安装主题的说明文档</p>\n</blockquote>\n<h2 id=\"3-部署-Github-Pages\"><a href=\"#3-部署-Github-Pages\" class=\"headerlink\" title=\"3. 部署 Github Pages\"></a>3. 部署 Github Pages</h2><p>然后在 Github 中创建一个新项目仓库，名称必须为 <code>&lt;你的github用户名&gt;.github.io</code>，创建完成后按照指引将你的博客代码上传到 github。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011512358.png\" alt=\"image.png\"></p>\n<h3 id=\"3-1-开启-Github-Pages\"><a href=\"#3-1-开启-Github-Pages\" class=\"headerlink\" title=\"3.1 开启 Github Pages\"></a>3.1 开启 Github Pages</h3><p>在执行这一步之前，先创建一个没有任何代码的新分支，命名为 <code>gh-pages</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">git checkout -b gh-pages  <br>rm -f * # 确定你的当前目录没问题，把握不住删除指令的话就手动删除当前文件加的内容  <br>git push --set-upstream origin release # 上传 release 分支<br></code></pre></td></tr></table></figure>\n\n<p>在项目的设置中找到 Github Pages，并将展示分支设置为刚才创建的 <code>gh-pages</code> 分支：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011513779.png\" alt=\"image.png\"></p>\n<p>这就意为这你在 <code>gh-pages</code> 上传的任何 html 都可以使用 <code>&lt;你的github用户名&gt;.github.io</code> 这个域名来访问了。</p>\n<p>我们切回 <code>master</code> 分支，之后执行 <code>yarn build</code> 将生成的 <code>public</code> 目录下的文件复制一份，然后重新切回 <code>gh-pages</code> 分支，将刚才复制的内容粘贴到 <code>gh-pages</code> 分支下，并上传代码。如果没有操作失误的话，访问 <code>&lt;你的github用户名&gt;.github.io</code> 即可看到你的博客了。</p>\n<h3 id=\"3-2-Github-Action-自动部署\"><a href=\"#3-2-Github-Action-自动部署\" class=\"headerlink\" title=\"3.2 Github Action 自动部署\"></a>3.2 Github Action 自动部署</h3><p>使用 Github Action 来帮我们做自动化部署。</p>\n<p>Github Action 可以实现在一个行为触发之后再执行一些其他的行为，利用这个能力我们就可以实现当我们写完一篇文章后，将代码 Push 到 Github 仓库的这一刻，让 Github 来帮我们完成编译以及部署这个流程，也就是实现持续集成（CI）、持续交付（CD）的这个效果。</p>\n<p>关于 Github Action，详细教程可以查看 <a href=\"https://docs.github.com/cn/actions\">官方文档</a>。按照文档中所描述的，只要我们在代码中添加一层 <code>.github/workflows</code> 目录，并且在目录下创建一个 <code>yml</code> 文件来描述具体的行为，就可以实现开启 Github Action。</p>\n<p>如下是一个编写好的部署 hexo 博客的 yml 文件，你可以将其写入到 <code>.github/workflows/blog-deploy.yml</code> 文件中：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span><br><br><span class=\"hljs-attr\">on:</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span> <span class=\"hljs-comment\"># default branch</span><br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">pages:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">permissions:</span><br>      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span><br><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-number\">16.</span><span class=\"hljs-string\">x</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">&quot;16&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">NPM</span> <span class=\"hljs-string\">dependencies</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">node_modules</span><br>          <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.OS</span> <span class=\"hljs-string\">&#125;&#125;-npm-cache</span><br>          <span class=\"hljs-attr\">restore-keys:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">Dependencies</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">build</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">peaceiris/actions-gh-pages@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">github_token:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.ACCESS_TOKEN</span> <span class=\"hljs-string\">&#125;&#125;</span><br>          <span class=\"hljs-attr\">publish_dir:</span> <span class=\"hljs-string\">./public</span><br></code></pre></td></tr></table></figure>\n\n<p>保存后提交代码后，就可以在你的博客的 Github 项目仓库里的 Actions 标签页里找到创建好的 workflow 了，并且当你 push 代码时，这个工作流就会被触发：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011517404.png\" alt=\"image.png\"></p>\n<p>但其实它最终会失败的，因为我们还有一步没有完成。在上面的脚本中使用了一个 Github Action 的 <a href=\"https://docs.github.com/cn/actions/learn-github-actions/contexts#secrets-context\">secrets 上下文</a>，即 <code>$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</code> 这里。</p>\n<p><code>$&#123;&#123; xxx &#125;&#125;</code> 是 Github Action 中的特定模板语法，可以获取到一些 Github 相关的内置的系统变量（姑且这么说吧），但又区区别与 Github Action 的环境变量。我们这里获取的 <code>secrets.ACCESS_TOKEN</code> 是 Github Personal access token，获取这个 token 的目的是为了让当前的 Github Action 工作流有向我们的项目推送代码的权限。</p>\n<p>首先我们要获取这个 Token，你可以在你的用户头像菜单里选择 <code>Setting</code>，进入设置后选择 <code>Developer settings</code>，再选择 <code>Persona access token</code> 就可以看到它了：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518709.png\" alt=\"image.png\"></p>\n<p>点击右上角的 <code>Generate new token</code> 按钮生成新的 Token，填写一个你比较容易区分的备注后，勾选 <code>repo</code> 和 <code>workflow</code> 权限，并将 <code>Expiration</code> 过期时间选为 <code>No expiration</code>：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518481.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>这个 Token 相当重要，千万不能泄露，如过泄露立刻重置该 token ！！！</p>\n</blockquote>\n<p>点击 <code>Generate token</code> 按钮后，就会生成一个 <code>ghp</code> 开头的 token，你需要在此复制该 token（后面不能再查看了，只能重新生成）:</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011518736.png\" alt=\"image.png\"></p>\n<p>复制该 token 后，进入到博客仓库的设置中，选择 <code>Secrets - Actions</code>，点击 <code>New repository secret</code> 按钮生成一个密钥信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308011519065.png\" alt=\"image.png\"></p>\n<p>我们将密钥名称写为 <code>ACCESS_TOKEN</code>，值填入刚才复制的 Github token。</p>\n<blockquote>\n<p>这里所新建的 secret 字段，就可以被 Github Action yml 配置中的 <code>secret</code> 上下文对象所获取到。</p>\n</blockquote>\n<p>至此 Github Action 工作流就可以正常使用了，你可以愉快的开始写你的博客啦，你的每次提交 Github Action 都会帮你进行自动部署。</p>\n"},{"title":"理解 C++ 内核","index_img":"/img/Blog-Logo/C++_Logo.png","banner_img":"/img/Post-Banner/01.blogs/1316853.jpeg","_content":"\n本节内容分为三部分：\n\n1. 掌握进程虚拟地址空间区域划分\n2. 从指令角度掌握函数调用堆栈详细过程\n3. 从编译器角度理解C++代码的编译、链接\n\n通过了解底层基础，了解 C++ 的如何运行。\n\n## 1. 掌握进程虚拟地址空间区域划分\n\n代码：\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint gdata1 = 10;\nint gdata2 = 0;\nint gdata3;\n\nstatic int gdata4 = 11;\nstatic int gdata5 = 0;\nstatic int gdata6;\n\nint main()\n{\n\tint a = 12;\n\tint b = 0;\n\tint c;\n\n\tstatic int d = 13;\n\tstatic int e = 0;\n\tstatic int f;\n\n\treturn 0;\n}\n~~~\n根据上述代码，如何得知各个变量存储的位置？\n\n### 1.1 虚拟进程视图\n\n首先要知道一点，程序由磁盘加载到内存时是不可能直接加载到物理内存当中的，这里的原因以及物理内存和虚拟内存的区别与联系在本篇先不做讨论 本篇接下来所讨论的范围在 x86 体系 32 位 Linux 环境下 Linux 系统会给当前每一个进程分配一个 2^32 位大小(4G)的一块空间，这块空间就叫做进程的虚拟地址空间。\n\n这里附上IBM公司关于**虚拟**的解释:\n\n```text\n它存在，你看得见，它是物理的\n它存在，你看不见，它是透明的\n它不存在，你看得见，它是虚拟的\n它不存在，你看不见，它被删除\n```\n\n这块空间的内容如下图所示：\n\n![虚拟进程空间示例图 CN](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030903283.png)\n\n![虚拟进程空间示例图 EN](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030914652.png)\n\n> 补充：  \n> x86 32位体系下的4G虚拟地址空间：  \n> **Linux默认3:1**来分配 user space : kernal space；  \n> **Windows默认2:2**来分配 user space : kernal space。\n\nLinux 中每一个运行的程序（进程），32 位操作系统都会为其分配一个 0 ～ 4GB 的进程虚拟地址空间，64 位操作系统会为其分配一个 0 ～ 16GB 的进程虚拟地址空间。\n\n解释：\n32 位操作系统下，一个指针的大小为 32 位即 4 个字节，它所能保存的地址范围为 `[0, 2^32]` ，所以它的寻址范围为 4GB 大小，所以 32 位操作系统下系统给进程分配的虚拟地址空间大小为 4 GB 。\n64 位操作系统下，一个指针的大小为 64 位即 8 个字节，它所能保存的地址范围为 `[0, 2^64]` ，即 4GB * 4GB = 16TB，所以它的寻址范围为 16TB 大小，所以 64 位操作系统下系统给进程分配的虚拟地址空间大小为 16TB 。\n\n**为什么是 4G 内存：**\n\n首先我们研究的体系是：`x86 32位Linux环境`：  \nLinux操作系统会给当前进程分配一个 `2^32` 大小的空间，那么，`2^32` 换算过来就是 4G 了。\n\n### 1.2 用户空间（User Space）\n\n1. 保留区：\n\t128M 大小，不可访问，不允许读写。任何普通程序对它的引用都是非法的，一般用来捕捉空指针和小整型值指针引用内存的异常情况。在定义指针时将其初始化为 \"NULL\"，它便不会被引用了，从而避免了野指针。\n\t\n1. 指令段【.text】、只读数据段【.rodata】：\n\t指令段存放指令，只能读，不能写；只读数据段中存放只读数据，比如字符串常量等，只能读，不能写。\n\t\n\t> 在C++中，不允许普通指针指向常量字符串，需要使用`const`：\n\t> ![示例](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030909413.png)\n3. 数据段【.data】：  \n\t存放程序中**已初始化且不为0的全局变量或静态变量**。\n\n4. 数据段【.bss】：\n\t存放程序中未初始化或者初始化为0的全局变量或静态变量。\n\t\n5. 堆【.heap】：\n\t存放动态数据，需要程序员手动开辟、释放空间，在程序刚开始运行时，此区域为空，等到程序运行到手动开辟空间的指令时，此区域动态扩张。自下向上增长。\n\t- 堆用于存放进程`运行时动态分配`的内存段，可动态扩张或缩减。\n\t- 堆中内容是`匿名`的，无法通过名字进行访问，只能通过`指针`进行间接访问。\n\t- 当进程调用`malloc(C)/new(C++)`等函数分配内存时，新分配的在堆上`动态扩张`；当调用`free(C)/delete(C++)`等函数释放内存时，被释放的内存从堆上`动态缩减`\n\t- 分配的堆内存时经过`字节对齐`的空间，以适合`原子操作`。\n\t- `堆管理器`通过`链表`管理每个申请的内存块\n\t- 由于堆内存块的申请与释放都是`无序`的，最终会产生许许多多`内存碎片`。\n\t- 堆的末端由`break指针`标识，当堆管理器需要更多内存时，可通过`系统调用brk和sbrk`来`移动break指针`以扩张堆，一般情况下由系统自动调用。\n\n6. 共享库【.dll、.so】：\n\t动态链接库，程序在运行的过程中，将一些标准库函数映射到这里，比如C标准库函数（fread、fwrite、fopen等）。\n\n7. 栈【.stack】：\n\t存放所有函数的活动空间，局部变量；根据程序的运行，调用函数，此区域动态地扩张和收缩。\n\t- 栈中存放`非静态局部变量` `函数形参` `函数返回地址`等。\n\t- 栈中内存空间由`编译器`（静态的）自动分配和释放，行为类似数据结构中的栈结构。\n\n\t\t> 主要用途：\n\t\t> 1. 为函数内部声明的**非静态局部变量**提供存储空间\n\t\t> 2. 记录函数调用过程相关的维护性信息，称为栈帧（stack frame）\n\t\t> 3. 作为`临时存储区`，用于暂时存放`较长的算术表达式部分计算结果`，或者运行时调用alloca函数`动态分配`栈内内存\n\n\t- 栈内存增长：栈能够增长到的最大内存容量为RLIMIT_STACK（通常是8M），如果此时栈的大小未达到RLIMIT_STACK，则栈会自动增长至程序运行所需的大小，如果此时栈的大小已经达到RLIMIT_STACK，若再向栈中不断压入数据，会触发页错误。栈的实时大小会在运行时由内核动态调整。\n\t- 查看栈大小：`ulimit -s`可查看和设置`栈的最大值`，当程序使用的栈大小超过该值，会发生`segmentation fault`。\n\t- - 栈的增长方向：既可以向高地址增长，也可以向低地址增长，这取决于具体实现，自上而下增长。\n\n\n2. 命令行参数：\n\t保存传递给 main 函数的参数，比如 argc 和 argv。\n\n9. 环境变量：\n\t用于存放当前的环境变量，在 Linux 下可以用 env 命令查看。\n\n### 1.3 进程空间（Kernal Space）\n\n1. 内存直接访问区【ZONE_DMA】：\n\t16M 大小，不需要经过 CPU 的寄存器，加快了磁盘和内存之间的数据交换。\n\n2. 常用区【ZONE_NORMAL】：\n\t892M 大小，内核中最重要的部分，存放页表、页面的映射、PCB。\n\n3. 高端内存区【ZONE_HIGHMEM】：\n\t128M 大小，存放大文件的映射，即内存中映射高于 1GB 的物理内存。64 位操作系统没有该段。\n\n### 1.4 最终解释\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030917571.png)\n\n> 注意：  \n> 对于`a、b、c以及'{'、'}'`来说，是存储在`.text`指令段的，因为他们生成的都是==指令==。  \n> 例如：  \n> `int a = 12`：生成汇编指令如下：`mov dword ptr[a], 0Ch`\n\n### 1.5 好处\n\n`数据`与`代码指令`分别开辟空间有以下好处：\n\n1. 当程序被装载后，数据和代码指令分别映射到两个虚拟内存区域。`数据区`对于进程而言`可读可写`，`代码指令区`对于进程而言`只读`，\n2. 现代CPU一般`数据缓存`和`指令缓存`分离，故进程虚拟地址空间中数据与代码指令分离有助于提高`CPU缓存命中率`。\n3. 若系统中运行多个该程序的副本时，其代码指令相同，故内存中只需要保存一份该程序的代码指令，大大减少了内存的开销，相同的程序的代码指令可以被多个副本进程所共享，但是数据是每个副本进程所独有的。\n\n**参考文章：**\n\n>【1】Randal E. Bryant. 《深入理解计算机系统》.北京. 机械工业出版社，2016：1\n>【2】寻痴. 虚拟地址空间图解. CSDN. 2021-03-23\n>【3】聪聪菜的睡不着. 【C++】一、虚拟内存布局、编译链接原理等基础概念. CSDN. 2020-07-09\n>【4】https://blog.csdn.net/m0_46308273/article/details/115818195\n>【5】https://blog.csdn.net/weixin_45437022/article/details/115409679\n\n## 2. 从指令角度掌握函数调用堆栈详细过程\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031030058.png)\n栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。\n\n堆栈是一种具有一定规则的数据结构，我们可以按照一定的规则进行添加和删除数据。它使用的是后进先出的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：\n\n- PUSH：将目标内存推入栈顶。\n- POP：从栈顶中移除目标。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031033393.png)\n\n当执行一个函数的时候，相关的参数以及局部变量等等都会被记录在ESP、EBP中间的区域。一旦函数执行完毕，相关的 **栈帧** 就会从堆栈中弹出，然后从预先保存好的上下文中进行恢复，以便保持堆栈平衡。CPU必须要知道函数调用完了之后要去哪里执行（pc寄存器指向）\n\n### 2.1 ESP 和 EBP\n\n（1）ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。\n（2）EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。\n\n根据上述的定义,在通常情况下ESP是可变的,随着栈的生产而逐渐变小（因为栈向低地址扩充，栈顶寄存器数值不断变小）,而EBP寄存器是固定的,只有当函数的调用后,发生入栈操作而改变。\n\n在上述的定义中使用ESP来标记栈的底部，他随着栈的变化而变化：\n\n- pop ebp;出栈 栈扩大4byte 因为ebp为32位\n- push ebp;入栈，栈减少4byte        \n- add esp, 0Ch；表示栈减小12byte\n- sub esp, 0Ch；表示栈扩大12byte\n\nebp 寄存器的出现则是为了另一个目标，通过固定的地址与偏移量来寻找在栈参数与变量。而这个固定值者存放在 ebp 寄存器中，。但是这个值会在函数的调用过程发生改变。而在函数执行结束之后需要还原，因此，在函数的出栈入栈过程中进行保存。\n\n\n**代码：**\n\n~~~c++\n#include<iostream>\nusing namespace std;\n\n/*\n问题1：main函数调用sum，sum执行完后，怎么知道回到哪个函数\n问题2：sum执行完，回到main函数之后怎么知道从哪一行继续执行\n*/\n\nint sum(int a, int b) {\n\tint temp = 0;\n\ttemp = a + b;\n\treturn temp;\n}\n\nint main() {\n\tint a = 10;\n\tint b = 20;\n\n\tint ret = sum(10, 20);\n\tcout << \"ret:\" << ret << endl;\n\t\n\treturn 0;\n}\n~~~\n\n打断点，调试，查看反汇编：\n\n```C++\nint main() {\n// 00007FF637EE23D0  push        rbp  \n// 00007FF637EE23D2  push        rdi  \n// 00007FF637EE23D3  sub         rsp,148h  \n// 00007FF637EE23DA  lea         rbp,[rsp+20h]  \n// 00007FF637EE23DF  lea         rcx,[__0DD03384_02@Assembly@cpp (07FF637EF3068h)]  \n// 00007FF637EE23E6  call        __CheckForDebuggerJustMyCode (07FF637EE13FCh)  \n\tint a = 10;\n// 00007FF637EE23EB  mov         dword ptr [a],0Ah  \n\tint b = 20;\n// 00007FF637EE23F2  mov         dword ptr [b],14h  \n\n\tint ret = sum(10, 20);\n// 00007FF637EE23F9  mov         edx,14h  \n// 00007FF637EE23FE  mov         ecx,0Ah  \n// 00007FF637EE2403  call        sum (07FF637EE11E5h)  \n// 00007FF637EE2408  mov         dword ptr [ret],eax  \n\tcout << \"ret:\" << ret << endl;\n// 00007FF637EE240B  lea         rdx,[string \"ret:\" (07FF637EEAC24h)]  \n// 00007FF637EE2412  mov         rcx,qword ptr [__imp_std::cout (07FF637EF1190h)]  \n// 00007FF637EE2419  call        std::operator<<<std::char_traits<char> > (07FF637EE108Ch)  \n// 00007FF637EE241E  mov         edx,dword ptr [ret]  \n// 00007FF637EE2421  mov         rcx,rax  \n// 00007FF637EE2424  call        qword ptr [__imp_std::basic_ostream<char,std::char_traits<char> >::operator<< (07FF637EF1168h)]  \n// 00007FF637EE242A  lea         rdx,[std::endl<char,std::char_traits<char> > (07FF637EE103Ch)]  \n// 00007FF637EE2431  mov         rcx,rax  \n// 00007FF637EE2434  call        qword ptr [__imp_std::basic_ostream<char,std::char_traits<char> >::operator<< (07FF637EF1170h)]  \n\n\treturn 0;\n// 00007FF637EE243A  xor         eax,eax  \n}\n// 00007FF637EE243C  lea         rsp,[rbp+128h]  \n// 00007FF637EE2443  pop         rdi  \n// 00007FF637EE2444  pop         rbp  \n// 00007FF637EE2445  ret \n```\n\n### 2.2  解析 main 函数\n\n**1. `{` 会进行入栈操作，`}` 进行出栈操作**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031041720.png)\n\n上面两句话的意思是将 ebp 推入栈中，之后让 esp 等于 ebp。\n\n**为什么这么做呢？**\n\n因为 ebp 作为一个用于寻址的固定值是有时间周期的。只有在某个函数执行过程中才是固定的，在函数调用与函数执行完毕后会发生改变。\n\n在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。下一步，必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。\n\n`sub esp, 148h；`减去的值根据程序而定\n\n之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）\n\n之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了\n\n在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031043365.png)\n\n所谓有始有终，这是会还原上面保存的寄存器值，之后还原esp的值（上一个函数调用之前的esp被保存在固定的ebp中）与ebp值。这一过程被称为还原现场之后通过ret返回上一个函数\n\n**2. 函数内部：**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031047611.png)\n\n1. `int a = 10;` 执行一条 mov 指令： \n\t~~~Assembly\n\tmov         dword ptr [a],0Ah\n\t~~~\n\t![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031049332.png)\n\n2.  同理 `int b = 20;` 指令：\n\t~~~Assembly\n\tmov         dword ptr [b],14h\n\t~~~\n\t![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031050787.png)\n\n3. `int ret = sum(a,b);` 指令：\n\t~~~Assmbly\n\t00F81896 8B 45 EC             mov         eax,dword ptr [b] \n\t00F81899 50                   push        eax     #压栈 b的值\n\t00F8189A 8B 4D F8             mov         ecx,dword ptr [a]  \n\t00F8189D 51                   push        ecx     #压栈 a的值\n\t00F8189E E8 E9 F7 FF FF       call        sum (0F8108Ch)   #执行call\n\t00F818A3 83 C4 08             add         esp,8  \n\t00F818A6 89 45 E0             mov         dword ptr [ret],eax \n\t~~~\n\n### 2.3 sum 函数调用后\n\n**函数调用参数的压栈顺序:参数由右向左压入堆栈。**\n\n**因此上面对应的是：**\n\n先将b的值压入堆栈，再将a的值压入堆栈\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031052077.png)\n**执行call        sum (0F8108Ch)：**\n\n**call函数首先会将下一行执行的地址入栈**：假设下一行指令的地址位0x08124458\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031053472.png)\n\n **第二步进入函数调用：sum**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031054082.png)\n\n函数调用第一步： 将调用函数（main）函数的栈底指针ebp压栈\n\n第二步：将新的栈底ebp指向原来的栈顶esp\n\n第三步：将esp指向新的栈顶（开辟了函数的栈帧）：大小：108h\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031055858.png)\n\n接着执行 `int temp = 0;` 指令：\n\n~~~assembly\nmov         dword ptr [temp],0\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031056591.png)\n\ntemp = a + b; 由于a,b的值之前入栈，可以通过 ebp+12 字节找到b的值，ebp+8 字节找到 a 的值，最后将运算结果赋值给 temp\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031057265.png)\n\n接着运行`return temp;`: \n\n~~~assembly\nmov         eax,dword ptr [temp]\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031058576.png)\n\n接着是`函数的右括号“}”`：\n\n（1）mov esp,ebp  回退栈帧 将栈顶指针指向栈底。\n（2）pop ebp 栈顶出栈,并将出栈内容赋值给ebp，也是将main的栈底重新赋值给ebp。\n（3） ret  栈顶出栈，并将出栈的内容赋值给pc寄存器，也就是将之前压榨的call sun的下一条指令赋值到pc寄存器执行。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031059983.png)\n\n### 2.4 返回 main 函数后\n\n接着调用函数完毕，回到主函数：  \n利用了`PC寄存器`，使得程序知道退出sum后运行哪一条指令：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031100556.png)\n\n`add         esp,8` ,将压栈的a b 形参空间回收\n\n`mov         dword ptr [ret],eax` 在sum中，最后将temp赋值到eax寄存器，这里将eax赋值给ret\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031101001.png)\n最后`return 0`，程序结束\n\n### 2.5 栈溢出问题\n\n出现栈内存溢出的常见原因有2个：\n\n1. 函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。\n2. 局部静态变量体积太大。\n\n> 第一种情况不太常见,因为很多情况下我们都用其他方法来代替递归调用,所以只要不出现无限制的调用都应该是没有问题的,起码深度几十层我想是没问题的。\n> 检查是否是此原因的方法为，在引起溢出的那个函数处设一个断点,然后执行程序使其停在断点处, 然后按下快捷键 Alt+7 调出 call stack 窗口,在窗口中可以看到函数调用的层次关系。\n\n>    第二种情况比较常见 在函数里定义了一个局部变量,是一个类对象,该类中有一个大数组\n\n```C++\n    即如果函数这样写：\n    void test_stack_overflow()\n    {\n      char* chdata = new[2*1024*1024];\n      delete []chdata;\n    }\n   是不会出现这个错误的，而这样写则不行：\n    void test_stack_overflow()\n    {\n      char chdata[2*1024*1024];\n    }\n   大多数情况下都会出现内存溢出的错误,\n```\n\n解决办法大致说来也有两种：  \n\n1. 增加栈内存的数目  \n2. 使用堆内存\n\n## 3. 从编译器角度理解 C++ 代码的编译、链接\n\n整个编译过程分为两大步：\n\n1）编译 ：把文本形式的源代码翻译成机器语言，并形成目标文件\n\n2）连接 ：把目标文件 操作系统的启动代码和库文件组织起来形成可执行程序\n\n### 3.1 编译\n\n细分为3个阶段：\n\n**1.1）编译预处理**\n\n预处理又称为预编译，是做些代码文本替换工作。编译器执行预处理指令（以#开头，例如 `#include`），这个过程会得到不包含#指令的 .i 文件。这个过程会拷贝 `#include` 包含的文件代码，进行 `#define` 宏定义的替换 ， 处理条件编译指令 （`#ifndef`、 `#ifdef`、 `#endif`）等。\n\n预编译过程相当于如下命令：\n\n~~~shell\ngcc -E main.c -o main.i\n~~~\n\n主要规则如下：\n\n1. 将所有的 `#define` 删除，并且展开所有的宏定义；\n2. 处理所有条件预编译指令，比如`#if`、`#ifdef`、`#elif`、`#else`、`#endif`;\n4. 处理 `#include` 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件；\n5. 删除所有的注释：`//` 和 `/**/`；\n6. 添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号；\n7. 保留所有的 `#pragma` 编译器指令，因为编译器要使用它们。\n\n> 注：  \n> `#pragma lib`、`pragma link`  \n> 等命令是在链接过程处理的。\n\n预编译后得到的文件为：`.i`文件。\n\n**1.2）编译**\n\n通过预编译输出的.i文件中，只有常量：数字、字符串、变量的定义，以及c语言的关键字：main、if、else、for、while等。这阶段要做的工作主要是，通过语法分析和词法分析，确定所有指令是否符合规则，之后翻译成汇编代码。\n\n编译过程相当于如下命令：\n\n~~~shell\ngcc -S main.i -o main.s\n~~~\n\n编译后得到的文件为：`.s`文件。\n\n**1.3) 汇编**\n\n汇编过程就是把汇编语言翻译成目标机器指令的过程，生成二进制可重定位的目标文件（.obj .o等）。目标文件中存放的也就是与源程序等效的目标的机器语言代码。\n\n目标文件由段组成，通常至少有两个段：\n\n1. .text：包换主要程序的指令。该段是可读和可执行的，一般不可写\n2. .data .rodata：存放程序用到的全局变量或静态数据。可读、可写、可执行。\n\n汇编过程我们可以调用汇编器`as`来完成：\n\n~~~shell\nas main.s -o main.o  \n# 或者：  \ngcc -c main.s -o mian.o\n~~~\n\n这个过程将.s文件转化成.o文件。\n\n### 3.2 链接过程\n\n链接是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可被加载（货被拷贝）到存储器并执行。\n\n**链接的时机**：\n\n- 编译时，也就是在源代码被翻译成机器代码时\n- 加载时，也就是在程序被加载器加载到存储器并执行时\n- 运行时，由应用程序执行\n\n#### 1. 静态链接\n\n**静态链接器**以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。输入的可重定位目标文件由各种不同的代码和数据节(section)组成。指令在一个节中，初始化的全局变量在另一个节中，而未初始化的变量又在另外一个节中。\n\n为了构造可执行文件，**链接器必须完成两个任务：符号解析，重定位**\n\n1. **符号解析：** 目标文件定义和引用符号。符号解析的目的是将每个符号引用刚好和一个符号定义联系起来。\n2. **重定位：** 编译器和汇编器生成从地址0开始的饿代码和数据节。链接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得它们指向这个存储器位置，从而重定位这些节。\n\n链接器的一些基本事实：目标文件纯粹是字节块的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包含指导链接器和加载器的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器和汇编器已经完成了大部分工作。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031125346.png)\n\n目标文件纯粹是字节快的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包括指导链接器和加载器的数据结构。链接器将这些块链接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。\n\n#### 2. 目标文件\n\n**三种形式：**\n\n1. **可重定位目标文件**。包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。\n2. **可执行目标文件**。包含二进制代码和数据，其形式可以被直接拷贝到存储器并执行。\n3. **共享目标文件**。一种特殊类型的可重定位目标文件，可以在加载或者运行地被动态地加载到存储器并链接。\n\n编译器和汇编器生成可重定位目标文件（包括共享目标文件）。链接器生成可执行目标文件。从技术上来说，一个目标模块就是一个字节序列，而一个目标文件就是一个存放在磁盘文件中的目标模块。\n\n#### 3.  可重定位目标文件\n\n一个典型的 ELF 可重定位目标文件的格式。ELF头（ELF header）以一个 16 字节的序列开始，这个序列描述了生成该文件的系统的字的大小和字节顺序。 ELF 头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或是共享的）、机器类型（如IA32）、节头部表的文件偏移，以及节头部表中的条目大小和数量。不同的节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。\n\n![ELF可重定位目标文件](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031131640.png)\n\n夹在 ELF 头和节头部表之间的都是节。一个典型的 ELF 可重定位目标文件包含下面几个节：\n\n- **.text：** 已编译程序的机器代码。\n- **.rodata：** 只读数据，比如 printf 语句中的格式串和开关语句的跳转表。\n- **.data：** 已初始化的全局和静态 C 变量。局部 C 变量在运行时被保存在栈中，既不岀现在 .data 节中，也不岀现在 .bss 节中。\n- **.bss：** 未初始化的全局和静态 C 变量，以及所有被初始化为 0 的全局或静态变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分已初始化和未初始化变量是为了空间效率：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为 0。\n- **.symtab：** 一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过 -g 选项来编译一个程序，才能得到符号表信息。实际上，每个可重定位目标文件在 .symtab 中都有一张符号表（除非程序员特意用 STRIP 命令去掉它）。然而，和编译器中的符号表不同，.symtab 符号表不包含局部变量的条目。\n- **.rel.text：** 一个 .text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面，调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非用户显式地指示链接器包含这些信息。\n- **.rel.data：** 被模块引用或定义的所有全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。\n- **.debug：** 一个调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的 C 源文件。只有以 - g 选项调用编译器驱动程序时，才 会得到这张表。\n- **.line：** 原始 C 源程序中的行号和 .text 节中机器指令之间的映射。只有以 -g 选项调用编译器驱动程序时，才会得到这张表。\n- **.strtab：** 一个字符串表，其内容包括 .symtab 和 .debug 节中的符号表，以及节头部中的节名字。字符串表就是以 null 结尾的字符串的序列。\n\n#### 4. 符号和符号表\n\n每个可重定位目标模块m都有一个符号表，包含m所定义和引用的符号的信息。符号表产生在汇编阶段，符号表生成虚拟地址在链接阶段\n\n在链接器的上下文中，有三种不同的符号：\n\n由m定义并能被其他模块引用的全局符号\n由其他模块定义并被模块m引用的全局符号\n只被模块m引用的本地符号\n\n例如：\n\n`main.cpp` 内容 和 `sum.cpp` 内容如下：\n\n~~~c++\n// main.cpp\n#include <iostream>\nusing namespace std;\n\nextern int gdata;\nint sum(int, int);\n\nint data = 20;\n\nint main()\n{\n\tint a = gdata;\n\tint b = data;\n\n\tint ret = sum(a, b);\n\n\treturn 0;\n}\n~~~\n\n~~~c++\n// sum.cpp\n#include <iostream>\nusing namespace std;\n\nint gdata = 10;\nint sum(int a, int b)\n{\n\treturn a + b;\n}\n~~~\n\n**g++ -c** 只编译不链接，只生成目标文件\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031135734.png)\n\n **objdump -t main.o // 输出目标文件的符号表：**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031136378.png)\n\n第一列：段内偏移；\n第二列：符号作用域  : local /global；\n第三列：符号类型；\n第四列：符号所在段（*UND*外部链接符号，未在本目标文件定义）；\n第五列：符号对应的对象占据的内存空间大小，没有实体对象大小为0，未定义的为0；\n第六列：符号名；\n\n其中main 定义在.text\n\ndata 是全局变量，且初始化定义在.data ,也就是m定义并能被其他模块引用的全局符号。\ngdata 和 sum 函数是声明，因此是*UNG*，也就是由其他模块定义并被模块 m 引用的全局符号。\n\n第一列都是 0x0 没有为符号分配虚拟地址，在链接阶段分配\n\n在sum.o中：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031138696.png)\n\ngdata 是出刷的全局变量 在 .data中；sum 函数在.text中\n\nreadelf -h 查看elf文件的头文件信息\n可见目标文件的elf文件，其类型为REL(可重定位文件)。 \n\nobjdump -s 显示全部Header信息，还显示他们对应的十六进制文件代码：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139885.png)\n\n有调试信息的：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139339.png)\n\n可以看到符号地址未分配，用0填充；这也是obj文件无法运行的原因之一。\n#### 5. 符号解析\n\n链接的步骤一：所有.o文件段的合并（.text  .data .bss合并），符号表合并后，进行符号解析，所有对符号的引用（*UNG*）都要找到该符号定义的地方。经常见的报错：符号重定义（存在多个相同的）、符号未定义（找不到）\n\n **链接器如何解析多重定义的全局符号：**\n\n在编译是，编译器向汇编器输出每个全局符号，或者是强或者是弱，而汇编器把这个信息隐含地编码在可重定位目标文件的符号表里。函数和已初始化的全局变量时强符号，未初始化的全局变量是弱符号。\n       根据强弱符号的定义，Unix链接器使用下面的规则来处理多重定义的符号：\n\n规则1：不允许有多个强符号。\n规则2：如果有一个强符号和多个弱符号，那么选择强符号。\n规则3：如果有多个弱符号，那么从这些弱符号中任意选择一个。\n\n**链接器如何使用静态库来解析引用：**\n\n在符号解析的阶段，链接器从左到右按照它们在编译器驱动程序命令行上出现的相同顺序来扫描可重定位目标文件和存档文件。在这次扫描中，链接器维持一个可重定位目标文件的集合E（这个集合中的文件会被合并起来形成可执行文件），一个未解析的符号（即引用了但是尚未定义的符号）集合U，以及一个在前面输入文件中已定义的符号集合D。初始时，E、U和D都是空的。\n\n> 1. 对于命令行上的每个输入文件f，链接器会判断f是一个目标文件还是一个存档文件。如果f是一个目标文件，那么链接器吧f添加到E， 修改U和D来反映f中的符号定义和引用，并继续下一个输入文件。\n> 2. 如果f是一个存档文件，那么链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m，定义了一个符号来解析U中的一个引用，那么就将m加到E中，并且链接器修改U和D来反映m中的符号定义和引用。对存档文件中所有的成员目标文件都反复进行这个过程，直到U和D都不再发生变化。在此时，任何不包含在E中的目标文件都简单地被丢弃，而链接器将继续处理下一个输入文件。\n> 3. 如果当链接器完成对命令行上输入文件的扫描后，U是非空的，那么链接器就好输出一个错误并终止。否则，它会合并和重定位E中的目标文件，从而构建输出的可执行文件。\n\n这种算法会导致一些令人困扰的链接时错误，因为命令行上的库和目标文件的顺序非常重要。在命令行中，如果定义一个符号的库出现在引用这个符号的目标文件之前，那么引用就不能被解析，链接会失败。关于库的一般准则是将它们放在命令行的 结尾。\n\n另一方面，如果库不是相互独立的，那么它们必须排序，使得对于每个被存档文件的成员外部引用的符号s，在命令行中至少有一个s的定义实在对s的引用之后的。\n\n如果需要满足依赖需求，可以在命令行上重复库。\n\n#### 6. 重定向\n一旦链接器完成了符号解析这一步，它就是把代码中的每个符号引用和确定的一个符号定义（即它的一个输入目标模块中的一个符号表条目）联系起来。在此时，链接器就知道它的输入目标模块中的代码节和数据节的确切大小。现在就可以开始重定位了，在这个步骤中，将合并输入模块，并为每个符号分配运行时地址。\n\n重定位有两步组成：\n\n1. **重定位节和符号定义**。在这一步中，链接器将所有相同类型的节合并为同一类型的新的聚合节。然后，链接器将运行时存储器地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。当这一步完成时，程序中的每个指令和全局变量都有唯一的运行时存储器地址了。\n2. **重定位节中的符号引用**。在这一步中，链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。为了执行这一步，链接器依赖于称为`重定位条目`的可重定位目标模块中的数据结构。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031143865.png)\n\n链接后：所有的符号都有虚拟地址\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031144871.png)\n\n汇编中，全局变量和函数都有了地址。\n\n#### 7. 可执行目标文件\n\n可执行目标文件的格式类似于可重定位目标文件的格式。ELF头部描述文件的总体格式。它还包括程序的入口点，也就是当程序运行时要执行的第一条指令的地址。`.text` 、`.rodata` 和 `.data` 节和可重定位目标文件中的节是相似的，除了这些节已经被重定位到它们最终的运行时存储器地址以外。.init节定义了一个小函数，叫做_init，程序的初始化代码会调用它。因为可执行文件是完全链接的（已被重定位了），所以它不再需要.rel节。\n\nELF可执行文件被设计得很容易加载到存储器，可执行文件的连续的片被映射到连续的存储器段。段头部表描述了这种映射关系。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031146917.png)\n\n","source":"_posts/02.C++ 基础部分/01.理解 C++ 内核.md","raw":"---\ntitle: 理解 C++ 内核\ntags: [C++]\nindex_img: /img/Blog-Logo/C++_Logo.png\nbanner_img: /img/Post-Banner/01.blogs/1316853.jpeg\n---\n\n本节内容分为三部分：\n\n1. 掌握进程虚拟地址空间区域划分\n2. 从指令角度掌握函数调用堆栈详细过程\n3. 从编译器角度理解C++代码的编译、链接\n\n通过了解底层基础，了解 C++ 的如何运行。\n\n## 1. 掌握进程虚拟地址空间区域划分\n\n代码：\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint gdata1 = 10;\nint gdata2 = 0;\nint gdata3;\n\nstatic int gdata4 = 11;\nstatic int gdata5 = 0;\nstatic int gdata6;\n\nint main()\n{\n\tint a = 12;\n\tint b = 0;\n\tint c;\n\n\tstatic int d = 13;\n\tstatic int e = 0;\n\tstatic int f;\n\n\treturn 0;\n}\n~~~\n根据上述代码，如何得知各个变量存储的位置？\n\n### 1.1 虚拟进程视图\n\n首先要知道一点，程序由磁盘加载到内存时是不可能直接加载到物理内存当中的，这里的原因以及物理内存和虚拟内存的区别与联系在本篇先不做讨论 本篇接下来所讨论的范围在 x86 体系 32 位 Linux 环境下 Linux 系统会给当前每一个进程分配一个 2^32 位大小(4G)的一块空间，这块空间就叫做进程的虚拟地址空间。\n\n这里附上IBM公司关于**虚拟**的解释:\n\n```text\n它存在，你看得见，它是物理的\n它存在，你看不见，它是透明的\n它不存在，你看得见，它是虚拟的\n它不存在，你看不见，它被删除\n```\n\n这块空间的内容如下图所示：\n\n![虚拟进程空间示例图 CN](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030903283.png)\n\n![虚拟进程空间示例图 EN](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030914652.png)\n\n> 补充：  \n> x86 32位体系下的4G虚拟地址空间：  \n> **Linux默认3:1**来分配 user space : kernal space；  \n> **Windows默认2:2**来分配 user space : kernal space。\n\nLinux 中每一个运行的程序（进程），32 位操作系统都会为其分配一个 0 ～ 4GB 的进程虚拟地址空间，64 位操作系统会为其分配一个 0 ～ 16GB 的进程虚拟地址空间。\n\n解释：\n32 位操作系统下，一个指针的大小为 32 位即 4 个字节，它所能保存的地址范围为 `[0, 2^32]` ，所以它的寻址范围为 4GB 大小，所以 32 位操作系统下系统给进程分配的虚拟地址空间大小为 4 GB 。\n64 位操作系统下，一个指针的大小为 64 位即 8 个字节，它所能保存的地址范围为 `[0, 2^64]` ，即 4GB * 4GB = 16TB，所以它的寻址范围为 16TB 大小，所以 64 位操作系统下系统给进程分配的虚拟地址空间大小为 16TB 。\n\n**为什么是 4G 内存：**\n\n首先我们研究的体系是：`x86 32位Linux环境`：  \nLinux操作系统会给当前进程分配一个 `2^32` 大小的空间，那么，`2^32` 换算过来就是 4G 了。\n\n### 1.2 用户空间（User Space）\n\n1. 保留区：\n\t128M 大小，不可访问，不允许读写。任何普通程序对它的引用都是非法的，一般用来捕捉空指针和小整型值指针引用内存的异常情况。在定义指针时将其初始化为 \"NULL\"，它便不会被引用了，从而避免了野指针。\n\t\n1. 指令段【.text】、只读数据段【.rodata】：\n\t指令段存放指令，只能读，不能写；只读数据段中存放只读数据，比如字符串常量等，只能读，不能写。\n\t\n\t> 在C++中，不允许普通指针指向常量字符串，需要使用`const`：\n\t> ![示例](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030909413.png)\n3. 数据段【.data】：  \n\t存放程序中**已初始化且不为0的全局变量或静态变量**。\n\n4. 数据段【.bss】：\n\t存放程序中未初始化或者初始化为0的全局变量或静态变量。\n\t\n5. 堆【.heap】：\n\t存放动态数据，需要程序员手动开辟、释放空间，在程序刚开始运行时，此区域为空，等到程序运行到手动开辟空间的指令时，此区域动态扩张。自下向上增长。\n\t- 堆用于存放进程`运行时动态分配`的内存段，可动态扩张或缩减。\n\t- 堆中内容是`匿名`的，无法通过名字进行访问，只能通过`指针`进行间接访问。\n\t- 当进程调用`malloc(C)/new(C++)`等函数分配内存时，新分配的在堆上`动态扩张`；当调用`free(C)/delete(C++)`等函数释放内存时，被释放的内存从堆上`动态缩减`\n\t- 分配的堆内存时经过`字节对齐`的空间，以适合`原子操作`。\n\t- `堆管理器`通过`链表`管理每个申请的内存块\n\t- 由于堆内存块的申请与释放都是`无序`的，最终会产生许许多多`内存碎片`。\n\t- 堆的末端由`break指针`标识，当堆管理器需要更多内存时，可通过`系统调用brk和sbrk`来`移动break指针`以扩张堆，一般情况下由系统自动调用。\n\n6. 共享库【.dll、.so】：\n\t动态链接库，程序在运行的过程中，将一些标准库函数映射到这里，比如C标准库函数（fread、fwrite、fopen等）。\n\n7. 栈【.stack】：\n\t存放所有函数的活动空间，局部变量；根据程序的运行，调用函数，此区域动态地扩张和收缩。\n\t- 栈中存放`非静态局部变量` `函数形参` `函数返回地址`等。\n\t- 栈中内存空间由`编译器`（静态的）自动分配和释放，行为类似数据结构中的栈结构。\n\n\t\t> 主要用途：\n\t\t> 1. 为函数内部声明的**非静态局部变量**提供存储空间\n\t\t> 2. 记录函数调用过程相关的维护性信息，称为栈帧（stack frame）\n\t\t> 3. 作为`临时存储区`，用于暂时存放`较长的算术表达式部分计算结果`，或者运行时调用alloca函数`动态分配`栈内内存\n\n\t- 栈内存增长：栈能够增长到的最大内存容量为RLIMIT_STACK（通常是8M），如果此时栈的大小未达到RLIMIT_STACK，则栈会自动增长至程序运行所需的大小，如果此时栈的大小已经达到RLIMIT_STACK，若再向栈中不断压入数据，会触发页错误。栈的实时大小会在运行时由内核动态调整。\n\t- 查看栈大小：`ulimit -s`可查看和设置`栈的最大值`，当程序使用的栈大小超过该值，会发生`segmentation fault`。\n\t- - 栈的增长方向：既可以向高地址增长，也可以向低地址增长，这取决于具体实现，自上而下增长。\n\n\n2. 命令行参数：\n\t保存传递给 main 函数的参数，比如 argc 和 argv。\n\n9. 环境变量：\n\t用于存放当前的环境变量，在 Linux 下可以用 env 命令查看。\n\n### 1.3 进程空间（Kernal Space）\n\n1. 内存直接访问区【ZONE_DMA】：\n\t16M 大小，不需要经过 CPU 的寄存器，加快了磁盘和内存之间的数据交换。\n\n2. 常用区【ZONE_NORMAL】：\n\t892M 大小，内核中最重要的部分，存放页表、页面的映射、PCB。\n\n3. 高端内存区【ZONE_HIGHMEM】：\n\t128M 大小，存放大文件的映射，即内存中映射高于 1GB 的物理内存。64 位操作系统没有该段。\n\n### 1.4 最终解释\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030917571.png)\n\n> 注意：  \n> 对于`a、b、c以及'{'、'}'`来说，是存储在`.text`指令段的，因为他们生成的都是==指令==。  \n> 例如：  \n> `int a = 12`：生成汇编指令如下：`mov dword ptr[a], 0Ch`\n\n### 1.5 好处\n\n`数据`与`代码指令`分别开辟空间有以下好处：\n\n1. 当程序被装载后，数据和代码指令分别映射到两个虚拟内存区域。`数据区`对于进程而言`可读可写`，`代码指令区`对于进程而言`只读`，\n2. 现代CPU一般`数据缓存`和`指令缓存`分离，故进程虚拟地址空间中数据与代码指令分离有助于提高`CPU缓存命中率`。\n3. 若系统中运行多个该程序的副本时，其代码指令相同，故内存中只需要保存一份该程序的代码指令，大大减少了内存的开销，相同的程序的代码指令可以被多个副本进程所共享，但是数据是每个副本进程所独有的。\n\n**参考文章：**\n\n>【1】Randal E. Bryant. 《深入理解计算机系统》.北京. 机械工业出版社，2016：1\n>【2】寻痴. 虚拟地址空间图解. CSDN. 2021-03-23\n>【3】聪聪菜的睡不着. 【C++】一、虚拟内存布局、编译链接原理等基础概念. CSDN. 2020-07-09\n>【4】https://blog.csdn.net/m0_46308273/article/details/115818195\n>【5】https://blog.csdn.net/weixin_45437022/article/details/115409679\n\n## 2. 从指令角度掌握函数调用堆栈详细过程\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031030058.png)\n栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。\n\n堆栈是一种具有一定规则的数据结构，我们可以按照一定的规则进行添加和删除数据。它使用的是后进先出的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：\n\n- PUSH：将目标内存推入栈顶。\n- POP：从栈顶中移除目标。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031033393.png)\n\n当执行一个函数的时候，相关的参数以及局部变量等等都会被记录在ESP、EBP中间的区域。一旦函数执行完毕，相关的 **栈帧** 就会从堆栈中弹出，然后从预先保存好的上下文中进行恢复，以便保持堆栈平衡。CPU必须要知道函数调用完了之后要去哪里执行（pc寄存器指向）\n\n### 2.1 ESP 和 EBP\n\n（1）ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。\n（2）EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。\n\n根据上述的定义,在通常情况下ESP是可变的,随着栈的生产而逐渐变小（因为栈向低地址扩充，栈顶寄存器数值不断变小）,而EBP寄存器是固定的,只有当函数的调用后,发生入栈操作而改变。\n\n在上述的定义中使用ESP来标记栈的底部，他随着栈的变化而变化：\n\n- pop ebp;出栈 栈扩大4byte 因为ebp为32位\n- push ebp;入栈，栈减少4byte        \n- add esp, 0Ch；表示栈减小12byte\n- sub esp, 0Ch；表示栈扩大12byte\n\nebp 寄存器的出现则是为了另一个目标，通过固定的地址与偏移量来寻找在栈参数与变量。而这个固定值者存放在 ebp 寄存器中，。但是这个值会在函数的调用过程发生改变。而在函数执行结束之后需要还原，因此，在函数的出栈入栈过程中进行保存。\n\n\n**代码：**\n\n~~~c++\n#include<iostream>\nusing namespace std;\n\n/*\n问题1：main函数调用sum，sum执行完后，怎么知道回到哪个函数\n问题2：sum执行完，回到main函数之后怎么知道从哪一行继续执行\n*/\n\nint sum(int a, int b) {\n\tint temp = 0;\n\ttemp = a + b;\n\treturn temp;\n}\n\nint main() {\n\tint a = 10;\n\tint b = 20;\n\n\tint ret = sum(10, 20);\n\tcout << \"ret:\" << ret << endl;\n\t\n\treturn 0;\n}\n~~~\n\n打断点，调试，查看反汇编：\n\n```C++\nint main() {\n// 00007FF637EE23D0  push        rbp  \n// 00007FF637EE23D2  push        rdi  \n// 00007FF637EE23D3  sub         rsp,148h  \n// 00007FF637EE23DA  lea         rbp,[rsp+20h]  \n// 00007FF637EE23DF  lea         rcx,[__0DD03384_02@Assembly@cpp (07FF637EF3068h)]  \n// 00007FF637EE23E6  call        __CheckForDebuggerJustMyCode (07FF637EE13FCh)  \n\tint a = 10;\n// 00007FF637EE23EB  mov         dword ptr [a],0Ah  \n\tint b = 20;\n// 00007FF637EE23F2  mov         dword ptr [b],14h  \n\n\tint ret = sum(10, 20);\n// 00007FF637EE23F9  mov         edx,14h  \n// 00007FF637EE23FE  mov         ecx,0Ah  \n// 00007FF637EE2403  call        sum (07FF637EE11E5h)  \n// 00007FF637EE2408  mov         dword ptr [ret],eax  \n\tcout << \"ret:\" << ret << endl;\n// 00007FF637EE240B  lea         rdx,[string \"ret:\" (07FF637EEAC24h)]  \n// 00007FF637EE2412  mov         rcx,qword ptr [__imp_std::cout (07FF637EF1190h)]  \n// 00007FF637EE2419  call        std::operator<<<std::char_traits<char> > (07FF637EE108Ch)  \n// 00007FF637EE241E  mov         edx,dword ptr [ret]  \n// 00007FF637EE2421  mov         rcx,rax  \n// 00007FF637EE2424  call        qword ptr [__imp_std::basic_ostream<char,std::char_traits<char> >::operator<< (07FF637EF1168h)]  \n// 00007FF637EE242A  lea         rdx,[std::endl<char,std::char_traits<char> > (07FF637EE103Ch)]  \n// 00007FF637EE2431  mov         rcx,rax  \n// 00007FF637EE2434  call        qword ptr [__imp_std::basic_ostream<char,std::char_traits<char> >::operator<< (07FF637EF1170h)]  \n\n\treturn 0;\n// 00007FF637EE243A  xor         eax,eax  \n}\n// 00007FF637EE243C  lea         rsp,[rbp+128h]  \n// 00007FF637EE2443  pop         rdi  \n// 00007FF637EE2444  pop         rbp  \n// 00007FF637EE2445  ret \n```\n\n### 2.2  解析 main 函数\n\n**1. `{` 会进行入栈操作，`}` 进行出栈操作**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031041720.png)\n\n上面两句话的意思是将 ebp 推入栈中，之后让 esp 等于 ebp。\n\n**为什么这么做呢？**\n\n因为 ebp 作为一个用于寻址的固定值是有时间周期的。只有在某个函数执行过程中才是固定的，在函数调用与函数执行完毕后会发生改变。\n\n在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。下一步，必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。\n\n`sub esp, 148h；`减去的值根据程序而定\n\n之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）\n\n之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了\n\n在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031043365.png)\n\n所谓有始有终，这是会还原上面保存的寄存器值，之后还原esp的值（上一个函数调用之前的esp被保存在固定的ebp中）与ebp值。这一过程被称为还原现场之后通过ret返回上一个函数\n\n**2. 函数内部：**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031047611.png)\n\n1. `int a = 10;` 执行一条 mov 指令： \n\t~~~Assembly\n\tmov         dword ptr [a],0Ah\n\t~~~\n\t![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031049332.png)\n\n2.  同理 `int b = 20;` 指令：\n\t~~~Assembly\n\tmov         dword ptr [b],14h\n\t~~~\n\t![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031050787.png)\n\n3. `int ret = sum(a,b);` 指令：\n\t~~~Assmbly\n\t00F81896 8B 45 EC             mov         eax,dword ptr [b] \n\t00F81899 50                   push        eax     #压栈 b的值\n\t00F8189A 8B 4D F8             mov         ecx,dword ptr [a]  \n\t00F8189D 51                   push        ecx     #压栈 a的值\n\t00F8189E E8 E9 F7 FF FF       call        sum (0F8108Ch)   #执行call\n\t00F818A3 83 C4 08             add         esp,8  \n\t00F818A6 89 45 E0             mov         dword ptr [ret],eax \n\t~~~\n\n### 2.3 sum 函数调用后\n\n**函数调用参数的压栈顺序:参数由右向左压入堆栈。**\n\n**因此上面对应的是：**\n\n先将b的值压入堆栈，再将a的值压入堆栈\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031052077.png)\n**执行call        sum (0F8108Ch)：**\n\n**call函数首先会将下一行执行的地址入栈**：假设下一行指令的地址位0x08124458\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031053472.png)\n\n **第二步进入函数调用：sum**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031054082.png)\n\n函数调用第一步： 将调用函数（main）函数的栈底指针ebp压栈\n\n第二步：将新的栈底ebp指向原来的栈顶esp\n\n第三步：将esp指向新的栈顶（开辟了函数的栈帧）：大小：108h\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031055858.png)\n\n接着执行 `int temp = 0;` 指令：\n\n~~~assembly\nmov         dword ptr [temp],0\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031056591.png)\n\ntemp = a + b; 由于a,b的值之前入栈，可以通过 ebp+12 字节找到b的值，ebp+8 字节找到 a 的值，最后将运算结果赋值给 temp\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031057265.png)\n\n接着运行`return temp;`: \n\n~~~assembly\nmov         eax,dword ptr [temp]\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031058576.png)\n\n接着是`函数的右括号“}”`：\n\n（1）mov esp,ebp  回退栈帧 将栈顶指针指向栈底。\n（2）pop ebp 栈顶出栈,并将出栈内容赋值给ebp，也是将main的栈底重新赋值给ebp。\n（3） ret  栈顶出栈，并将出栈的内容赋值给pc寄存器，也就是将之前压榨的call sun的下一条指令赋值到pc寄存器执行。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031059983.png)\n\n### 2.4 返回 main 函数后\n\n接着调用函数完毕，回到主函数：  \n利用了`PC寄存器`，使得程序知道退出sum后运行哪一条指令：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031100556.png)\n\n`add         esp,8` ,将压栈的a b 形参空间回收\n\n`mov         dword ptr [ret],eax` 在sum中，最后将temp赋值到eax寄存器，这里将eax赋值给ret\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031101001.png)\n最后`return 0`，程序结束\n\n### 2.5 栈溢出问题\n\n出现栈内存溢出的常见原因有2个：\n\n1. 函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。\n2. 局部静态变量体积太大。\n\n> 第一种情况不太常见,因为很多情况下我们都用其他方法来代替递归调用,所以只要不出现无限制的调用都应该是没有问题的,起码深度几十层我想是没问题的。\n> 检查是否是此原因的方法为，在引起溢出的那个函数处设一个断点,然后执行程序使其停在断点处, 然后按下快捷键 Alt+7 调出 call stack 窗口,在窗口中可以看到函数调用的层次关系。\n\n>    第二种情况比较常见 在函数里定义了一个局部变量,是一个类对象,该类中有一个大数组\n\n```C++\n    即如果函数这样写：\n    void test_stack_overflow()\n    {\n      char* chdata = new[2*1024*1024];\n      delete []chdata;\n    }\n   是不会出现这个错误的，而这样写则不行：\n    void test_stack_overflow()\n    {\n      char chdata[2*1024*1024];\n    }\n   大多数情况下都会出现内存溢出的错误,\n```\n\n解决办法大致说来也有两种：  \n\n1. 增加栈内存的数目  \n2. 使用堆内存\n\n## 3. 从编译器角度理解 C++ 代码的编译、链接\n\n整个编译过程分为两大步：\n\n1）编译 ：把文本形式的源代码翻译成机器语言，并形成目标文件\n\n2）连接 ：把目标文件 操作系统的启动代码和库文件组织起来形成可执行程序\n\n### 3.1 编译\n\n细分为3个阶段：\n\n**1.1）编译预处理**\n\n预处理又称为预编译，是做些代码文本替换工作。编译器执行预处理指令（以#开头，例如 `#include`），这个过程会得到不包含#指令的 .i 文件。这个过程会拷贝 `#include` 包含的文件代码，进行 `#define` 宏定义的替换 ， 处理条件编译指令 （`#ifndef`、 `#ifdef`、 `#endif`）等。\n\n预编译过程相当于如下命令：\n\n~~~shell\ngcc -E main.c -o main.i\n~~~\n\n主要规则如下：\n\n1. 将所有的 `#define` 删除，并且展开所有的宏定义；\n2. 处理所有条件预编译指令，比如`#if`、`#ifdef`、`#elif`、`#else`、`#endif`;\n4. 处理 `#include` 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件；\n5. 删除所有的注释：`//` 和 `/**/`；\n6. 添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号；\n7. 保留所有的 `#pragma` 编译器指令，因为编译器要使用它们。\n\n> 注：  \n> `#pragma lib`、`pragma link`  \n> 等命令是在链接过程处理的。\n\n预编译后得到的文件为：`.i`文件。\n\n**1.2）编译**\n\n通过预编译输出的.i文件中，只有常量：数字、字符串、变量的定义，以及c语言的关键字：main、if、else、for、while等。这阶段要做的工作主要是，通过语法分析和词法分析，确定所有指令是否符合规则，之后翻译成汇编代码。\n\n编译过程相当于如下命令：\n\n~~~shell\ngcc -S main.i -o main.s\n~~~\n\n编译后得到的文件为：`.s`文件。\n\n**1.3) 汇编**\n\n汇编过程就是把汇编语言翻译成目标机器指令的过程，生成二进制可重定位的目标文件（.obj .o等）。目标文件中存放的也就是与源程序等效的目标的机器语言代码。\n\n目标文件由段组成，通常至少有两个段：\n\n1. .text：包换主要程序的指令。该段是可读和可执行的，一般不可写\n2. .data .rodata：存放程序用到的全局变量或静态数据。可读、可写、可执行。\n\n汇编过程我们可以调用汇编器`as`来完成：\n\n~~~shell\nas main.s -o main.o  \n# 或者：  \ngcc -c main.s -o mian.o\n~~~\n\n这个过程将.s文件转化成.o文件。\n\n### 3.2 链接过程\n\n链接是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可被加载（货被拷贝）到存储器并执行。\n\n**链接的时机**：\n\n- 编译时，也就是在源代码被翻译成机器代码时\n- 加载时，也就是在程序被加载器加载到存储器并执行时\n- 运行时，由应用程序执行\n\n#### 1. 静态链接\n\n**静态链接器**以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。输入的可重定位目标文件由各种不同的代码和数据节(section)组成。指令在一个节中，初始化的全局变量在另一个节中，而未初始化的变量又在另外一个节中。\n\n为了构造可执行文件，**链接器必须完成两个任务：符号解析，重定位**\n\n1. **符号解析：** 目标文件定义和引用符号。符号解析的目的是将每个符号引用刚好和一个符号定义联系起来。\n2. **重定位：** 编译器和汇编器生成从地址0开始的饿代码和数据节。链接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得它们指向这个存储器位置，从而重定位这些节。\n\n链接器的一些基本事实：目标文件纯粹是字节块的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包含指导链接器和加载器的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器和汇编器已经完成了大部分工作。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031125346.png)\n\n目标文件纯粹是字节快的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包括指导链接器和加载器的数据结构。链接器将这些块链接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。\n\n#### 2. 目标文件\n\n**三种形式：**\n\n1. **可重定位目标文件**。包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。\n2. **可执行目标文件**。包含二进制代码和数据，其形式可以被直接拷贝到存储器并执行。\n3. **共享目标文件**。一种特殊类型的可重定位目标文件，可以在加载或者运行地被动态地加载到存储器并链接。\n\n编译器和汇编器生成可重定位目标文件（包括共享目标文件）。链接器生成可执行目标文件。从技术上来说，一个目标模块就是一个字节序列，而一个目标文件就是一个存放在磁盘文件中的目标模块。\n\n#### 3.  可重定位目标文件\n\n一个典型的 ELF 可重定位目标文件的格式。ELF头（ELF header）以一个 16 字节的序列开始，这个序列描述了生成该文件的系统的字的大小和字节顺序。 ELF 头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或是共享的）、机器类型（如IA32）、节头部表的文件偏移，以及节头部表中的条目大小和数量。不同的节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。\n\n![ELF可重定位目标文件](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031131640.png)\n\n夹在 ELF 头和节头部表之间的都是节。一个典型的 ELF 可重定位目标文件包含下面几个节：\n\n- **.text：** 已编译程序的机器代码。\n- **.rodata：** 只读数据，比如 printf 语句中的格式串和开关语句的跳转表。\n- **.data：** 已初始化的全局和静态 C 变量。局部 C 变量在运行时被保存在栈中，既不岀现在 .data 节中，也不岀现在 .bss 节中。\n- **.bss：** 未初始化的全局和静态 C 变量，以及所有被初始化为 0 的全局或静态变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分已初始化和未初始化变量是为了空间效率：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为 0。\n- **.symtab：** 一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过 -g 选项来编译一个程序，才能得到符号表信息。实际上，每个可重定位目标文件在 .symtab 中都有一张符号表（除非程序员特意用 STRIP 命令去掉它）。然而，和编译器中的符号表不同，.symtab 符号表不包含局部变量的条目。\n- **.rel.text：** 一个 .text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面，调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非用户显式地指示链接器包含这些信息。\n- **.rel.data：** 被模块引用或定义的所有全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。\n- **.debug：** 一个调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的 C 源文件。只有以 - g 选项调用编译器驱动程序时，才 会得到这张表。\n- **.line：** 原始 C 源程序中的行号和 .text 节中机器指令之间的映射。只有以 -g 选项调用编译器驱动程序时，才会得到这张表。\n- **.strtab：** 一个字符串表，其内容包括 .symtab 和 .debug 节中的符号表，以及节头部中的节名字。字符串表就是以 null 结尾的字符串的序列。\n\n#### 4. 符号和符号表\n\n每个可重定位目标模块m都有一个符号表，包含m所定义和引用的符号的信息。符号表产生在汇编阶段，符号表生成虚拟地址在链接阶段\n\n在链接器的上下文中，有三种不同的符号：\n\n由m定义并能被其他模块引用的全局符号\n由其他模块定义并被模块m引用的全局符号\n只被模块m引用的本地符号\n\n例如：\n\n`main.cpp` 内容 和 `sum.cpp` 内容如下：\n\n~~~c++\n// main.cpp\n#include <iostream>\nusing namespace std;\n\nextern int gdata;\nint sum(int, int);\n\nint data = 20;\n\nint main()\n{\n\tint a = gdata;\n\tint b = data;\n\n\tint ret = sum(a, b);\n\n\treturn 0;\n}\n~~~\n\n~~~c++\n// sum.cpp\n#include <iostream>\nusing namespace std;\n\nint gdata = 10;\nint sum(int a, int b)\n{\n\treturn a + b;\n}\n~~~\n\n**g++ -c** 只编译不链接，只生成目标文件\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031135734.png)\n\n **objdump -t main.o // 输出目标文件的符号表：**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031136378.png)\n\n第一列：段内偏移；\n第二列：符号作用域  : local /global；\n第三列：符号类型；\n第四列：符号所在段（*UND*外部链接符号，未在本目标文件定义）；\n第五列：符号对应的对象占据的内存空间大小，没有实体对象大小为0，未定义的为0；\n第六列：符号名；\n\n其中main 定义在.text\n\ndata 是全局变量，且初始化定义在.data ,也就是m定义并能被其他模块引用的全局符号。\ngdata 和 sum 函数是声明，因此是*UNG*，也就是由其他模块定义并被模块 m 引用的全局符号。\n\n第一列都是 0x0 没有为符号分配虚拟地址，在链接阶段分配\n\n在sum.o中：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031138696.png)\n\ngdata 是出刷的全局变量 在 .data中；sum 函数在.text中\n\nreadelf -h 查看elf文件的头文件信息\n可见目标文件的elf文件，其类型为REL(可重定位文件)。 \n\nobjdump -s 显示全部Header信息，还显示他们对应的十六进制文件代码：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139885.png)\n\n有调试信息的：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139339.png)\n\n可以看到符号地址未分配，用0填充；这也是obj文件无法运行的原因之一。\n#### 5. 符号解析\n\n链接的步骤一：所有.o文件段的合并（.text  .data .bss合并），符号表合并后，进行符号解析，所有对符号的引用（*UNG*）都要找到该符号定义的地方。经常见的报错：符号重定义（存在多个相同的）、符号未定义（找不到）\n\n **链接器如何解析多重定义的全局符号：**\n\n在编译是，编译器向汇编器输出每个全局符号，或者是强或者是弱，而汇编器把这个信息隐含地编码在可重定位目标文件的符号表里。函数和已初始化的全局变量时强符号，未初始化的全局变量是弱符号。\n       根据强弱符号的定义，Unix链接器使用下面的规则来处理多重定义的符号：\n\n规则1：不允许有多个强符号。\n规则2：如果有一个强符号和多个弱符号，那么选择强符号。\n规则3：如果有多个弱符号，那么从这些弱符号中任意选择一个。\n\n**链接器如何使用静态库来解析引用：**\n\n在符号解析的阶段，链接器从左到右按照它们在编译器驱动程序命令行上出现的相同顺序来扫描可重定位目标文件和存档文件。在这次扫描中，链接器维持一个可重定位目标文件的集合E（这个集合中的文件会被合并起来形成可执行文件），一个未解析的符号（即引用了但是尚未定义的符号）集合U，以及一个在前面输入文件中已定义的符号集合D。初始时，E、U和D都是空的。\n\n> 1. 对于命令行上的每个输入文件f，链接器会判断f是一个目标文件还是一个存档文件。如果f是一个目标文件，那么链接器吧f添加到E， 修改U和D来反映f中的符号定义和引用，并继续下一个输入文件。\n> 2. 如果f是一个存档文件，那么链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m，定义了一个符号来解析U中的一个引用，那么就将m加到E中，并且链接器修改U和D来反映m中的符号定义和引用。对存档文件中所有的成员目标文件都反复进行这个过程，直到U和D都不再发生变化。在此时，任何不包含在E中的目标文件都简单地被丢弃，而链接器将继续处理下一个输入文件。\n> 3. 如果当链接器完成对命令行上输入文件的扫描后，U是非空的，那么链接器就好输出一个错误并终止。否则，它会合并和重定位E中的目标文件，从而构建输出的可执行文件。\n\n这种算法会导致一些令人困扰的链接时错误，因为命令行上的库和目标文件的顺序非常重要。在命令行中，如果定义一个符号的库出现在引用这个符号的目标文件之前，那么引用就不能被解析，链接会失败。关于库的一般准则是将它们放在命令行的 结尾。\n\n另一方面，如果库不是相互独立的，那么它们必须排序，使得对于每个被存档文件的成员外部引用的符号s，在命令行中至少有一个s的定义实在对s的引用之后的。\n\n如果需要满足依赖需求，可以在命令行上重复库。\n\n#### 6. 重定向\n一旦链接器完成了符号解析这一步，它就是把代码中的每个符号引用和确定的一个符号定义（即它的一个输入目标模块中的一个符号表条目）联系起来。在此时，链接器就知道它的输入目标模块中的代码节和数据节的确切大小。现在就可以开始重定位了，在这个步骤中，将合并输入模块，并为每个符号分配运行时地址。\n\n重定位有两步组成：\n\n1. **重定位节和符号定义**。在这一步中，链接器将所有相同类型的节合并为同一类型的新的聚合节。然后，链接器将运行时存储器地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。当这一步完成时，程序中的每个指令和全局变量都有唯一的运行时存储器地址了。\n2. **重定位节中的符号引用**。在这一步中，链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。为了执行这一步，链接器依赖于称为`重定位条目`的可重定位目标模块中的数据结构。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031143865.png)\n\n链接后：所有的符号都有虚拟地址\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031144871.png)\n\n汇编中，全局变量和函数都有了地址。\n\n#### 7. 可执行目标文件\n\n可执行目标文件的格式类似于可重定位目标文件的格式。ELF头部描述文件的总体格式。它还包括程序的入口点，也就是当程序运行时要执行的第一条指令的地址。`.text` 、`.rodata` 和 `.data` 节和可重定位目标文件中的节是相似的，除了这些节已经被重定位到它们最终的运行时存储器地址以外。.init节定义了一个小函数，叫做_init，程序的初始化代码会调用它。因为可执行文件是完全链接的（已被重定位了），所以它不再需要.rel节。\n\nELF可执行文件被设计得很容易加载到存储器，可执行文件的连续的片被映射到连续的存储器段。段头部表描述了这种映射关系。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031146917.png)\n\n","slug":"02.C++ 基础部分/01.理解 C++ 内核","published":1,"date":"2023-08-03T00:31:11.401Z","updated":"2023-08-03T03:46:18.022Z","_id":"clkufs4140000b0pkgkc45jvo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本节内容分为三部分：</p>\n<ol>\n<li>掌握进程虚拟地址空间区域划分</li>\n<li>从指令角度掌握函数调用堆栈详细过程</li>\n<li>从编译器角度理解C++代码的编译、链接</li>\n</ol>\n<p>通过了解底层基础，了解 C++ 的如何运行。</p>\n<h2 id=\"1-掌握进程虚拟地址空间区域划分\"><a href=\"#1-掌握进程虚拟地址空间区域划分\" class=\"headerlink\" title=\"1. 掌握进程虚拟地址空间区域划分\"></a>1. 掌握进程虚拟地址空间区域划分</h2><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> gdata1 = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> gdata2 = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-type\">int</span> gdata3;<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata4 = <span class=\"hljs-number\">11</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata5 = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata6;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">12</span>;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-type\">int</span> c;<br><br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> d = <span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> e = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> f;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>根据上述代码，如何得知各个变量存储的位置？</p>\n<h3 id=\"1-1-虚拟进程视图\"><a href=\"#1-1-虚拟进程视图\" class=\"headerlink\" title=\"1.1 虚拟进程视图\"></a>1.1 虚拟进程视图</h3><p>首先要知道一点，程序由磁盘加载到内存时是不可能直接加载到物理内存当中的，这里的原因以及物理内存和虚拟内存的区别与联系在本篇先不做讨论 本篇接下来所讨论的范围在 x86 体系 32 位 Linux 环境下 Linux 系统会给当前每一个进程分配一个 2^32 位大小(4G)的一块空间，这块空间就叫做进程的虚拟地址空间。</p>\n<p>这里附上IBM公司关于<strong>虚拟</strong>的解释:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">它存在，你看得见，它是物理的<br>它存在，你看不见，它是透明的<br>它不存在，你看得见，它是虚拟的<br>它不存在，你看不见，它被删除<br></code></pre></td></tr></table></figure>\n\n<p>这块空间的内容如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030903283.png\" alt=\"虚拟进程空间示例图 CN\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030914652.png\" alt=\"虚拟进程空间示例图 EN\"></p>\n<blockquote>\n<p>补充：<br>x86 32位体系下的4G虚拟地址空间：<br><strong>Linux默认3:1</strong>来分配 user space : kernal space；<br><strong>Windows默认2:2</strong>来分配 user space : kernal space。</p>\n</blockquote>\n<p>Linux 中每一个运行的程序（进程），32 位操作系统都会为其分配一个 0 ～ 4GB 的进程虚拟地址空间，64 位操作系统会为其分配一个 0 ～ 16GB 的进程虚拟地址空间。</p>\n<p>解释：<br>32 位操作系统下，一个指针的大小为 32 位即 4 个字节，它所能保存的地址范围为 <code>[0, 2^32]</code> ，所以它的寻址范围为 4GB 大小，所以 32 位操作系统下系统给进程分配的虚拟地址空间大小为 4 GB 。<br>64 位操作系统下，一个指针的大小为 64 位即 8 个字节，它所能保存的地址范围为 <code>[0, 2^64]</code> ，即 4GB * 4GB &#x3D; 16TB，所以它的寻址范围为 16TB 大小，所以 64 位操作系统下系统给进程分配的虚拟地址空间大小为 16TB 。</p>\n<p><strong>为什么是 4G 内存：</strong></p>\n<p>首先我们研究的体系是：<code>x86 32位Linux环境</code>：<br>Linux操作系统会给当前进程分配一个 <code>2^32</code> 大小的空间，那么，<code>2^32</code> 换算过来就是 4G 了。</p>\n<h3 id=\"1-2-用户空间（User-Space）\"><a href=\"#1-2-用户空间（User-Space）\" class=\"headerlink\" title=\"1.2 用户空间（User Space）\"></a>1.2 用户空间（User Space）</h3><ol>\n<li><p>保留区：<br> 128M 大小，不可访问，不允许读写。任何普通程序对它的引用都是非法的，一般用来捕捉空指针和小整型值指针引用内存的异常情况。在定义指针时将其初始化为 “NULL”，它便不会被引用了，从而避免了野指针。</p>\n</li>\n<li><p>指令段【.text】、只读数据段【.rodata】：<br> 指令段存放指令，只能读，不能写；只读数据段中存放只读数据，比如字符串常量等，只能读，不能写。</p>\n<blockquote>\n<p>在C++中，不允许普通指针指向常量字符串，需要使用<code>const</code>：<br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030909413.png\" alt=\"示例\"></p>\n</blockquote>\n</li>\n<li><p>数据段【.data】：<br> 存放程序中<strong>已初始化且不为0的全局变量或静态变量</strong>。</p>\n</li>\n<li><p>数据段【.bss】：<br> 存放程序中未初始化或者初始化为0的全局变量或静态变量。</p>\n</li>\n<li><p>堆【.heap】：<br> 存放动态数据，需要程序员手动开辟、释放空间，在程序刚开始运行时，此区域为空，等到程序运行到手动开辟空间的指令时，此区域动态扩张。自下向上增长。</p>\n<ul>\n<li>堆用于存放进程<code>运行时动态分配</code>的内存段，可动态扩张或缩减。</li>\n<li>堆中内容是<code>匿名</code>的，无法通过名字进行访问，只能通过<code>指针</code>进行间接访问。</li>\n<li>当进程调用<code>malloc(C)/new(C++)</code>等函数分配内存时，新分配的在堆上<code>动态扩张</code>；当调用<code>free(C)/delete(C++)</code>等函数释放内存时，被释放的内存从堆上<code>动态缩减</code></li>\n<li>分配的堆内存时经过<code>字节对齐</code>的空间，以适合<code>原子操作</code>。</li>\n<li><code>堆管理器</code>通过<code>链表</code>管理每个申请的内存块</li>\n<li>由于堆内存块的申请与释放都是<code>无序</code>的，最终会产生许许多多<code>内存碎片</code>。</li>\n<li>堆的末端由<code>break指针</code>标识，当堆管理器需要更多内存时，可通过<code>系统调用brk和sbrk</code>来<code>移动break指针</code>以扩张堆，一般情况下由系统自动调用。</li>\n</ul>\n</li>\n<li><p>共享库【.dll、.so】：<br> 动态链接库，程序在运行的过程中，将一些标准库函数映射到这里，比如C标准库函数（fread、fwrite、fopen等）。</p>\n</li>\n<li><p>栈【.stack】：<br> 存放所有函数的活动空间，局部变量；根据程序的运行，调用函数，此区域动态地扩张和收缩。</p>\n<ul>\n<li><p>栈中存放<code>非静态局部变量</code> <code>函数形参</code> <code>函数返回地址</code>等。</p>\n</li>\n<li><p>栈中内存空间由<code>编译器</code>（静态的）自动分配和释放，行为类似数据结构中的栈结构。</p>\n<blockquote>\n<p>主要用途：</p>\n<ol>\n<li>为函数内部声明的<strong>非静态局部变量</strong>提供存储空间</li>\n<li>记录函数调用过程相关的维护性信息，称为栈帧（stack frame）</li>\n<li>作为<code>临时存储区</code>，用于暂时存放<code>较长的算术表达式部分计算结果</code>，或者运行时调用alloca函数<code>动态分配</code>栈内内存</li>\n</ol>\n</blockquote>\n</li>\n<li><p>栈内存增长：栈能够增长到的最大内存容量为RLIMIT_STACK（通常是8M），如果此时栈的大小未达到RLIMIT_STACK，则栈会自动增长至程序运行所需的大小，如果此时栈的大小已经达到RLIMIT_STACK，若再向栈中不断压入数据，会触发页错误。栈的实时大小会在运行时由内核动态调整。</p>\n</li>\n<li><p>查看栈大小：<code>ulimit -s</code>可查看和设置<code>栈的最大值</code>，当程序使用的栈大小超过该值，会发生<code>segmentation fault</code>。</p>\n</li>\n<li><ul>\n<li>栈的增长方向：既可以向高地址增长，也可以向低地址增长，这取决于具体实现，自上而下增长。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>命令行参数：<br> 保存传递给 main 函数的参数，比如 argc 和 argv。</p>\n</li>\n<li><p>环境变量：<br> 用于存放当前的环境变量，在 Linux 下可以用 env 命令查看。</p>\n</li>\n</ol>\n<h3 id=\"1-3-进程空间（Kernal-Space）\"><a href=\"#1-3-进程空间（Kernal-Space）\" class=\"headerlink\" title=\"1.3 进程空间（Kernal Space）\"></a>1.3 进程空间（Kernal Space）</h3><ol>\n<li><p>内存直接访问区【ZONE_DMA】：<br> 16M 大小，不需要经过 CPU 的寄存器，加快了磁盘和内存之间的数据交换。</p>\n</li>\n<li><p>常用区【ZONE_NORMAL】：<br> 892M 大小，内核中最重要的部分，存放页表、页面的映射、PCB。</p>\n</li>\n<li><p>高端内存区【ZONE_HIGHMEM】：<br> 128M 大小，存放大文件的映射，即内存中映射高于 1GB 的物理内存。64 位操作系统没有该段。</p>\n</li>\n</ol>\n<h3 id=\"1-4-最终解释\"><a href=\"#1-4-最终解释\" class=\"headerlink\" title=\"1.4 最终解释\"></a>1.4 最终解释</h3><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030917571.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>注意：<br>对于<code>a、b、c以及&#39;&#123;&#39;、&#39;&#125;&#39;</code>来说，是存储在<code>.text</code>指令段的，因为他们生成的都是&#x3D;&#x3D;指令&#x3D;&#x3D;。<br>例如：<br><code>int a = 12</code>：生成汇编指令如下：<code>mov dword ptr[a], 0Ch</code></p>\n</blockquote>\n<h3 id=\"1-5-好处\"><a href=\"#1-5-好处\" class=\"headerlink\" title=\"1.5 好处\"></a>1.5 好处</h3><p><code>数据</code>与<code>代码指令</code>分别开辟空间有以下好处：</p>\n<ol>\n<li>当程序被装载后，数据和代码指令分别映射到两个虚拟内存区域。<code>数据区</code>对于进程而言<code>可读可写</code>，<code>代码指令区</code>对于进程而言<code>只读</code>，</li>\n<li>现代CPU一般<code>数据缓存</code>和<code>指令缓存</code>分离，故进程虚拟地址空间中数据与代码指令分离有助于提高<code>CPU缓存命中率</code>。</li>\n<li>若系统中运行多个该程序的副本时，其代码指令相同，故内存中只需要保存一份该程序的代码指令，大大减少了内存的开销，相同的程序的代码指令可以被多个副本进程所共享，但是数据是每个副本进程所独有的。</li>\n</ol>\n<p><strong>参考文章：</strong></p>\n<blockquote>\n<p>【1】Randal E. Bryant. 《深入理解计算机系统》.北京. 机械工业出版社，2016：1<br>【2】寻痴. 虚拟地址空间图解. CSDN. 2021-03-23<br>【3】聪聪菜的睡不着. 【C++】一、虚拟内存布局、编译链接原理等基础概念. CSDN. 2020-07-09<br>【4】<a href=\"https://blog.csdn.net/m0_46308273/article/details/115818195\">https://blog.csdn.net/m0_46308273/article/details/115818195</a><br>【5】<a href=\"https://blog.csdn.net/weixin_45437022/article/details/115409679\">https://blog.csdn.net/weixin_45437022/article/details/115409679</a></p>\n</blockquote>\n<h2 id=\"2-从指令角度掌握函数调用堆栈详细过程\"><a href=\"#2-从指令角度掌握函数调用堆栈详细过程\" class=\"headerlink\" title=\"2. 从指令角度掌握函数调用堆栈详细过程\"></a>2. 从指令角度掌握函数调用堆栈详细过程</h2><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031030058.png\" alt=\"image.png\"><br>栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。</p>\n<p>堆栈是一种具有一定规则的数据结构，我们可以按照一定的规则进行添加和删除数据。它使用的是后进先出的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：</p>\n<ul>\n<li>PUSH：将目标内存推入栈顶。</li>\n<li>POP：从栈顶中移除目标。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031033393.png\" alt=\"image.png\"></p>\n<p>当执行一个函数的时候，相关的参数以及局部变量等等都会被记录在ESP、EBP中间的区域。一旦函数执行完毕，相关的 <strong>栈帧</strong> 就会从堆栈中弹出，然后从预先保存好的上下文中进行恢复，以便保持堆栈平衡。CPU必须要知道函数调用完了之后要去哪里执行（pc寄存器指向）</p>\n<h3 id=\"2-1-ESP-和-EBP\"><a href=\"#2-1-ESP-和-EBP\" class=\"headerlink\" title=\"2.1 ESP 和 EBP\"></a>2.1 ESP 和 EBP</h3><p>（1）ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<br>（2）EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</p>\n<p>根据上述的定义,在通常情况下ESP是可变的,随着栈的生产而逐渐变小（因为栈向低地址扩充，栈顶寄存器数值不断变小）,而EBP寄存器是固定的,只有当函数的调用后,发生入栈操作而改变。</p>\n<p>在上述的定义中使用ESP来标记栈的底部，他随着栈的变化而变化：</p>\n<ul>\n<li>pop ebp;出栈 栈扩大4byte 因为ebp为32位</li>\n<li>push ebp;入栈，栈减少4byte        </li>\n<li>add esp, 0Ch；表示栈减小12byte</li>\n<li>sub esp, 0Ch；表示栈扩大12byte</li>\n</ul>\n<p>ebp 寄存器的出现则是为了另一个目标，通过固定的地址与偏移量来寻找在栈参数与变量。而这个固定值者存放在 ebp 寄存器中，。但是这个值会在函数的调用过程发生改变。而在函数执行结束之后需要还原，因此，在函数的出栈入栈过程中进行保存。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">问题1：main函数调用sum，sum执行完后，怎么知道回到哪个函数</span><br><span class=\"hljs-comment\">问题2：sum执行完，回到main函数之后怎么知道从哪一行继续执行</span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>&#123;<br>\t<span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>\ttemp = a + b;<br>\t<span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);<br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>打断点，调试，查看反汇编：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><span class=\"hljs-comment\">// 00007FF637EE23D0  push        rbp  </span><br><span class=\"hljs-comment\">// 00007FF637EE23D2  push        rdi  </span><br><span class=\"hljs-comment\">// 00007FF637EE23D3  sub         rsp,148h  </span><br><span class=\"hljs-comment\">// 00007FF637EE23DA  lea         rbp,[rsp+20h]  </span><br><span class=\"hljs-comment\">// 00007FF637EE23DF  lea         rcx,[__0DD03384_02@Assembly@cpp (07FF637EF3068h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE23E6  call        __CheckForDebuggerJustMyCode (07FF637EE13FCh)  </span><br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-comment\">// 00007FF637EE23EB  mov         dword ptr [a],0Ah  </span><br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-comment\">// 00007FF637EE23F2  mov         dword ptr [b],14h  </span><br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);<br><span class=\"hljs-comment\">// 00007FF637EE23F9  mov         edx,14h  </span><br><span class=\"hljs-comment\">// 00007FF637EE23FE  mov         ecx,0Ah  </span><br><span class=\"hljs-comment\">// 00007FF637EE2403  call        sum (07FF637EE11E5h)  </span><br><span class=\"hljs-comment\">// 00007FF637EE2408  mov         dword ptr [ret],eax  </span><br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;<br><span class=\"hljs-comment\">// 00007FF637EE240B  lea         rdx,[string &quot;ret:&quot; (07FF637EEAC24h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2412  mov         rcx,qword ptr [__imp_std::cout (07FF637EF1190h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2419  call        std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt; &gt; (07FF637EE108Ch)  </span><br><span class=\"hljs-comment\">// 00007FF637EE241E  mov         edx,dword ptr [ret]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2421  mov         rcx,rax  </span><br><span class=\"hljs-comment\">// 00007FF637EE2424  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF637EF1168h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE242A  lea         rdx,[std::endl&lt;char,std::char_traits&lt;char&gt; &gt; (07FF637EE103Ch)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2431  mov         rcx,rax  </span><br><span class=\"hljs-comment\">// 00007FF637EE2434  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF637EF1170h)]  </span><br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 00007FF637EE243A  xor         eax,eax  </span><br>&#125;<br><span class=\"hljs-comment\">// 00007FF637EE243C  lea         rsp,[rbp+128h]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2443  pop         rdi  </span><br><span class=\"hljs-comment\">// 00007FF637EE2444  pop         rbp  </span><br><span class=\"hljs-comment\">// 00007FF637EE2445  ret </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-解析-main-函数\"><a href=\"#2-2-解析-main-函数\" class=\"headerlink\" title=\"2.2  解析 main 函数\"></a>2.2  解析 main 函数</h3><p><strong>1. <code>&#123;</code> 会进行入栈操作，<code>&#125;</code> 进行出栈操作</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031041720.png\" alt=\"image.png\"></p>\n<p>上面两句话的意思是将 ebp 推入栈中，之后让 esp 等于 ebp。</p>\n<p><strong>为什么这么做呢？</strong></p>\n<p>因为 ebp 作为一个用于寻址的固定值是有时间周期的。只有在某个函数执行过程中才是固定的，在函数调用与函数执行完毕后会发生改变。</p>\n<p>在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。下一步，必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。</p>\n<p><code>sub esp, 148h；</code>减去的值根据程序而定</p>\n<p>之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</p>\n<p>之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</p>\n<p>在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031043365.png\" alt=\"image.png\"></p>\n<p>所谓有始有终，这是会还原上面保存的寄存器值，之后还原esp的值（上一个函数调用之前的esp被保存在固定的ebp中）与ebp值。这一过程被称为还原现场之后通过ret返回上一个函数</p>\n<p><strong>2. 函数内部：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031047611.png\" alt=\"image.png\"></p>\n<ol>\n<li><p><code>int a = 10;</code> 执行一条 mov 指令： </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assembly\">mov         dword ptr [a],0Ah<br></code></pre></td></tr></table></figure>\n<p> <img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031049332.png\" alt=\"image.png\"></p>\n</li>\n<li><p> 同理 <code>int b = 20;</code> 指令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assembly\">mov         dword ptr [b],14h<br></code></pre></td></tr></table></figure>\n<p> <img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031050787.png\" alt=\"image.png\"></p>\n</li>\n<li><p><code>int ret = sum(a,b);</code> 指令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assmbly\">00F81896 8B 45 EC             mov         eax,dword ptr [b] <br>00F81899 50                   push        eax     #压栈 b的值<br>00F8189A 8B 4D F8             mov         ecx,dword ptr [a]  <br>00F8189D 51                   push        ecx     #压栈 a的值<br>00F8189E E8 E9 F7 FF FF       call        sum (0F8108Ch)   #执行call<br>00F818A3 83 C4 08             add         esp,8  <br>00F818A6 89 45 E0             mov         dword ptr [ret],eax <br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-3-sum-函数调用后\"><a href=\"#2-3-sum-函数调用后\" class=\"headerlink\" title=\"2.3 sum 函数调用后\"></a>2.3 sum 函数调用后</h3><p><strong>函数调用参数的压栈顺序:参数由右向左压入堆栈。</strong></p>\n<p><strong>因此上面对应的是：</strong></p>\n<p>先将b的值压入堆栈，再将a的值压入堆栈</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031052077.png\" alt=\"image.png\"><br><strong>执行call        sum (0F8108Ch)：</strong></p>\n<p><strong>call函数首先会将下一行执行的地址入栈</strong>：假设下一行指令的地址位0x08124458</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031053472.png\" alt=\"image.png\"></p>\n<p> <strong>第二步进入函数调用：sum</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031054082.png\" alt=\"image.png\"></p>\n<p>函数调用第一步： 将调用函数（main）函数的栈底指针ebp压栈</p>\n<p>第二步：将新的栈底ebp指向原来的栈顶esp</p>\n<p>第三步：将esp指向新的栈顶（开辟了函数的栈帧）：大小：108h</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031055858.png\" alt=\"image.png\"></p>\n<p>接着执行 <code>int temp = 0;</code> 指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov         dword ptr [temp],0<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031056591.png\" alt=\"image.png\"></p>\n<p>temp &#x3D; a + b; 由于a,b的值之前入栈，可以通过 ebp+12 字节找到b的值，ebp+8 字节找到 a 的值，最后将运算结果赋值给 temp</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031057265.png\" alt=\"image.png\"></p>\n<p>接着运行<code>return temp;</code>: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov         eax,dword ptr [temp]<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031058576.png\" alt=\"image.png\"></p>\n<p>接着是<code>函数的右括号“&#125;”</code>：</p>\n<p>（1）mov esp,ebp  回退栈帧 将栈顶指针指向栈底。<br>（2）pop ebp 栈顶出栈,并将出栈内容赋值给ebp，也是将main的栈底重新赋值给ebp。<br>（3） ret  栈顶出栈，并将出栈的内容赋值给pc寄存器，也就是将之前压榨的call sun的下一条指令赋值到pc寄存器执行。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031059983.png\" alt=\"image.png\"></p>\n<h3 id=\"2-4-返回-main-函数后\"><a href=\"#2-4-返回-main-函数后\" class=\"headerlink\" title=\"2.4 返回 main 函数后\"></a>2.4 返回 main 函数后</h3><p>接着调用函数完毕，回到主函数：<br>利用了<code>PC寄存器</code>，使得程序知道退出sum后运行哪一条指令：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031100556.png\" alt=\"image.png\"></p>\n<p><code>add         esp,8</code> ,将压栈的a b 形参空间回收</p>\n<p><code>mov         dword ptr [ret],eax</code> 在sum中，最后将temp赋值到eax寄存器，这里将eax赋值给ret</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031101001.png\" alt=\"image.png\"><br>最后<code>return 0</code>，程序结束</p>\n<h3 id=\"2-5-栈溢出问题\"><a href=\"#2-5-栈溢出问题\" class=\"headerlink\" title=\"2.5 栈溢出问题\"></a>2.5 栈溢出问题</h3><p>出现栈内存溢出的常见原因有2个：</p>\n<ol>\n<li>函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。</li>\n<li>局部静态变量体积太大。</li>\n</ol>\n<blockquote>\n<p>第一种情况不太常见,因为很多情况下我们都用其他方法来代替递归调用,所以只要不出现无限制的调用都应该是没有问题的,起码深度几十层我想是没问题的。<br>检查是否是此原因的方法为，在引起溢出的那个函数处设一个断点,然后执行程序使其停在断点处, 然后按下快捷键 Alt+7 调出 call stack 窗口,在窗口中可以看到函数调用的层次关系。</p>\n</blockquote>\n<blockquote>\n<p>   第二种情况比较常见 在函数里定义了一个局部变量,是一个类对象,该类中有一个大数组</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"> 即如果函数这样写：<br> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_stack_overflow</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"> </span>&#123;<br>   <span class=\"hljs-type\">char</span>* chdata = <span class=\"hljs-keyword\">new</span>[<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br>   <span class=\"hljs-keyword\">delete</span> []chdata;<br> &#125;<br>是不会出现这个错误的，而这样写则不行：<br> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_stack_overflow</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"> </span>&#123;<br>   <span class=\"hljs-type\">char</span> chdata[<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br> &#125;<br>大多数情况下都会出现内存溢出的错误,<br></code></pre></td></tr></table></figure>\n\n<p>解决办法大致说来也有两种：  </p>\n<ol>\n<li>增加栈内存的数目  </li>\n<li>使用堆内存</li>\n</ol>\n<h2 id=\"3-从编译器角度理解-C-代码的编译、链接\"><a href=\"#3-从编译器角度理解-C-代码的编译、链接\" class=\"headerlink\" title=\"3. 从编译器角度理解 C++ 代码的编译、链接\"></a>3. 从编译器角度理解 C++ 代码的编译、链接</h2><p>整个编译过程分为两大步：</p>\n<p>1）编译 ：把文本形式的源代码翻译成机器语言，并形成目标文件</p>\n<p>2）连接 ：把目标文件 操作系统的启动代码和库文件组织起来形成可执行程序</p>\n<h3 id=\"3-1-编译\"><a href=\"#3-1-编译\" class=\"headerlink\" title=\"3.1 编译\"></a>3.1 编译</h3><p>细分为3个阶段：</p>\n<p><strong>1.1）编译预处理</strong></p>\n<p>预处理又称为预编译，是做些代码文本替换工作。编译器执行预处理指令（以#开头，例如 <code>#include</code>），这个过程会得到不包含#指令的 .i 文件。这个过程会拷贝 <code>#include</code> 包含的文件代码，进行 <code>#define</code> 宏定义的替换 ， 处理条件编译指令 （<code>#ifndef</code>、 <code>#ifdef</code>、 <code>#endif</code>）等。</p>\n<p>预编译过程相当于如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -E main.c -o main.i<br></code></pre></td></tr></table></figure>\n\n<p>主要规则如下：</p>\n<ol>\n<li>将所有的 <code>#define</code> 删除，并且展开所有的宏定义；</li>\n<li>处理所有条件预编译指令，比如<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code>;</li>\n<li>处理 <code>#include</code> 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件；</li>\n<li>删除所有的注释：<code>//</code> 和 <code>/**/</code>；</li>\n<li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号；</li>\n<li>保留所有的 <code>#pragma</code> 编译器指令，因为编译器要使用它们。</li>\n</ol>\n<blockquote>\n<p>注：<br><code>#pragma lib</code>、<code>pragma link</code><br>等命令是在链接过程处理的。</p>\n</blockquote>\n<p>预编译后得到的文件为：<code>.i</code>文件。</p>\n<p><strong>1.2）编译</strong></p>\n<p>通过预编译输出的.i文件中，只有常量：数字、字符串、变量的定义，以及c语言的关键字：main、if、else、for、while等。这阶段要做的工作主要是，通过语法分析和词法分析，确定所有指令是否符合规则，之后翻译成汇编代码。</p>\n<p>编译过程相当于如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -S main.i -o main.s<br></code></pre></td></tr></table></figure>\n\n<p>编译后得到的文件为：<code>.s</code>文件。</p>\n<p><strong>1.3) 汇编</strong></p>\n<p>汇编过程就是把汇编语言翻译成目标机器指令的过程，生成二进制可重定位的目标文件（.obj .o等）。目标文件中存放的也就是与源程序等效的目标的机器语言代码。</p>\n<p>目标文件由段组成，通常至少有两个段：</p>\n<ol>\n<li>.text：包换主要程序的指令。该段是可读和可执行的，一般不可写</li>\n<li>.data .rodata：存放程序用到的全局变量或静态数据。可读、可写、可执行。</li>\n</ol>\n<p>汇编过程我们可以调用汇编器<code>as</code>来完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">as main.s -o main.o  <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者：</span>  <br>gcc -c main.s -o mian.o<br></code></pre></td></tr></table></figure>\n\n<p>这个过程将.s文件转化成.o文件。</p>\n<h3 id=\"3-2-链接过程\"><a href=\"#3-2-链接过程\" class=\"headerlink\" title=\"3.2 链接过程\"></a>3.2 链接过程</h3><p>链接是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可被加载（货被拷贝）到存储器并执行。</p>\n<p><strong>链接的时机</strong>：</p>\n<ul>\n<li>编译时，也就是在源代码被翻译成机器代码时</li>\n<li>加载时，也就是在程序被加载器加载到存储器并执行时</li>\n<li>运行时，由应用程序执行</li>\n</ul>\n<h4 id=\"1-静态链接\"><a href=\"#1-静态链接\" class=\"headerlink\" title=\"1. 静态链接\"></a>1. 静态链接</h4><p><strong>静态链接器</strong>以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。输入的可重定位目标文件由各种不同的代码和数据节(section)组成。指令在一个节中，初始化的全局变量在另一个节中，而未初始化的变量又在另外一个节中。</p>\n<p>为了构造可执行文件，<strong>链接器必须完成两个任务：符号解析，重定位</strong></p>\n<ol>\n<li><strong>符号解析：</strong> 目标文件定义和引用符号。符号解析的目的是将每个符号引用刚好和一个符号定义联系起来。</li>\n<li><strong>重定位：</strong> 编译器和汇编器生成从地址0开始的饿代码和数据节。链接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得它们指向这个存储器位置，从而重定位这些节。</li>\n</ol>\n<p>链接器的一些基本事实：目标文件纯粹是字节块的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包含指导链接器和加载器的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器和汇编器已经完成了大部分工作。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031125346.png\" alt=\"image.png\"></p>\n<p>目标文件纯粹是字节快的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包括指导链接器和加载器的数据结构。链接器将这些块链接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。</p>\n<h4 id=\"2-目标文件\"><a href=\"#2-目标文件\" class=\"headerlink\" title=\"2. 目标文件\"></a>2. 目标文件</h4><p><strong>三种形式：</strong></p>\n<ol>\n<li><strong>可重定位目标文件</strong>。包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。</li>\n<li><strong>可执行目标文件</strong>。包含二进制代码和数据，其形式可以被直接拷贝到存储器并执行。</li>\n<li><strong>共享目标文件</strong>。一种特殊类型的可重定位目标文件，可以在加载或者运行地被动态地加载到存储器并链接。</li>\n</ol>\n<p>编译器和汇编器生成可重定位目标文件（包括共享目标文件）。链接器生成可执行目标文件。从技术上来说，一个目标模块就是一个字节序列，而一个目标文件就是一个存放在磁盘文件中的目标模块。</p>\n<h4 id=\"3-可重定位目标文件\"><a href=\"#3-可重定位目标文件\" class=\"headerlink\" title=\"3.  可重定位目标文件\"></a>3.  可重定位目标文件</h4><p>一个典型的 ELF 可重定位目标文件的格式。ELF头（ELF header）以一个 16 字节的序列开始，这个序列描述了生成该文件的系统的字的大小和字节顺序。 ELF 头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或是共享的）、机器类型（如IA32）、节头部表的文件偏移，以及节头部表中的条目大小和数量。不同的节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031131640.png\" alt=\"ELF可重定位目标文件\"></p>\n<p>夹在 ELF 头和节头部表之间的都是节。一个典型的 ELF 可重定位目标文件包含下面几个节：</p>\n<ul>\n<li><strong>.text：</strong> 已编译程序的机器代码。</li>\n<li><strong>.rodata：</strong> 只读数据，比如 printf 语句中的格式串和开关语句的跳转表。</li>\n<li><strong>.data：</strong> 已初始化的全局和静态 C 变量。局部 C 变量在运行时被保存在栈中，既不岀现在 .data 节中，也不岀现在 .bss 节中。</li>\n<li><strong>.bss：</strong> 未初始化的全局和静态 C 变量，以及所有被初始化为 0 的全局或静态变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分已初始化和未初始化变量是为了空间效率：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为 0。</li>\n<li><strong>.symtab：</strong> 一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过 -g 选项来编译一个程序，才能得到符号表信息。实际上，每个可重定位目标文件在 .symtab 中都有一张符号表（除非程序员特意用 STRIP 命令去掉它）。然而，和编译器中的符号表不同，.symtab 符号表不包含局部变量的条目。</li>\n<li><strong>.rel.text：</strong> 一个 .text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面，调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非用户显式地指示链接器包含这些信息。</li>\n<li><strong>.rel.data：</strong> 被模块引用或定义的所有全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。</li>\n<li><strong>.debug：</strong> 一个调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的 C 源文件。只有以 - g 选项调用编译器驱动程序时，才 会得到这张表。</li>\n<li><strong>.line：</strong> 原始 C 源程序中的行号和 .text 节中机器指令之间的映射。只有以 -g 选项调用编译器驱动程序时，才会得到这张表。</li>\n<li><strong>.strtab：</strong> 一个字符串表，其内容包括 .symtab 和 .debug 节中的符号表，以及节头部中的节名字。字符串表就是以 null 结尾的字符串的序列。</li>\n</ul>\n<h4 id=\"4-符号和符号表\"><a href=\"#4-符号和符号表\" class=\"headerlink\" title=\"4. 符号和符号表\"></a>4. 符号和符号表</h4><p>每个可重定位目标模块m都有一个符号表，包含m所定义和引用的符号的信息。符号表产生在汇编阶段，符号表生成虚拟地址在链接阶段</p>\n<p>在链接器的上下文中，有三种不同的符号：</p>\n<p>由m定义并能被其他模块引用的全局符号<br>由其他模块定义并被模块m引用的全局符号<br>只被模块m引用的本地符号</p>\n<p>例如：</p>\n<p><code>main.cpp</code> 内容 和 <code>sum.cpp</code> 内容如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// main.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">int</span> gdata;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span>;<br><br><span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = gdata;<br>\t<span class=\"hljs-type\">int</span> b = data;<br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(a, b);<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// sum.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> gdata = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>g++ -c</strong> 只编译不链接，只生成目标文件</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031135734.png\" alt=\"image.png\"></p>\n<p> <strong>objdump -t main.o &#x2F;&#x2F; 输出目标文件的符号表：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031136378.png\" alt=\"image.png\"></p>\n<p>第一列：段内偏移；<br>第二列：符号作用域  : local &#x2F;global；<br>第三列：符号类型；<br>第四列：符号所在段（<em>UND</em>外部链接符号，未在本目标文件定义）；<br>第五列：符号对应的对象占据的内存空间大小，没有实体对象大小为0，未定义的为0；<br>第六列：符号名；</p>\n<p>其中main 定义在.text</p>\n<p>data 是全局变量，且初始化定义在.data ,也就是m定义并能被其他模块引用的全局符号。<br>gdata 和 sum 函数是声明，因此是<em>UNG</em>，也就是由其他模块定义并被模块 m 引用的全局符号。</p>\n<p>第一列都是 0x0 没有为符号分配虚拟地址，在链接阶段分配</p>\n<p>在sum.o中：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031138696.png\" alt=\"image.png\"></p>\n<p>gdata 是出刷的全局变量 在 .data中；sum 函数在.text中</p>\n<p>readelf -h 查看elf文件的头文件信息<br>可见目标文件的elf文件，其类型为REL(可重定位文件)。 </p>\n<p>objdump -s 显示全部Header信息，还显示他们对应的十六进制文件代码：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139885.png\" alt=\"image.png\"></p>\n<p>有调试信息的：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139339.png\" alt=\"image.png\"></p>\n<p>可以看到符号地址未分配，用0填充；这也是obj文件无法运行的原因之一。</p>\n<h4 id=\"5-符号解析\"><a href=\"#5-符号解析\" class=\"headerlink\" title=\"5. 符号解析\"></a>5. 符号解析</h4><p>链接的步骤一：所有.o文件段的合并（.text  .data .bss合并），符号表合并后，进行符号解析，所有对符号的引用（<em>UNG</em>）都要找到该符号定义的地方。经常见的报错：符号重定义（存在多个相同的）、符号未定义（找不到）</p>\n<p> <strong>链接器如何解析多重定义的全局符号：</strong></p>\n<p>在编译是，编译器向汇编器输出每个全局符号，或者是强或者是弱，而汇编器把这个信息隐含地编码在可重定位目标文件的符号表里。函数和已初始化的全局变量时强符号，未初始化的全局变量是弱符号。<br>       根据强弱符号的定义，Unix链接器使用下面的规则来处理多重定义的符号：</p>\n<p>规则1：不允许有多个强符号。<br>规则2：如果有一个强符号和多个弱符号，那么选择强符号。<br>规则3：如果有多个弱符号，那么从这些弱符号中任意选择一个。</p>\n<p><strong>链接器如何使用静态库来解析引用：</strong></p>\n<p>在符号解析的阶段，链接器从左到右按照它们在编译器驱动程序命令行上出现的相同顺序来扫描可重定位目标文件和存档文件。在这次扫描中，链接器维持一个可重定位目标文件的集合E（这个集合中的文件会被合并起来形成可执行文件），一个未解析的符号（即引用了但是尚未定义的符号）集合U，以及一个在前面输入文件中已定义的符号集合D。初始时，E、U和D都是空的。</p>\n<blockquote>\n<ol>\n<li>对于命令行上的每个输入文件f，链接器会判断f是一个目标文件还是一个存档文件。如果f是一个目标文件，那么链接器吧f添加到E， 修改U和D来反映f中的符号定义和引用，并继续下一个输入文件。</li>\n<li>如果f是一个存档文件，那么链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m，定义了一个符号来解析U中的一个引用，那么就将m加到E中，并且链接器修改U和D来反映m中的符号定义和引用。对存档文件中所有的成员目标文件都反复进行这个过程，直到U和D都不再发生变化。在此时，任何不包含在E中的目标文件都简单地被丢弃，而链接器将继续处理下一个输入文件。</li>\n<li>如果当链接器完成对命令行上输入文件的扫描后，U是非空的，那么链接器就好输出一个错误并终止。否则，它会合并和重定位E中的目标文件，从而构建输出的可执行文件。</li>\n</ol>\n</blockquote>\n<p>这种算法会导致一些令人困扰的链接时错误，因为命令行上的库和目标文件的顺序非常重要。在命令行中，如果定义一个符号的库出现在引用这个符号的目标文件之前，那么引用就不能被解析，链接会失败。关于库的一般准则是将它们放在命令行的 结尾。</p>\n<p>另一方面，如果库不是相互独立的，那么它们必须排序，使得对于每个被存档文件的成员外部引用的符号s，在命令行中至少有一个s的定义实在对s的引用之后的。</p>\n<p>如果需要满足依赖需求，可以在命令行上重复库。</p>\n<h4 id=\"6-重定向\"><a href=\"#6-重定向\" class=\"headerlink\" title=\"6. 重定向\"></a>6. 重定向</h4><p>一旦链接器完成了符号解析这一步，它就是把代码中的每个符号引用和确定的一个符号定义（即它的一个输入目标模块中的一个符号表条目）联系起来。在此时，链接器就知道它的输入目标模块中的代码节和数据节的确切大小。现在就可以开始重定位了，在这个步骤中，将合并输入模块，并为每个符号分配运行时地址。</p>\n<p>重定位有两步组成：</p>\n<ol>\n<li><strong>重定位节和符号定义</strong>。在这一步中，链接器将所有相同类型的节合并为同一类型的新的聚合节。然后，链接器将运行时存储器地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。当这一步完成时，程序中的每个指令和全局变量都有唯一的运行时存储器地址了。</li>\n<li><strong>重定位节中的符号引用</strong>。在这一步中，链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。为了执行这一步，链接器依赖于称为<code>重定位条目</code>的可重定位目标模块中的数据结构。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031143865.png\" alt=\"image.png\"></p>\n<p>链接后：所有的符号都有虚拟地址</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031144871.png\" alt=\"image.png\"></p>\n<p>汇编中，全局变量和函数都有了地址。</p>\n<h4 id=\"7-可执行目标文件\"><a href=\"#7-可执行目标文件\" class=\"headerlink\" title=\"7. 可执行目标文件\"></a>7. 可执行目标文件</h4><p>可执行目标文件的格式类似于可重定位目标文件的格式。ELF头部描述文件的总体格式。它还包括程序的入口点，也就是当程序运行时要执行的第一条指令的地址。<code>.text</code> 、<code>.rodata</code> 和 <code>.data</code> 节和可重定位目标文件中的节是相似的，除了这些节已经被重定位到它们最终的运行时存储器地址以外。.init节定义了一个小函数，叫做_init，程序的初始化代码会调用它。因为可执行文件是完全链接的（已被重定位了），所以它不再需要.rel节。</p>\n<p>ELF可执行文件被设计得很容易加载到存储器，可执行文件的连续的片被映射到连续的存储器段。段头部表描述了这种映射关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031146917.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本节内容分为三部分：</p>\n<ol>\n<li>掌握进程虚拟地址空间区域划分</li>\n<li>从指令角度掌握函数调用堆栈详细过程</li>\n<li>从编译器角度理解C++代码的编译、链接</li>\n</ol>\n<p>通过了解底层基础，了解 C++ 的如何运行。</p>\n<h2 id=\"1-掌握进程虚拟地址空间区域划分\"><a href=\"#1-掌握进程虚拟地址空间区域划分\" class=\"headerlink\" title=\"1. 掌握进程虚拟地址空间区域划分\"></a>1. 掌握进程虚拟地址空间区域划分</h2><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> gdata1 = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> gdata2 = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-type\">int</span> gdata3;<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata4 = <span class=\"hljs-number\">11</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata5 = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> gdata6;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">12</span>;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-type\">int</span> c;<br><br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> d = <span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> e = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> f;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>根据上述代码，如何得知各个变量存储的位置？</p>\n<h3 id=\"1-1-虚拟进程视图\"><a href=\"#1-1-虚拟进程视图\" class=\"headerlink\" title=\"1.1 虚拟进程视图\"></a>1.1 虚拟进程视图</h3><p>首先要知道一点，程序由磁盘加载到内存时是不可能直接加载到物理内存当中的，这里的原因以及物理内存和虚拟内存的区别与联系在本篇先不做讨论 本篇接下来所讨论的范围在 x86 体系 32 位 Linux 环境下 Linux 系统会给当前每一个进程分配一个 2^32 位大小(4G)的一块空间，这块空间就叫做进程的虚拟地址空间。</p>\n<p>这里附上IBM公司关于<strong>虚拟</strong>的解释:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">它存在，你看得见，它是物理的<br>它存在，你看不见，它是透明的<br>它不存在，你看得见，它是虚拟的<br>它不存在，你看不见，它被删除<br></code></pre></td></tr></table></figure>\n\n<p>这块空间的内容如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030903283.png\" alt=\"虚拟进程空间示例图 CN\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030914652.png\" alt=\"虚拟进程空间示例图 EN\"></p>\n<blockquote>\n<p>补充：<br>x86 32位体系下的4G虚拟地址空间：<br><strong>Linux默认3:1</strong>来分配 user space : kernal space；<br><strong>Windows默认2:2</strong>来分配 user space : kernal space。</p>\n</blockquote>\n<p>Linux 中每一个运行的程序（进程），32 位操作系统都会为其分配一个 0 ～ 4GB 的进程虚拟地址空间，64 位操作系统会为其分配一个 0 ～ 16GB 的进程虚拟地址空间。</p>\n<p>解释：<br>32 位操作系统下，一个指针的大小为 32 位即 4 个字节，它所能保存的地址范围为 <code>[0, 2^32]</code> ，所以它的寻址范围为 4GB 大小，所以 32 位操作系统下系统给进程分配的虚拟地址空间大小为 4 GB 。<br>64 位操作系统下，一个指针的大小为 64 位即 8 个字节，它所能保存的地址范围为 <code>[0, 2^64]</code> ，即 4GB * 4GB &#x3D; 16TB，所以它的寻址范围为 16TB 大小，所以 64 位操作系统下系统给进程分配的虚拟地址空间大小为 16TB 。</p>\n<p><strong>为什么是 4G 内存：</strong></p>\n<p>首先我们研究的体系是：<code>x86 32位Linux环境</code>：<br>Linux操作系统会给当前进程分配一个 <code>2^32</code> 大小的空间，那么，<code>2^32</code> 换算过来就是 4G 了。</p>\n<h3 id=\"1-2-用户空间（User-Space）\"><a href=\"#1-2-用户空间（User-Space）\" class=\"headerlink\" title=\"1.2 用户空间（User Space）\"></a>1.2 用户空间（User Space）</h3><ol>\n<li><p>保留区：<br> 128M 大小，不可访问，不允许读写。任何普通程序对它的引用都是非法的，一般用来捕捉空指针和小整型值指针引用内存的异常情况。在定义指针时将其初始化为 “NULL”，它便不会被引用了，从而避免了野指针。</p>\n</li>\n<li><p>指令段【.text】、只读数据段【.rodata】：<br> 指令段存放指令，只能读，不能写；只读数据段中存放只读数据，比如字符串常量等，只能读，不能写。</p>\n<blockquote>\n<p>在C++中，不允许普通指针指向常量字符串，需要使用<code>const</code>：<br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030909413.png\" alt=\"示例\"></p>\n</blockquote>\n</li>\n<li><p>数据段【.data】：<br> 存放程序中<strong>已初始化且不为0的全局变量或静态变量</strong>。</p>\n</li>\n<li><p>数据段【.bss】：<br> 存放程序中未初始化或者初始化为0的全局变量或静态变量。</p>\n</li>\n<li><p>堆【.heap】：<br> 存放动态数据，需要程序员手动开辟、释放空间，在程序刚开始运行时，此区域为空，等到程序运行到手动开辟空间的指令时，此区域动态扩张。自下向上增长。</p>\n<ul>\n<li>堆用于存放进程<code>运行时动态分配</code>的内存段，可动态扩张或缩减。</li>\n<li>堆中内容是<code>匿名</code>的，无法通过名字进行访问，只能通过<code>指针</code>进行间接访问。</li>\n<li>当进程调用<code>malloc(C)/new(C++)</code>等函数分配内存时，新分配的在堆上<code>动态扩张</code>；当调用<code>free(C)/delete(C++)</code>等函数释放内存时，被释放的内存从堆上<code>动态缩减</code></li>\n<li>分配的堆内存时经过<code>字节对齐</code>的空间，以适合<code>原子操作</code>。</li>\n<li><code>堆管理器</code>通过<code>链表</code>管理每个申请的内存块</li>\n<li>由于堆内存块的申请与释放都是<code>无序</code>的，最终会产生许许多多<code>内存碎片</code>。</li>\n<li>堆的末端由<code>break指针</code>标识，当堆管理器需要更多内存时，可通过<code>系统调用brk和sbrk</code>来<code>移动break指针</code>以扩张堆，一般情况下由系统自动调用。</li>\n</ul>\n</li>\n<li><p>共享库【.dll、.so】：<br> 动态链接库，程序在运行的过程中，将一些标准库函数映射到这里，比如C标准库函数（fread、fwrite、fopen等）。</p>\n</li>\n<li><p>栈【.stack】：<br> 存放所有函数的活动空间，局部变量；根据程序的运行，调用函数，此区域动态地扩张和收缩。</p>\n<ul>\n<li><p>栈中存放<code>非静态局部变量</code> <code>函数形参</code> <code>函数返回地址</code>等。</p>\n</li>\n<li><p>栈中内存空间由<code>编译器</code>（静态的）自动分配和释放，行为类似数据结构中的栈结构。</p>\n<blockquote>\n<p>主要用途：</p>\n<ol>\n<li>为函数内部声明的<strong>非静态局部变量</strong>提供存储空间</li>\n<li>记录函数调用过程相关的维护性信息，称为栈帧（stack frame）</li>\n<li>作为<code>临时存储区</code>，用于暂时存放<code>较长的算术表达式部分计算结果</code>，或者运行时调用alloca函数<code>动态分配</code>栈内内存</li>\n</ol>\n</blockquote>\n</li>\n<li><p>栈内存增长：栈能够增长到的最大内存容量为RLIMIT_STACK（通常是8M），如果此时栈的大小未达到RLIMIT_STACK，则栈会自动增长至程序运行所需的大小，如果此时栈的大小已经达到RLIMIT_STACK，若再向栈中不断压入数据，会触发页错误。栈的实时大小会在运行时由内核动态调整。</p>\n</li>\n<li><p>查看栈大小：<code>ulimit -s</code>可查看和设置<code>栈的最大值</code>，当程序使用的栈大小超过该值，会发生<code>segmentation fault</code>。</p>\n</li>\n<li><ul>\n<li>栈的增长方向：既可以向高地址增长，也可以向低地址增长，这取决于具体实现，自上而下增长。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>命令行参数：<br> 保存传递给 main 函数的参数，比如 argc 和 argv。</p>\n</li>\n<li><p>环境变量：<br> 用于存放当前的环境变量，在 Linux 下可以用 env 命令查看。</p>\n</li>\n</ol>\n<h3 id=\"1-3-进程空间（Kernal-Space）\"><a href=\"#1-3-进程空间（Kernal-Space）\" class=\"headerlink\" title=\"1.3 进程空间（Kernal Space）\"></a>1.3 进程空间（Kernal Space）</h3><ol>\n<li><p>内存直接访问区【ZONE_DMA】：<br> 16M 大小，不需要经过 CPU 的寄存器，加快了磁盘和内存之间的数据交换。</p>\n</li>\n<li><p>常用区【ZONE_NORMAL】：<br> 892M 大小，内核中最重要的部分，存放页表、页面的映射、PCB。</p>\n</li>\n<li><p>高端内存区【ZONE_HIGHMEM】：<br> 128M 大小，存放大文件的映射，即内存中映射高于 1GB 的物理内存。64 位操作系统没有该段。</p>\n</li>\n</ol>\n<h3 id=\"1-4-最终解释\"><a href=\"#1-4-最终解释\" class=\"headerlink\" title=\"1.4 最终解释\"></a>1.4 最终解释</h3><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308030917571.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>注意：<br>对于<code>a、b、c以及&#39;&#123;&#39;、&#39;&#125;&#39;</code>来说，是存储在<code>.text</code>指令段的，因为他们生成的都是&#x3D;&#x3D;指令&#x3D;&#x3D;。<br>例如：<br><code>int a = 12</code>：生成汇编指令如下：<code>mov dword ptr[a], 0Ch</code></p>\n</blockquote>\n<h3 id=\"1-5-好处\"><a href=\"#1-5-好处\" class=\"headerlink\" title=\"1.5 好处\"></a>1.5 好处</h3><p><code>数据</code>与<code>代码指令</code>分别开辟空间有以下好处：</p>\n<ol>\n<li>当程序被装载后，数据和代码指令分别映射到两个虚拟内存区域。<code>数据区</code>对于进程而言<code>可读可写</code>，<code>代码指令区</code>对于进程而言<code>只读</code>，</li>\n<li>现代CPU一般<code>数据缓存</code>和<code>指令缓存</code>分离，故进程虚拟地址空间中数据与代码指令分离有助于提高<code>CPU缓存命中率</code>。</li>\n<li>若系统中运行多个该程序的副本时，其代码指令相同，故内存中只需要保存一份该程序的代码指令，大大减少了内存的开销，相同的程序的代码指令可以被多个副本进程所共享，但是数据是每个副本进程所独有的。</li>\n</ol>\n<p><strong>参考文章：</strong></p>\n<blockquote>\n<p>【1】Randal E. Bryant. 《深入理解计算机系统》.北京. 机械工业出版社，2016：1<br>【2】寻痴. 虚拟地址空间图解. CSDN. 2021-03-23<br>【3】聪聪菜的睡不着. 【C++】一、虚拟内存布局、编译链接原理等基础概念. CSDN. 2020-07-09<br>【4】<a href=\"https://blog.csdn.net/m0_46308273/article/details/115818195\">https://blog.csdn.net/m0_46308273/article/details/115818195</a><br>【5】<a href=\"https://blog.csdn.net/weixin_45437022/article/details/115409679\">https://blog.csdn.net/weixin_45437022/article/details/115409679</a></p>\n</blockquote>\n<h2 id=\"2-从指令角度掌握函数调用堆栈详细过程\"><a href=\"#2-从指令角度掌握函数调用堆栈详细过程\" class=\"headerlink\" title=\"2. 从指令角度掌握函数调用堆栈详细过程\"></a>2. 从指令角度掌握函数调用堆栈详细过程</h2><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031030058.png\" alt=\"image.png\"><br>栈空间是从高地址向低地址扩充，堆地址是从低地址向高地址扩充。</p>\n<p>堆栈是一种具有一定规则的数据结构，我们可以按照一定的规则进行添加和删除数据。它使用的是后进先出的原则。在x86等汇编集合中堆栈与弹栈的操作指令分别为：</p>\n<ul>\n<li>PUSH：将目标内存推入栈顶。</li>\n<li>POP：从栈顶中移除目标。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031033393.png\" alt=\"image.png\"></p>\n<p>当执行一个函数的时候，相关的参数以及局部变量等等都会被记录在ESP、EBP中间的区域。一旦函数执行完毕，相关的 <strong>栈帧</strong> 就会从堆栈中弹出，然后从预先保存好的上下文中进行恢复，以便保持堆栈平衡。CPU必须要知道函数调用完了之后要去哪里执行（pc寄存器指向）</p>\n<h3 id=\"2-1-ESP-和-EBP\"><a href=\"#2-1-ESP-和-EBP\" class=\"headerlink\" title=\"2.1 ESP 和 EBP\"></a>2.1 ESP 和 EBP</h3><p>（1）ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<br>（2）EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</p>\n<p>根据上述的定义,在通常情况下ESP是可变的,随着栈的生产而逐渐变小（因为栈向低地址扩充，栈顶寄存器数值不断变小）,而EBP寄存器是固定的,只有当函数的调用后,发生入栈操作而改变。</p>\n<p>在上述的定义中使用ESP来标记栈的底部，他随着栈的变化而变化：</p>\n<ul>\n<li>pop ebp;出栈 栈扩大4byte 因为ebp为32位</li>\n<li>push ebp;入栈，栈减少4byte        </li>\n<li>add esp, 0Ch；表示栈减小12byte</li>\n<li>sub esp, 0Ch；表示栈扩大12byte</li>\n</ul>\n<p>ebp 寄存器的出现则是为了另一个目标，通过固定的地址与偏移量来寻找在栈参数与变量。而这个固定值者存放在 ebp 寄存器中，。但是这个值会在函数的调用过程发生改变。而在函数执行结束之后需要还原，因此，在函数的出栈入栈过程中进行保存。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">问题1：main函数调用sum，sum执行完后，怎么知道回到哪个函数</span><br><span class=\"hljs-comment\">问题2：sum执行完，回到main函数之后怎么知道从哪一行继续执行</span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>&#123;<br>\t<span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>\ttemp = a + b;<br>\t<span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);<br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>打断点，调试，查看反汇编：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br><span class=\"hljs-comment\">// 00007FF637EE23D0  push        rbp  </span><br><span class=\"hljs-comment\">// 00007FF637EE23D2  push        rdi  </span><br><span class=\"hljs-comment\">// 00007FF637EE23D3  sub         rsp,148h  </span><br><span class=\"hljs-comment\">// 00007FF637EE23DA  lea         rbp,[rsp+20h]  </span><br><span class=\"hljs-comment\">// 00007FF637EE23DF  lea         rcx,[__0DD03384_02@Assembly@cpp (07FF637EF3068h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE23E6  call        __CheckForDebuggerJustMyCode (07FF637EE13FCh)  </span><br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-comment\">// 00007FF637EE23EB  mov         dword ptr [a],0Ah  </span><br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-comment\">// 00007FF637EE23F2  mov         dword ptr [b],14h  </span><br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);<br><span class=\"hljs-comment\">// 00007FF637EE23F9  mov         edx,14h  </span><br><span class=\"hljs-comment\">// 00007FF637EE23FE  mov         ecx,0Ah  </span><br><span class=\"hljs-comment\">// 00007FF637EE2403  call        sum (07FF637EE11E5h)  </span><br><span class=\"hljs-comment\">// 00007FF637EE2408  mov         dword ptr [ret],eax  </span><br>\tcout &lt;&lt; <span class=\"hljs-string\">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;<br><span class=\"hljs-comment\">// 00007FF637EE240B  lea         rdx,[string &quot;ret:&quot; (07FF637EEAC24h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2412  mov         rcx,qword ptr [__imp_std::cout (07FF637EF1190h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2419  call        std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt; &gt; (07FF637EE108Ch)  </span><br><span class=\"hljs-comment\">// 00007FF637EE241E  mov         edx,dword ptr [ret]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2421  mov         rcx,rax  </span><br><span class=\"hljs-comment\">// 00007FF637EE2424  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF637EF1168h)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE242A  lea         rdx,[std::endl&lt;char,std::char_traits&lt;char&gt; &gt; (07FF637EE103Ch)]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2431  mov         rcx,rax  </span><br><span class=\"hljs-comment\">// 00007FF637EE2434  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF637EF1170h)]  </span><br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 00007FF637EE243A  xor         eax,eax  </span><br>&#125;<br><span class=\"hljs-comment\">// 00007FF637EE243C  lea         rsp,[rbp+128h]  </span><br><span class=\"hljs-comment\">// 00007FF637EE2443  pop         rdi  </span><br><span class=\"hljs-comment\">// 00007FF637EE2444  pop         rbp  </span><br><span class=\"hljs-comment\">// 00007FF637EE2445  ret </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-解析-main-函数\"><a href=\"#2-2-解析-main-函数\" class=\"headerlink\" title=\"2.2  解析 main 函数\"></a>2.2  解析 main 函数</h3><p><strong>1. <code>&#123;</code> 会进行入栈操作，<code>&#125;</code> 进行出栈操作</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031041720.png\" alt=\"image.png\"></p>\n<p>上面两句话的意思是将 ebp 推入栈中，之后让 esp 等于 ebp。</p>\n<p><strong>为什么这么做呢？</strong></p>\n<p>因为 ebp 作为一个用于寻址的固定值是有时间周期的。只有在某个函数执行过程中才是固定的，在函数调用与函数执行完毕后会发生改变。</p>\n<p>在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。下一步，必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。</p>\n<p><code>sub esp, 148h；</code>减去的值根据程序而定</p>\n<p>之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</p>\n<p>之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</p>\n<p>在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031043365.png\" alt=\"image.png\"></p>\n<p>所谓有始有终，这是会还原上面保存的寄存器值，之后还原esp的值（上一个函数调用之前的esp被保存在固定的ebp中）与ebp值。这一过程被称为还原现场之后通过ret返回上一个函数</p>\n<p><strong>2. 函数内部：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031047611.png\" alt=\"image.png\"></p>\n<ol>\n<li><p><code>int a = 10;</code> 执行一条 mov 指令： </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assembly\">mov         dword ptr [a],0Ah<br></code></pre></td></tr></table></figure>\n<p> <img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031049332.png\" alt=\"image.png\"></p>\n</li>\n<li><p> 同理 <code>int b = 20;</code> 指令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assembly\">mov         dword ptr [b],14h<br></code></pre></td></tr></table></figure>\n<p> <img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031050787.png\" alt=\"image.png\"></p>\n</li>\n<li><p><code>int ret = sum(a,b);</code> 指令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Assmbly\">00F81896 8B 45 EC             mov         eax,dword ptr [b] <br>00F81899 50                   push        eax     #压栈 b的值<br>00F8189A 8B 4D F8             mov         ecx,dword ptr [a]  <br>00F8189D 51                   push        ecx     #压栈 a的值<br>00F8189E E8 E9 F7 FF FF       call        sum (0F8108Ch)   #执行call<br>00F818A3 83 C4 08             add         esp,8  <br>00F818A6 89 45 E0             mov         dword ptr [ret],eax <br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-3-sum-函数调用后\"><a href=\"#2-3-sum-函数调用后\" class=\"headerlink\" title=\"2.3 sum 函数调用后\"></a>2.3 sum 函数调用后</h3><p><strong>函数调用参数的压栈顺序:参数由右向左压入堆栈。</strong></p>\n<p><strong>因此上面对应的是：</strong></p>\n<p>先将b的值压入堆栈，再将a的值压入堆栈</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031052077.png\" alt=\"image.png\"><br><strong>执行call        sum (0F8108Ch)：</strong></p>\n<p><strong>call函数首先会将下一行执行的地址入栈</strong>：假设下一行指令的地址位0x08124458</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031053472.png\" alt=\"image.png\"></p>\n<p> <strong>第二步进入函数调用：sum</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031054082.png\" alt=\"image.png\"></p>\n<p>函数调用第一步： 将调用函数（main）函数的栈底指针ebp压栈</p>\n<p>第二步：将新的栈底ebp指向原来的栈顶esp</p>\n<p>第三步：将esp指向新的栈顶（开辟了函数的栈帧）：大小：108h</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031055858.png\" alt=\"image.png\"></p>\n<p>接着执行 <code>int temp = 0;</code> 指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov         dword ptr [temp],0<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031056591.png\" alt=\"image.png\"></p>\n<p>temp &#x3D; a + b; 由于a,b的值之前入栈，可以通过 ebp+12 字节找到b的值，ebp+8 字节找到 a 的值，最后将运算结果赋值给 temp</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031057265.png\" alt=\"image.png\"></p>\n<p>接着运行<code>return temp;</code>: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">mov         eax,dword ptr [temp]<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031058576.png\" alt=\"image.png\"></p>\n<p>接着是<code>函数的右括号“&#125;”</code>：</p>\n<p>（1）mov esp,ebp  回退栈帧 将栈顶指针指向栈底。<br>（2）pop ebp 栈顶出栈,并将出栈内容赋值给ebp，也是将main的栈底重新赋值给ebp。<br>（3） ret  栈顶出栈，并将出栈的内容赋值给pc寄存器，也就是将之前压榨的call sun的下一条指令赋值到pc寄存器执行。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031059983.png\" alt=\"image.png\"></p>\n<h3 id=\"2-4-返回-main-函数后\"><a href=\"#2-4-返回-main-函数后\" class=\"headerlink\" title=\"2.4 返回 main 函数后\"></a>2.4 返回 main 函数后</h3><p>接着调用函数完毕，回到主函数：<br>利用了<code>PC寄存器</code>，使得程序知道退出sum后运行哪一条指令：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031100556.png\" alt=\"image.png\"></p>\n<p><code>add         esp,8</code> ,将压栈的a b 形参空间回收</p>\n<p><code>mov         dword ptr [ret],eax</code> 在sum中，最后将temp赋值到eax寄存器，这里将eax赋值给ret</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031101001.png\" alt=\"image.png\"><br>最后<code>return 0</code>，程序结束</p>\n<h3 id=\"2-5-栈溢出问题\"><a href=\"#2-5-栈溢出问题\" class=\"headerlink\" title=\"2.5 栈溢出问题\"></a>2.5 栈溢出问题</h3><p>出现栈内存溢出的常见原因有2个：</p>\n<ol>\n<li>函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。</li>\n<li>局部静态变量体积太大。</li>\n</ol>\n<blockquote>\n<p>第一种情况不太常见,因为很多情况下我们都用其他方法来代替递归调用,所以只要不出现无限制的调用都应该是没有问题的,起码深度几十层我想是没问题的。<br>检查是否是此原因的方法为，在引起溢出的那个函数处设一个断点,然后执行程序使其停在断点处, 然后按下快捷键 Alt+7 调出 call stack 窗口,在窗口中可以看到函数调用的层次关系。</p>\n</blockquote>\n<blockquote>\n<p>   第二种情况比较常见 在函数里定义了一个局部变量,是一个类对象,该类中有一个大数组</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"> 即如果函数这样写：<br> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_stack_overflow</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"> </span>&#123;<br>   <span class=\"hljs-type\">char</span>* chdata = <span class=\"hljs-keyword\">new</span>[<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br>   <span class=\"hljs-keyword\">delete</span> []chdata;<br> &#125;<br>是不会出现这个错误的，而这样写则不行：<br> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_stack_overflow</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"> </span>&#123;<br>   <span class=\"hljs-type\">char</span> chdata[<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br> &#125;<br>大多数情况下都会出现内存溢出的错误,<br></code></pre></td></tr></table></figure>\n\n<p>解决办法大致说来也有两种：  </p>\n<ol>\n<li>增加栈内存的数目  </li>\n<li>使用堆内存</li>\n</ol>\n<h2 id=\"3-从编译器角度理解-C-代码的编译、链接\"><a href=\"#3-从编译器角度理解-C-代码的编译、链接\" class=\"headerlink\" title=\"3. 从编译器角度理解 C++ 代码的编译、链接\"></a>3. 从编译器角度理解 C++ 代码的编译、链接</h2><p>整个编译过程分为两大步：</p>\n<p>1）编译 ：把文本形式的源代码翻译成机器语言，并形成目标文件</p>\n<p>2）连接 ：把目标文件 操作系统的启动代码和库文件组织起来形成可执行程序</p>\n<h3 id=\"3-1-编译\"><a href=\"#3-1-编译\" class=\"headerlink\" title=\"3.1 编译\"></a>3.1 编译</h3><p>细分为3个阶段：</p>\n<p><strong>1.1）编译预处理</strong></p>\n<p>预处理又称为预编译，是做些代码文本替换工作。编译器执行预处理指令（以#开头，例如 <code>#include</code>），这个过程会得到不包含#指令的 .i 文件。这个过程会拷贝 <code>#include</code> 包含的文件代码，进行 <code>#define</code> 宏定义的替换 ， 处理条件编译指令 （<code>#ifndef</code>、 <code>#ifdef</code>、 <code>#endif</code>）等。</p>\n<p>预编译过程相当于如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -E main.c -o main.i<br></code></pre></td></tr></table></figure>\n\n<p>主要规则如下：</p>\n<ol>\n<li>将所有的 <code>#define</code> 删除，并且展开所有的宏定义；</li>\n<li>处理所有条件预编译指令，比如<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code>;</li>\n<li>处理 <code>#include</code> 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件；</li>\n<li>删除所有的注释：<code>//</code> 和 <code>/**/</code>；</li>\n<li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号；</li>\n<li>保留所有的 <code>#pragma</code> 编译器指令，因为编译器要使用它们。</li>\n</ol>\n<blockquote>\n<p>注：<br><code>#pragma lib</code>、<code>pragma link</code><br>等命令是在链接过程处理的。</p>\n</blockquote>\n<p>预编译后得到的文件为：<code>.i</code>文件。</p>\n<p><strong>1.2）编译</strong></p>\n<p>通过预编译输出的.i文件中，只有常量：数字、字符串、变量的定义，以及c语言的关键字：main、if、else、for、while等。这阶段要做的工作主要是，通过语法分析和词法分析，确定所有指令是否符合规则，之后翻译成汇编代码。</p>\n<p>编译过程相当于如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -S main.i -o main.s<br></code></pre></td></tr></table></figure>\n\n<p>编译后得到的文件为：<code>.s</code>文件。</p>\n<p><strong>1.3) 汇编</strong></p>\n<p>汇编过程就是把汇编语言翻译成目标机器指令的过程，生成二进制可重定位的目标文件（.obj .o等）。目标文件中存放的也就是与源程序等效的目标的机器语言代码。</p>\n<p>目标文件由段组成，通常至少有两个段：</p>\n<ol>\n<li>.text：包换主要程序的指令。该段是可读和可执行的，一般不可写</li>\n<li>.data .rodata：存放程序用到的全局变量或静态数据。可读、可写、可执行。</li>\n</ol>\n<p>汇编过程我们可以调用汇编器<code>as</code>来完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">as main.s -o main.o  <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">或者：</span>  <br>gcc -c main.s -o mian.o<br></code></pre></td></tr></table></figure>\n\n<p>这个过程将.s文件转化成.o文件。</p>\n<h3 id=\"3-2-链接过程\"><a href=\"#3-2-链接过程\" class=\"headerlink\" title=\"3.2 链接过程\"></a>3.2 链接过程</h3><p>链接是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个文件可被加载（货被拷贝）到存储器并执行。</p>\n<p><strong>链接的时机</strong>：</p>\n<ul>\n<li>编译时，也就是在源代码被翻译成机器代码时</li>\n<li>加载时，也就是在程序被加载器加载到存储器并执行时</li>\n<li>运行时，由应用程序执行</li>\n</ul>\n<h4 id=\"1-静态链接\"><a href=\"#1-静态链接\" class=\"headerlink\" title=\"1. 静态链接\"></a>1. 静态链接</h4><p><strong>静态链接器</strong>以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。输入的可重定位目标文件由各种不同的代码和数据节(section)组成。指令在一个节中，初始化的全局变量在另一个节中，而未初始化的变量又在另外一个节中。</p>\n<p>为了构造可执行文件，<strong>链接器必须完成两个任务：符号解析，重定位</strong></p>\n<ol>\n<li><strong>符号解析：</strong> 目标文件定义和引用符号。符号解析的目的是将每个符号引用刚好和一个符号定义联系起来。</li>\n<li><strong>重定位：</strong> 编译器和汇编器生成从地址0开始的饿代码和数据节。链接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得它们指向这个存储器位置，从而重定位这些节。</li>\n</ol>\n<p>链接器的一些基本事实：目标文件纯粹是字节块的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包含指导链接器和加载器的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器和汇编器已经完成了大部分工作。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031125346.png\" alt=\"image.png\"></p>\n<p>目标文件纯粹是字节快的集合。这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包括指导链接器和加载器的数据结构。链接器将这些块链接起来，确定被连接块的运行时位置，并且修改代码和数据块中的各种位置。链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。</p>\n<h4 id=\"2-目标文件\"><a href=\"#2-目标文件\" class=\"headerlink\" title=\"2. 目标文件\"></a>2. 目标文件</h4><p><strong>三种形式：</strong></p>\n<ol>\n<li><strong>可重定位目标文件</strong>。包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。</li>\n<li><strong>可执行目标文件</strong>。包含二进制代码和数据，其形式可以被直接拷贝到存储器并执行。</li>\n<li><strong>共享目标文件</strong>。一种特殊类型的可重定位目标文件，可以在加载或者运行地被动态地加载到存储器并链接。</li>\n</ol>\n<p>编译器和汇编器生成可重定位目标文件（包括共享目标文件）。链接器生成可执行目标文件。从技术上来说，一个目标模块就是一个字节序列，而一个目标文件就是一个存放在磁盘文件中的目标模块。</p>\n<h4 id=\"3-可重定位目标文件\"><a href=\"#3-可重定位目标文件\" class=\"headerlink\" title=\"3.  可重定位目标文件\"></a>3.  可重定位目标文件</h4><p>一个典型的 ELF 可重定位目标文件的格式。ELF头（ELF header）以一个 16 字节的序列开始，这个序列描述了生成该文件的系统的字的大小和字节顺序。 ELF 头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包括 ELF 头的大小、目标文件的类型（如可重定位、可执行或是共享的）、机器类型（如IA32）、节头部表的文件偏移，以及节头部表中的条目大小和数量。不同的节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031131640.png\" alt=\"ELF可重定位目标文件\"></p>\n<p>夹在 ELF 头和节头部表之间的都是节。一个典型的 ELF 可重定位目标文件包含下面几个节：</p>\n<ul>\n<li><strong>.text：</strong> 已编译程序的机器代码。</li>\n<li><strong>.rodata：</strong> 只读数据，比如 printf 语句中的格式串和开关语句的跳转表。</li>\n<li><strong>.data：</strong> 已初始化的全局和静态 C 变量。局部 C 变量在运行时被保存在栈中，既不岀现在 .data 节中，也不岀现在 .bss 节中。</li>\n<li><strong>.bss：</strong> 未初始化的全局和静态 C 变量，以及所有被初始化为 0 的全局或静态变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分已初始化和未初始化变量是为了空间效率：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为 0。</li>\n<li><strong>.symtab：</strong> 一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过 -g 选项来编译一个程序，才能得到符号表信息。实际上，每个可重定位目标文件在 .symtab 中都有一张符号表（除非程序员特意用 STRIP 命令去掉它）。然而，和编译器中的符号表不同，.symtab 符号表不包含局部变量的条目。</li>\n<li><strong>.rel.text：</strong> 一个 .text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面，调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非用户显式地指示链接器包含这些信息。</li>\n<li><strong>.rel.data：</strong> 被模块引用或定义的所有全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。</li>\n<li><strong>.debug：</strong> 一个调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的 C 源文件。只有以 - g 选项调用编译器驱动程序时，才 会得到这张表。</li>\n<li><strong>.line：</strong> 原始 C 源程序中的行号和 .text 节中机器指令之间的映射。只有以 -g 选项调用编译器驱动程序时，才会得到这张表。</li>\n<li><strong>.strtab：</strong> 一个字符串表，其内容包括 .symtab 和 .debug 节中的符号表，以及节头部中的节名字。字符串表就是以 null 结尾的字符串的序列。</li>\n</ul>\n<h4 id=\"4-符号和符号表\"><a href=\"#4-符号和符号表\" class=\"headerlink\" title=\"4. 符号和符号表\"></a>4. 符号和符号表</h4><p>每个可重定位目标模块m都有一个符号表，包含m所定义和引用的符号的信息。符号表产生在汇编阶段，符号表生成虚拟地址在链接阶段</p>\n<p>在链接器的上下文中，有三种不同的符号：</p>\n<p>由m定义并能被其他模块引用的全局符号<br>由其他模块定义并被模块m引用的全局符号<br>只被模块m引用的本地符号</p>\n<p>例如：</p>\n<p><code>main.cpp</code> 内容 和 <code>sum.cpp</code> 内容如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// main.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">int</span> gdata;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span></span>;<br><br><span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = gdata;<br>\t<span class=\"hljs-type\">int</span> b = data;<br><br>\t<span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(a, b);<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// sum.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> gdata = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>g++ -c</strong> 只编译不链接，只生成目标文件</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031135734.png\" alt=\"image.png\"></p>\n<p> <strong>objdump -t main.o &#x2F;&#x2F; 输出目标文件的符号表：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031136378.png\" alt=\"image.png\"></p>\n<p>第一列：段内偏移；<br>第二列：符号作用域  : local &#x2F;global；<br>第三列：符号类型；<br>第四列：符号所在段（<em>UND</em>外部链接符号，未在本目标文件定义）；<br>第五列：符号对应的对象占据的内存空间大小，没有实体对象大小为0，未定义的为0；<br>第六列：符号名；</p>\n<p>其中main 定义在.text</p>\n<p>data 是全局变量，且初始化定义在.data ,也就是m定义并能被其他模块引用的全局符号。<br>gdata 和 sum 函数是声明，因此是<em>UNG</em>，也就是由其他模块定义并被模块 m 引用的全局符号。</p>\n<p>第一列都是 0x0 没有为符号分配虚拟地址，在链接阶段分配</p>\n<p>在sum.o中：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031138696.png\" alt=\"image.png\"></p>\n<p>gdata 是出刷的全局变量 在 .data中；sum 函数在.text中</p>\n<p>readelf -h 查看elf文件的头文件信息<br>可见目标文件的elf文件，其类型为REL(可重定位文件)。 </p>\n<p>objdump -s 显示全部Header信息，还显示他们对应的十六进制文件代码：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139885.png\" alt=\"image.png\"></p>\n<p>有调试信息的：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031139339.png\" alt=\"image.png\"></p>\n<p>可以看到符号地址未分配，用0填充；这也是obj文件无法运行的原因之一。</p>\n<h4 id=\"5-符号解析\"><a href=\"#5-符号解析\" class=\"headerlink\" title=\"5. 符号解析\"></a>5. 符号解析</h4><p>链接的步骤一：所有.o文件段的合并（.text  .data .bss合并），符号表合并后，进行符号解析，所有对符号的引用（<em>UNG</em>）都要找到该符号定义的地方。经常见的报错：符号重定义（存在多个相同的）、符号未定义（找不到）</p>\n<p> <strong>链接器如何解析多重定义的全局符号：</strong></p>\n<p>在编译是，编译器向汇编器输出每个全局符号，或者是强或者是弱，而汇编器把这个信息隐含地编码在可重定位目标文件的符号表里。函数和已初始化的全局变量时强符号，未初始化的全局变量是弱符号。<br>       根据强弱符号的定义，Unix链接器使用下面的规则来处理多重定义的符号：</p>\n<p>规则1：不允许有多个强符号。<br>规则2：如果有一个强符号和多个弱符号，那么选择强符号。<br>规则3：如果有多个弱符号，那么从这些弱符号中任意选择一个。</p>\n<p><strong>链接器如何使用静态库来解析引用：</strong></p>\n<p>在符号解析的阶段，链接器从左到右按照它们在编译器驱动程序命令行上出现的相同顺序来扫描可重定位目标文件和存档文件。在这次扫描中，链接器维持一个可重定位目标文件的集合E（这个集合中的文件会被合并起来形成可执行文件），一个未解析的符号（即引用了但是尚未定义的符号）集合U，以及一个在前面输入文件中已定义的符号集合D。初始时，E、U和D都是空的。</p>\n<blockquote>\n<ol>\n<li>对于命令行上的每个输入文件f，链接器会判断f是一个目标文件还是一个存档文件。如果f是一个目标文件，那么链接器吧f添加到E， 修改U和D来反映f中的符号定义和引用，并继续下一个输入文件。</li>\n<li>如果f是一个存档文件，那么链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m，定义了一个符号来解析U中的一个引用，那么就将m加到E中，并且链接器修改U和D来反映m中的符号定义和引用。对存档文件中所有的成员目标文件都反复进行这个过程，直到U和D都不再发生变化。在此时，任何不包含在E中的目标文件都简单地被丢弃，而链接器将继续处理下一个输入文件。</li>\n<li>如果当链接器完成对命令行上输入文件的扫描后，U是非空的，那么链接器就好输出一个错误并终止。否则，它会合并和重定位E中的目标文件，从而构建输出的可执行文件。</li>\n</ol>\n</blockquote>\n<p>这种算法会导致一些令人困扰的链接时错误，因为命令行上的库和目标文件的顺序非常重要。在命令行中，如果定义一个符号的库出现在引用这个符号的目标文件之前，那么引用就不能被解析，链接会失败。关于库的一般准则是将它们放在命令行的 结尾。</p>\n<p>另一方面，如果库不是相互独立的，那么它们必须排序，使得对于每个被存档文件的成员外部引用的符号s，在命令行中至少有一个s的定义实在对s的引用之后的。</p>\n<p>如果需要满足依赖需求，可以在命令行上重复库。</p>\n<h4 id=\"6-重定向\"><a href=\"#6-重定向\" class=\"headerlink\" title=\"6. 重定向\"></a>6. 重定向</h4><p>一旦链接器完成了符号解析这一步，它就是把代码中的每个符号引用和确定的一个符号定义（即它的一个输入目标模块中的一个符号表条目）联系起来。在此时，链接器就知道它的输入目标模块中的代码节和数据节的确切大小。现在就可以开始重定位了，在这个步骤中，将合并输入模块，并为每个符号分配运行时地址。</p>\n<p>重定位有两步组成：</p>\n<ol>\n<li><strong>重定位节和符号定义</strong>。在这一步中，链接器将所有相同类型的节合并为同一类型的新的聚合节。然后，链接器将运行时存储器地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。当这一步完成时，程序中的每个指令和全局变量都有唯一的运行时存储器地址了。</li>\n<li><strong>重定位节中的符号引用</strong>。在这一步中，链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。为了执行这一步，链接器依赖于称为<code>重定位条目</code>的可重定位目标模块中的数据结构。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031143865.png\" alt=\"image.png\"></p>\n<p>链接后：所有的符号都有虚拟地址</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031144871.png\" alt=\"image.png\"></p>\n<p>汇编中，全局变量和函数都有了地址。</p>\n<h4 id=\"7-可执行目标文件\"><a href=\"#7-可执行目标文件\" class=\"headerlink\" title=\"7. 可执行目标文件\"></a>7. 可执行目标文件</h4><p>可执行目标文件的格式类似于可重定位目标文件的格式。ELF头部描述文件的总体格式。它还包括程序的入口点，也就是当程序运行时要执行的第一条指令的地址。<code>.text</code> 、<code>.rodata</code> 和 <code>.data</code> 节和可重定位目标文件中的节是相似的，除了这些节已经被重定位到它们最终的运行时存储器地址以外。.init节定义了一个小函数，叫做_init，程序的初始化代码会调用它。因为可执行文件是完全链接的（已被重定位了），所以它不再需要.rel节。</p>\n<p>ELF可执行文件被设计得很容易加载到存储器，可执行文件的连续的片被映射到连续的存储器段。段头部表描述了这种映射关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031146917.png\" alt=\"image.png\"></p>\n"},{"title":"C++ 基础精讲","index_img":"/img/Blog-Logo/C++_Logo.png","banner_img":"/img/Post-Banner/01.blogs/1316853.jpeg","_content":"\n本节分为 5 大类：\n\n1. 形参带默认值的函数\n2. 内联函数inline\n3. 详解函数重载\n4. const 深入应用\n5. 深入理解 C++ 的 new 和 delete\n\n## 1. 形参带默认值的函数\n\n在 C++ 中，声明一个函数时，可以为函数的参数指定默认值。当调用有默认参数值的函数时，可以不写出参数，这时就相当于以默认值作为参数调用该函数。\n\n**注意事项：**\n\n1. 在有函数声明（原型）时，默认参数可以放在函数声明或定义中，但是只能放在二者之一。\n\n~~~c++\ndouble sqrt(double f = 1.0); //函数声明\n\ndouble sqrt(double f)  //函数定义\n{\n  // ....  \n}\n~~~\n\n2. 没有函数（原型）时，默认参数在函数定义时指定。\n\n~~~c++\n//没有 函数声明\n \ndouble sqrt(double f = 1.0)  //函数定义\n~~~\n\n3. 在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.\n\n就是说，**函数声明时，必须按照从右向左的顺序，依次给与默认值。**\n\n原因：\n\n函数形参的压栈过程是从右向左。详细请看：[[01.理解 C++ 内核]] 的 **从指令角度掌握函数调用堆栈详细过程。**\n\n~~~c++\nint f (int i1, int i2 = 2, int i3 = 3);     // 正确\nint g (int i1, int i2 = 2, int i3);         // 错误, i3未指定默认值\nint h (int i1 = 1, int i2, int i3 = 3);     // 错误, i2未指定默认值\n~~~\n\n**普通函数和形参带默认值函数对比：**\n\n~~~c++\n#include <iostream>\n \nint sum(int a = 10, int b  = 10)\n{\n  int temp = 0;\n  temp = a + b;\n  return temp;\n}\n \nint main()\n{\n  int a = 10;\n  int b = 20;\n \n  int ret = sum(a, b);\n \n  ret = sum(a);//b 使用默认值\n \n  ret = sum();//都使用默认值\n \n  return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031520415.png)\n\n对比1，2 发现：\n\n2 中 b 使用默认值，因此将 b 的值拷贝到寄存器后压栈，而是直接将常量0ah(10) 压栈，减少了此寄存器拷贝；\n\n同理有3，使用默认值是：调用函数减少了 mov 指令。\n\n## 2. 内联函数 inline\n\n**内联函数与普通函数的区别？**\n\n1. 内联函数；在编译过程中，就没有函数调用开销。在函数的调用点直接将函数的代码进行展开处理\n\n[[01.理解 C++ 内核]] 中的 **从指令角度掌握函数调用堆栈详细过程** 知道，在调用函数的过程中：\n\n（1）将函数实数从右向左压栈\n（2）call指令：\n\t\t将下一行要执行的代码地址入栈\n\t\t跳转到函数入口：首先push ebp,将栈底指针入栈，然后给函数开辟栈帧函数执行结束后，栈帧回退。\n\n在函数调用中，有大量的函数调用开销。如果封装的函数内容简单，函数调用的开销大于函数指令的执行时间，那么就可以使用内联函数（需要大量调用，且指令简单）。在调用点展开内联函数指令\n\n2. 内联函数不在生成相应的函数符号\n\n3. inline 只是建议编译器把这个函数处理成内联函数，具体会由编译器处理觉得是否展开成内联函数。\n\n注意：\n\n（1）如果用vs调试Debug，不会将函数展开成内联.release版本可以。\n\n## 3. 详解函数重载\n\n**函数重载**：一组函数，其中函数名相同，参数列表的个数或者类型不同，那么这一组函数就称作函数重载。函数重载发生在编译时期。\n\n（1）函数重载与函数返回值无关，因为在产生符号时没有返回值\n（2） 函数重载需要在同一个作用域\n（3）const 或者 volatile 的时候，是如何影响形参的\n\n**C++ 支持函数重载，而 C 则不支持：**\n\n编译器产生的函数符号规则不同：\n\n- C++ 代码：函数符号包含了函数名和参数列表\n- C 代码：函数符号只包含了函数名。\n\n**注意事项：**\n\n** **函数重载需要在同一个作用域下**。**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nbool compare(int a, int b)\n{\n\treturn a > b;\n}\n\nbool compare(double a, double b)\n{\n\treturn a > b;\n}\n\nbool compare(const char* a, const char* b)\n{\n\treturn a > b;\n}\n\nint main()\n{\n\tbool compare(double a, double b);\n\tcompare(\"adf\", \"wew\");\n\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031530000.png)\n\n由于在局部作用域声明了新的 compare，导致无法重载外部作用域的 compare。\n\n**const int 和 int 的重载：**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) {}\nvoid func(const int a) {}\n\nint main()\n{\n\t// ...\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031534968.png)\n\n原因：\n\n~~~c++\n#include <iostream>\n#include <typeinfo>\n\nint main()\n{\n\tint a = 10;\n\tconst int b = 10;\n\n\tstd::cout << typeid(a).name() << std::endl;\n\tstd::cout << typeid(b).name() << std::endl;\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031536065.png)\n\nconst int 和 int 在编译器看来都是 int 类型 ，无法完成重载。\n\n### 3.1 C++ 和 C 语言如何相互调用\n\n由于 C++ 和 C 语言的编译器生成的函数符号不同，在 C++ 使用 c 语言需要使用exten \"C\"{};\n\n#### 1. C++ 调用 C\n\n对于c++，由于c++的编译器对c语言兼容，因此在c++中调用c语言编写的函数，只需要在函数声明前面加上关键字`extern \"C\"`，表示采用类c语言的方式解析函数符号。例子如下：\n\n~~~c++\n// add.h\n\n#ifdef __ADD_H__\n#define __ADD_H__\n\nextern \"C\" int add(int a, int b);\n\n#endif\n\n\n// add.c\nint add(int a, int b)\n{\n    return a + b;\n}\n\n// main.cpp\n#include <iostream>\n#include \"add.h\"\nusing namespace std;\n\nint main()\n{\n    cout << \"1 + 1 = \" << add(1, 1) << endl;\n}\n~~~\n\n在例子中，`main.cpp` 为`c++` 代码，`add.c` 为 c 语言代码，当 c++ 编译器识别到`extern \"C\"` 关键字时，会去寻找 `_add_` 函数的实现而不是寻找类似`_int_add_int_int_` 这样带参数信息的函数实现。\n\n#### 2. C 调用 C++\n\nc 语言调用 c++ 代码却并不容易，原因是 c 语言并不兼容 c++。就算 c 语言可以调用 c++，也会因为无法识别 c++ 新定义的符号而编译报错。因此，为了实现 c 语言调用 c++ 函数，必须实现以下两个步骤：\n1. 将 c++ 相关函数封装为静态库或动态库（因为调用库函数时编译器并不知道里面执行的是什么语言）；\n2. 对外提供遵循类 c 语言规约的接口函数。例子如下所示：\n\n~~~c++\n// printNum.h\n#ifdef __PRINTNUM_H__\n#define __PRINTNUM_H__\n\nextern \"C\" void printNum(int a);\n\n#endif\n\n// printNum.cpp\n#include <iostream>\n#include \"printNum.h\"\nusing namespace std;\n\nvoid printNum(int a)\n{\n    cout << << \"num is \" << a << endl;\n}\n\n// main.c\nextern void printNum(int a);\n\nprintNum(5);\n~~~\n\n通过将 `_cout_`函数封装为类 c 语言规约的接口函数，使得 `main.c` 中可以成功调用 c++ 函数 `_printNum_` 。值得注意的是，`main.c` 不可以直接引入 `printNum.h`，因为 c 语言不能识别 `extern \"C\"` 关键字。可以利用 c++ 预定义宏实现头文件的改写：\n\n~~~c++\n#ifdef __PRINTNUM_H__\n#define __PRINTNUM_H__\n\n#ifdef __cplusplus\nextern \"C\" { \n#endif\nvoid printNum(int a);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n~~~\n\n#### 3. 总结\n\n\n1. c 语言与 c++ 的相互调用可以通过 `extern \"C\"` 关键字实现\n2. c++ 中调用 c 代码，只须在 c++ 中为 c 代码函数声明之前加上 `extern \"C\"`\n3. c 语言调用 c++ 代码，则需要将 c++ 代码编译成静态库或动态库，然后对外提供用 `extern \"C\"` 声明的类 c 封装函数\n\n## 4. const 深入应用\n\n**const 作用：**\n\n1. 修饰变量，说明该变量不可以被改变；\n2. 修饰指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）；\n3. 修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；\n4. 修饰成员函数，说明该成员函数内不能修改成员变量。\n\n**const 的指针与引用：**\n\n- 指针\n    - 指向常量的指针（pointer to const）\n    - 自身是常量的指针（常量指针，const pointer）\n- 引用\n    - 指向常量的引用（reference to const）\n    - 没有 const reference，因为引用只是对象的别名，引用不是对象，不能用 const 修饰\n\n~~~c++\n// 类\nclass A\n{\nprivate:\n    const int a;                // 常对象成员，可以使用初始化列表或者类内初始化\n\npublic:\n    // 构造函数\n    A() : a(0) { };\n    A(int x) : a(x) { };        // 初始化列表\n\n    // const可用于对重载函数的区分\n    int getValue();             // 普通成员函数\n    int getValue() const;       // 常成员函数，不得修改类中的任何数据成员的值\n};\n\nvoid function()\n{\n    // 对象\n    A b;                        // 普通对象，可以调用全部成员函数\n    const A a;                  // 常对象，只能调用常成员函数\n    const A *p = &a;            // 指针变量，指向常对象\n    const A &q = a;             // 指向常对象的引用\n\n    // 指针\n    char greeting[] = \"Hello\";\n    char* p1 = greeting;                // 指针变量，指向字符数组变量\n    const char* p2 = greeting;          // 指针变量，指向字符数组常量（const 后面是 char，说明指向的字符（char）不可改变）\n    char* const p3 = greeting;          // 自身是常量的指针，指向字符数组变量（const 后面是 p3，说明 p3 指针自身不可改变）\n    const char* const p4 = greeting;    // 自身是常量的指针，指向字符数组常量\n}\n\n// 函数\nvoid function1(const int Var);           // 传递过来的参数在函数内不可变\nvoid function2(const char* Var);         // 参数指针所指内容为常量\nvoid function3(char* const Var);         // 参数指针为常量\nvoid function4(const int& Var);          // 引用参数在函数内为常量\n\n// 函数返回值\nconst int function5();      // 返回一个常数\nconst int* function6();     // 返回一个指向常量的指针变量，使用：const int *p = function6();\nint* const function7();     // 返回一个指向变量的常指针，使用：int* const p = function7();\n~~~\n\n**宏定义 `#define` 和 const 常量:**\n\n|宏定义 #define|const 常量|\n|---|---|\n|宏定义，相当于字符替换|常量声明|\n|预处理器处理|编译器处理|\n|无类型安全检查|有类型安全检查|\n|不分配内存|要分配内存|\n|存储在代码段|存储在数据段|\n|可通过 `#undef` 取消|不可取消|\n\n### 1. C++ 和 C 的 const 区别\n\n- **c语言中，const修饰的值，可以不用初始化，不叫常量，叫做常变量；**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040846520.png)\n\n最终输出为：30、30、30\n\n- **C++中： const 定义的类型必须初始化，否则报错，c 语言中可以不初始化**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040849898.png)\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\t// const int b;\n\tconst int a = 10;\n\t// a 常量，可以定义数组长度\n\tint array[a] = {};\n\n\tint* p = (int*)&a;\n\t*p = 30;\n\n\tcout << a << \" \" << *p << \" \" << *(&a) << endl;\n\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040851384.png)\n\n原因：**const 的编译方式不同，C 语言中，const 就是当作一个变量来编译生成指令的。C++ 中，如果 const 赋值是一个立即数，所有出现 const 常量名字的地方，都被常量的初始化所替换。**\n\n#### 1.1 Debug 调试\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040857151.png)\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040900294.png)\n\n执行完第9行后 a 的内存中的值变成 1e 也即 30；但是本来出现 a 的地方在编译期已经被替换成 10，因此输出 a 依然是 10。\n\n**如果不是立即数，则是常变量**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint b = 1;\n\tconst int a = b;\n\n\t// 报错，a是常变量\n\t//int array[a] = {};\n\n\tint* p = (int*)&a;\n\t*p = 30;\n\n\tcout << a << \" \" << *p << \" \" << *(&a); // 30 30 30\n\n\treturn 0;\n}\n~~~\n\n### 2. const 与指针\n\nconst 修饰的量常出现的错误：\n\n**（1）常量不能再作为左值**\n**（2）不能把常量的地址泄露给一个普通的指针或者普通的引用变量**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040908264.png)\n\n#### 2.1 const 和 一级指针\n\n**const 如果右边没有指针*，则const 是不参与类型的**\n\n**C++的语言规范：就近原则 const 修饰的是离它最近的类型**\n\n1. `const int* p`；离 const 最近的类型是 int，所以 const 修饰的是 `*p` ，所以 `*p` 无法修改值；可以指向任意 int 的内存，但是不能通过指针简介修改内存的值。\n2. `int const* p`；`*` 不是类型，离 const 最近的类型为 int，`*p` 无法修改，同（1）\n3. `int* const p`；离 const 最近的类型为（int*），const 修饰的是 p，所以不能改变 p 指向的地址，但是可以修改 p 指向的地址的内容。\n4. `const int* const p`；不能修改 p 指向的地址和值。\n\n~~~c++\n#include <iostream>\n \nint main()\n{\n  const int a = 10 ;\n  const int * p = &a;//p指向的地址的内容不能修改\n \n  return 0;\n}\n~~~\n\n> 重点：\n> \n> **const 如果右边没有指针 `*`，则 const 是不参与类型的，仅表示 const 修饰的是一个常量，不能作为左值。**\n> \n> **const 类型转化公式：**\n> \n> - `const int*`  <= `int*` 可以转换\n> - `int*` <= `const int*` 错误\n\n示例1：\n\n~~~c++\n#include <iostream>\n#include <typeinfo>\nusing namespace std;\n\nint main()\n{\n\tint* p = nullptr;\n\tint* const p1 = nullptr;\n\n\tcout << typeid(p).name() << endl;\n\tcout << typeid(p1).name() << endl;\n\n\treturn 0;\n}\n~~~\n\n![](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040921787.png)\n\n示例2：\n\n~~~c++\nint a=10;\nint *p1= &a;\nconst int *p2 = &a;// const int * <= int *\nint *const p3 = &a;// int * <= int *\nint *p4 = p3;//p3是int * 类型，因此没有问题\n~~~\n\n#### 2.2 const 和 二级指针\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040928871.png)\n\n- `const int** q`；离 const 最近的类型为 int，修饰的是 `**q`。\n- `int* const* q`；离 const 最近的类型为 `int*`，修饰的是 `*q`。\n- `int** const q`；离 const 最近的类型为 `int**`，修饰的是 `q`，同时 const 右侧没有 `*` ，q 是 `int**` 类型。\n\n**转化公式：**\n\n- `int**` <= `const int**` 错误\n- `const int **` <= `int **` 错误\n\nconst 与二级指针结合的时候，两边必须同时有 const 或没有 const 才能转换；\n\n- `int**` <= `int* const*` 是 const 和一级指针的结合，const 右边修饰的`*`  （等同于 `int *`  <= `const int *`  ）错误的\n- `int* const*` <=`int**` （等同于`const int *` <= `int` ）可以的\n\n**要看 const 右边的 * 决定 const 修饰的是类型**\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\n\nint main()\n{\n  int a = 10;\n  int * p = &a;\n  const int ** q = &p;//error  \n  \n  /*\n  const int * *q = &p; 相当于（*）q 即 p的地址，赋值了一个const int * \n  而p 是int *类型,把常量的地址泄露给普通的指针（p）\n  修改 const int * p = &a;\n  */\n  \n  return 0;\n}\n~~~\n\n### 3. 引用\n\n1. 引用是必须初始化的，指针可以不初始化。\n2. 引用只有一级引用，没有多级引用；指针可以有一级指针，也可以用多级指针。\n3. 定义一个引用变量和定义一个指针变量，其汇编指令是一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的。\n\n引用的错误用法  `int &a = 10;` 由下面的反汇编可以知道，引用的汇编代码第一步是将引用对象的地址拷贝到寄存器中，10是常量；\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\nint main()\n{\n  int a = 10;\n  int * p = &a;\n  int &b = a;\n \n  std::cout  << a << \" \" << b << \" \" << (*p) << std::endl;\n \n  *p = 20;\n  std::cout << a << \" \" << b << \" \" << (*p) << std::endl;\n \n \n  b = 30;\n  std::cout << a << \" \" << b << \" \" << (*p);\n  return 0;\n}\n~~~\n\n输出：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040938550.png)\n\n **反汇编：指针和引用没有区别**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040939184.png)\n\n`lea eax,[a]`：将 a 的地址拷贝到寄存器 eax 中\n\n`mov dword ptr [p],eax`：将 eax 中的值拷贝到 p 中。\n\n**反汇编中指针和引用拷贝也是没有区别。**\n\n![指针拷贝 - 1](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941767.png)\n![指针拷贝 - 2](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941833.png)\n\n对指针和引用赋值，都是一样的：获取地址，然后赋值。\n\n#### 3.1 引用别名\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\n\nint main()\n{\n  int array[5] = {};\n  int * p = array;\n  int(&q)[5] = array;//定义一个引用指向数组:引用即别名  sizeof(q) =  sizeof(array) \n \n  std::cout << sizeof(array) << \"\\n\" << sizeof(p) << \"\\n\" << sizeof(q) << std::endl;//20 5 20\n \n  return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041039869.png)\n\n关于定义一个引用类型，到底需不需要开辟内存空间，我认为是需要的，上面的汇编代码中，引用和指针的汇编是一模一样的；C++ 中只有 const 类型的数据，要求必须初始化。而引用也必须要初始化，所以引用是指针，还应该是 const 修饰的常指针。 一经声明不可改变。 \n\n站在宏观角度，引用也就是别名，所以不开辟看空间。\n\n站在微观的角度，引用至少要保存一个指针，所以一定要开辟空间。站在底层实现的角度，站在 C++ 对于 C 实现包装的角度，引用就是指针。那么既然是指针至少要占用 4 个字节空间。\n\n### 4. 左值引用\n\n左值：有内存地址，有名字，值可以修改；\n\n如 `int a = 10;` `int &b =a;`\n\n`int &c =10;` //错误 20 是右值，20 = 40 是错误的，其值不能修改，没内存，没名字，是一个立即数；\n\n上述代码是无法编译通过的，因为 10 无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：\n\n~~~c++\nconst int &var = 10;\n~~~\n\n使用常引用来引用常量数字 10，因为此刻内存上产生了临时变量保存了 10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：\n\n~~~c++\nconst int temp = 10; \nconst int &var = temp;\n~~~\n\n根据上述分析，得出如下结论：\n\n左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；\n但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被 const 修饰成常量引用了。\n\n那么 C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。\n\n### 5. 右值引用\n\nC++ 对于左值和右值没有标准定义，但是有一个被广泛认同的说法：\n\n- 可以取地址的，有名字的，非临时的就是左值；\n- 不能取地址的，没有名字的，临时的就是右值；\n\n可见立即数，函数返回的值等都是右值；而非匿名对象(包括变量)，函数返回的引用，const 对象等都是左值。\n\n从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及 const 对象)。\n\n1. **`int &&c = 10;`专门用来引用右值类型，指令上，可以自动产生临时量，然后直接引用临时量   c = 1;**\n\n反汇编：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041045338.png)\n\n2. **一个右值引用变量，本身是一个左值,只能用左值引用来引用它；不能用一个右值引用变量来引用一个左值**\n\n~~~c++\nint && a = 1;\na = 10;\nint &e = a;\n~~~\n\n## 5. 深入理解 C++ 的 new 和 delete\n\n**New 的不同使用方式：**\n\n~~~c++\n#include <iostream>\n#include <new>\n\nint main()\n{\n    //1 抛异常new\n    int* p1;\n    try\n    {\n        p1 = new int(2);//分配内存并初始化\n    }\n    catch (const std::bad_alloc& e)//判断是否抛异常\n    {\n\n    }\n\n    //2 不抛异常new\n    int* p2 = new (std::nothrow)int();//不抛异常\n    //3 开辟常量内存\n    const int* p3 = new const int(40);//开辟一个常量\n\n    //4 定位new\n    int data = 0;\n    int* p4 = new(&data) int(50);//在指定地址内存初始化，本身并不开辟内存，只负责初始化\n    delete p1;\n    delete p2;\n    delete p3;\n    delete p4;\n\n    return 0;\n}\n~~~\n\n#### 1. malloc 与 new 的区别\n\n1. malloc 按字节开辟内存的；new 开辟内存时需要指定类型；\n2. malloc 开辟内存返回的都是 `void *` ，new 相当于运算符重载函数，返回值自动转为指定的类型的指针。\n3. malloc 只负责开辟内存空间，new 不仅仅也有 malloc 功能，还可以进行数据的初始化。\n4. malloc 开辟内存失败返回 nullptr 指针；new 抛出的是 bad_alloc 类型的异常。\n5. malloc 开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要`[]`，而数组需要 `[]`并给上元素个数。\n\n#### 2. free 和 delete 的区别：\n\n1. free 不管释放单个元素内存还是数组内存，只需要传入内存的起始地址即可。  \n2. delete 释放单个元素内存，不需要加中括号，但释放数据内存时需要加中括号。  \n3. delete 执行其实有两步，先调用析构，再释放；free 只有一步。\n\n#### 3. 解析\n\n代码：\n\n~~~c++\n#include <iostream>\n\nint main() \n{\n    int* p = new int;\n    delete p;\n    p = nullptr;\n\n    return 0;\n}\n~~~\n\n反汇编：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041343548.png)\n\n**new 与 delete 其本质也是函数的调用：运算符重载 new  delete**\n\n~~~c++\nnew -> operator new\ndelete -> operator delete\n~~~\n\n#### 4. 实现\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\n// new：\n// 先调用 operator 开辟内存空间\n// 然后调用对象的构造函数\n// operator new 实现\nvoid* operator new(size_t size)\n{\n    // 开辟\n    void* p = malloc(size);\n    // 判断\n    if (p == nullptr)\n    {\n        throw bad_alloc();\n    }\n\n    cout << \"operator new addr:\" << p << endl;\n\n    return p;\n}\n\n// operator new[] 实现\nvoid* operator new[](size_t size)\n{\n    // 开辟\n    void* p = malloc(size);\n    // 判断\n    if (p == nullptr)\n    {\n        throw bad_alloc();\n    }\n\n    cout << \"operator new[] addr:\" << p << endl;\n\n    return p;\n}\n\n// delete：\n// 调用 p 指向对象的析构函数\n// 再调用 operator delete 释放空间\n// operator delete 实现\nvoid operator delete(void* ptr)\n{\n    cout << \"operator delete addr: \" << ptr << endl;\n    free(ptr);\n}\n\n// operator delete[] 实现\nvoid operator delete[](void* ptr)\n{\n    cout << \"operator delete[] addr: \" << ptr << endl;\n    free(ptr);\n}\n\n// 使用\nint main()\n{\n    int* p = new int(5);\n    delete p;\n    p = nullptr;\n\n    p = new int[5];\n    delete[] p;\n    p = nullptr;\n\n    return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041355889.png)\n\n#### 5. new 和delete 能够混用吗？\n\n**C++为什么区分单个元素和数组的内存分配和释放呢？**\n\n**情况1：int类型下将其混用**\n\n```c++\nint *p = new int;\ndelete[]p;\n \nint *q = new int[10];\ndelete q;\n```\n\n能够混用。对于整型来说，没有构造函数与析构函数，针对于 int 类型，new 与 delete 功能只剩下 malloc 与 free 功能，可以将其混用。\n\n**情况2：类类型下将其混用**\n\n~~~c++\nclass Test\n{\npublic:\n\tTest(int data = 10):ptr(new int(data))\n\t{\n\t\tcout << \"Test()\" << endl;\n\t}\n\t~Test()\n\t{\n\t\tdelete ptr;\n\t\tcout << \"~Test()\" << endl;\n\t}\nprivate:\n\tint *ptr;\n};\n~~~\n\n- **单个元素与 `delete[]` 混用：**\n\n~~~c++\nTest *p1 = new Test();\ndelete[]p1;\n~~~\n\n![报错程序](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041406079.png)\n\n程序崩溃。\n\n- **数组与 delete 进行混用**\n\n~~~c++\nTest *p2 = new Test[5];\ndelete p2;\n~~~\n\n程序崩溃。\n\n**分析：**\n\n正常情况下，每一个 Test 对象有一个整型成员变量，这里分配了 5 个 Test 对象。delete 时先调用析构函数，this 指针将正确的对象的地址传入析构函数中，加了 `[]` 表示有好几个对象，有一个数组其中每一个对象都要进行析构。但 delete 真正执行指令时，底层是 malloc 按字节开辟，并不知道是否开辟了 5 个 Test 对象的数组，因此还要再多开辟一个 4 字节来存储对象的个数，假设它的地址是 `0x100`；但是 new 完之后 p2 返回的地址是 `0x104` 地址，当我们执行 `delete[]` 时，会到 4 字节来取一下对象的个数，将知道了是 5 个并将这块内存平均分为 5 份，将其每一份对象起始地址传给相应的析构函数，正常析构，最后将 `0x100` 开始的 4 字节也释放。\n\n而 p2 出错是给用户返回的存对象开始的起始地址，`delete p2` 认为 p2 只是指向了一个对象，只将 `Test[0]` 对象析构，直接从 `0x104 free(p2)`，但底层实际是从 `0x100` 开辟的，因此崩溃。\n\n而 p1 出错：p1 只是单个元素，从 `0x104` 开始开辟内存，但是 `delete[] p1`，里面并没有那么多元素，最后还释放了 4 个字节的存储对象个数的内存(即从 `0x100` 释放)因此崩溃。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041405849.png)\n\n","source":"_posts/02.C++ 基础部分/02.C++ 基础精讲.md","raw":"---\ntitle: C++ 基础精讲\ntags: [C++]\nindex_img: /img/Blog-Logo/C++_Logo.png\nbanner_img: /img/Post-Banner/01.blogs/1316853.jpeg\n---\n\n本节分为 5 大类：\n\n1. 形参带默认值的函数\n2. 内联函数inline\n3. 详解函数重载\n4. const 深入应用\n5. 深入理解 C++ 的 new 和 delete\n\n## 1. 形参带默认值的函数\n\n在 C++ 中，声明一个函数时，可以为函数的参数指定默认值。当调用有默认参数值的函数时，可以不写出参数，这时就相当于以默认值作为参数调用该函数。\n\n**注意事项：**\n\n1. 在有函数声明（原型）时，默认参数可以放在函数声明或定义中，但是只能放在二者之一。\n\n~~~c++\ndouble sqrt(double f = 1.0); //函数声明\n\ndouble sqrt(double f)  //函数定义\n{\n  // ....  \n}\n~~~\n\n2. 没有函数（原型）时，默认参数在函数定义时指定。\n\n~~~c++\n//没有 函数声明\n \ndouble sqrt(double f = 1.0)  //函数定义\n~~~\n\n3. 在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.\n\n就是说，**函数声明时，必须按照从右向左的顺序，依次给与默认值。**\n\n原因：\n\n函数形参的压栈过程是从右向左。详细请看：[[01.理解 C++ 内核]] 的 **从指令角度掌握函数调用堆栈详细过程。**\n\n~~~c++\nint f (int i1, int i2 = 2, int i3 = 3);     // 正确\nint g (int i1, int i2 = 2, int i3);         // 错误, i3未指定默认值\nint h (int i1 = 1, int i2, int i3 = 3);     // 错误, i2未指定默认值\n~~~\n\n**普通函数和形参带默认值函数对比：**\n\n~~~c++\n#include <iostream>\n \nint sum(int a = 10, int b  = 10)\n{\n  int temp = 0;\n  temp = a + b;\n  return temp;\n}\n \nint main()\n{\n  int a = 10;\n  int b = 20;\n \n  int ret = sum(a, b);\n \n  ret = sum(a);//b 使用默认值\n \n  ret = sum();//都使用默认值\n \n  return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031520415.png)\n\n对比1，2 发现：\n\n2 中 b 使用默认值，因此将 b 的值拷贝到寄存器后压栈，而是直接将常量0ah(10) 压栈，减少了此寄存器拷贝；\n\n同理有3，使用默认值是：调用函数减少了 mov 指令。\n\n## 2. 内联函数 inline\n\n**内联函数与普通函数的区别？**\n\n1. 内联函数；在编译过程中，就没有函数调用开销。在函数的调用点直接将函数的代码进行展开处理\n\n[[01.理解 C++ 内核]] 中的 **从指令角度掌握函数调用堆栈详细过程** 知道，在调用函数的过程中：\n\n（1）将函数实数从右向左压栈\n（2）call指令：\n\t\t将下一行要执行的代码地址入栈\n\t\t跳转到函数入口：首先push ebp,将栈底指针入栈，然后给函数开辟栈帧函数执行结束后，栈帧回退。\n\n在函数调用中，有大量的函数调用开销。如果封装的函数内容简单，函数调用的开销大于函数指令的执行时间，那么就可以使用内联函数（需要大量调用，且指令简单）。在调用点展开内联函数指令\n\n2. 内联函数不在生成相应的函数符号\n\n3. inline 只是建议编译器把这个函数处理成内联函数，具体会由编译器处理觉得是否展开成内联函数。\n\n注意：\n\n（1）如果用vs调试Debug，不会将函数展开成内联.release版本可以。\n\n## 3. 详解函数重载\n\n**函数重载**：一组函数，其中函数名相同，参数列表的个数或者类型不同，那么这一组函数就称作函数重载。函数重载发生在编译时期。\n\n（1）函数重载与函数返回值无关，因为在产生符号时没有返回值\n（2） 函数重载需要在同一个作用域\n（3）const 或者 volatile 的时候，是如何影响形参的\n\n**C++ 支持函数重载，而 C 则不支持：**\n\n编译器产生的函数符号规则不同：\n\n- C++ 代码：函数符号包含了函数名和参数列表\n- C 代码：函数符号只包含了函数名。\n\n**注意事项：**\n\n** **函数重载需要在同一个作用域下**。**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nbool compare(int a, int b)\n{\n\treturn a > b;\n}\n\nbool compare(double a, double b)\n{\n\treturn a > b;\n}\n\nbool compare(const char* a, const char* b)\n{\n\treturn a > b;\n}\n\nint main()\n{\n\tbool compare(double a, double b);\n\tcompare(\"adf\", \"wew\");\n\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031530000.png)\n\n由于在局部作用域声明了新的 compare，导致无法重载外部作用域的 compare。\n\n**const int 和 int 的重载：**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) {}\nvoid func(const int a) {}\n\nint main()\n{\n\t// ...\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031534968.png)\n\n原因：\n\n~~~c++\n#include <iostream>\n#include <typeinfo>\n\nint main()\n{\n\tint a = 10;\n\tconst int b = 10;\n\n\tstd::cout << typeid(a).name() << std::endl;\n\tstd::cout << typeid(b).name() << std::endl;\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031536065.png)\n\nconst int 和 int 在编译器看来都是 int 类型 ，无法完成重载。\n\n### 3.1 C++ 和 C 语言如何相互调用\n\n由于 C++ 和 C 语言的编译器生成的函数符号不同，在 C++ 使用 c 语言需要使用exten \"C\"{};\n\n#### 1. C++ 调用 C\n\n对于c++，由于c++的编译器对c语言兼容，因此在c++中调用c语言编写的函数，只需要在函数声明前面加上关键字`extern \"C\"`，表示采用类c语言的方式解析函数符号。例子如下：\n\n~~~c++\n// add.h\n\n#ifdef __ADD_H__\n#define __ADD_H__\n\nextern \"C\" int add(int a, int b);\n\n#endif\n\n\n// add.c\nint add(int a, int b)\n{\n    return a + b;\n}\n\n// main.cpp\n#include <iostream>\n#include \"add.h\"\nusing namespace std;\n\nint main()\n{\n    cout << \"1 + 1 = \" << add(1, 1) << endl;\n}\n~~~\n\n在例子中，`main.cpp` 为`c++` 代码，`add.c` 为 c 语言代码，当 c++ 编译器识别到`extern \"C\"` 关键字时，会去寻找 `_add_` 函数的实现而不是寻找类似`_int_add_int_int_` 这样带参数信息的函数实现。\n\n#### 2. C 调用 C++\n\nc 语言调用 c++ 代码却并不容易，原因是 c 语言并不兼容 c++。就算 c 语言可以调用 c++，也会因为无法识别 c++ 新定义的符号而编译报错。因此，为了实现 c 语言调用 c++ 函数，必须实现以下两个步骤：\n1. 将 c++ 相关函数封装为静态库或动态库（因为调用库函数时编译器并不知道里面执行的是什么语言）；\n2. 对外提供遵循类 c 语言规约的接口函数。例子如下所示：\n\n~~~c++\n// printNum.h\n#ifdef __PRINTNUM_H__\n#define __PRINTNUM_H__\n\nextern \"C\" void printNum(int a);\n\n#endif\n\n// printNum.cpp\n#include <iostream>\n#include \"printNum.h\"\nusing namespace std;\n\nvoid printNum(int a)\n{\n    cout << << \"num is \" << a << endl;\n}\n\n// main.c\nextern void printNum(int a);\n\nprintNum(5);\n~~~\n\n通过将 `_cout_`函数封装为类 c 语言规约的接口函数，使得 `main.c` 中可以成功调用 c++ 函数 `_printNum_` 。值得注意的是，`main.c` 不可以直接引入 `printNum.h`，因为 c 语言不能识别 `extern \"C\"` 关键字。可以利用 c++ 预定义宏实现头文件的改写：\n\n~~~c++\n#ifdef __PRINTNUM_H__\n#define __PRINTNUM_H__\n\n#ifdef __cplusplus\nextern \"C\" { \n#endif\nvoid printNum(int a);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n~~~\n\n#### 3. 总结\n\n\n1. c 语言与 c++ 的相互调用可以通过 `extern \"C\"` 关键字实现\n2. c++ 中调用 c 代码，只须在 c++ 中为 c 代码函数声明之前加上 `extern \"C\"`\n3. c 语言调用 c++ 代码，则需要将 c++ 代码编译成静态库或动态库，然后对外提供用 `extern \"C\"` 声明的类 c 封装函数\n\n## 4. const 深入应用\n\n**const 作用：**\n\n1. 修饰变量，说明该变量不可以被改变；\n2. 修饰指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）；\n3. 修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；\n4. 修饰成员函数，说明该成员函数内不能修改成员变量。\n\n**const 的指针与引用：**\n\n- 指针\n    - 指向常量的指针（pointer to const）\n    - 自身是常量的指针（常量指针，const pointer）\n- 引用\n    - 指向常量的引用（reference to const）\n    - 没有 const reference，因为引用只是对象的别名，引用不是对象，不能用 const 修饰\n\n~~~c++\n// 类\nclass A\n{\nprivate:\n    const int a;                // 常对象成员，可以使用初始化列表或者类内初始化\n\npublic:\n    // 构造函数\n    A() : a(0) { };\n    A(int x) : a(x) { };        // 初始化列表\n\n    // const可用于对重载函数的区分\n    int getValue();             // 普通成员函数\n    int getValue() const;       // 常成员函数，不得修改类中的任何数据成员的值\n};\n\nvoid function()\n{\n    // 对象\n    A b;                        // 普通对象，可以调用全部成员函数\n    const A a;                  // 常对象，只能调用常成员函数\n    const A *p = &a;            // 指针变量，指向常对象\n    const A &q = a;             // 指向常对象的引用\n\n    // 指针\n    char greeting[] = \"Hello\";\n    char* p1 = greeting;                // 指针变量，指向字符数组变量\n    const char* p2 = greeting;          // 指针变量，指向字符数组常量（const 后面是 char，说明指向的字符（char）不可改变）\n    char* const p3 = greeting;          // 自身是常量的指针，指向字符数组变量（const 后面是 p3，说明 p3 指针自身不可改变）\n    const char* const p4 = greeting;    // 自身是常量的指针，指向字符数组常量\n}\n\n// 函数\nvoid function1(const int Var);           // 传递过来的参数在函数内不可变\nvoid function2(const char* Var);         // 参数指针所指内容为常量\nvoid function3(char* const Var);         // 参数指针为常量\nvoid function4(const int& Var);          // 引用参数在函数内为常量\n\n// 函数返回值\nconst int function5();      // 返回一个常数\nconst int* function6();     // 返回一个指向常量的指针变量，使用：const int *p = function6();\nint* const function7();     // 返回一个指向变量的常指针，使用：int* const p = function7();\n~~~\n\n**宏定义 `#define` 和 const 常量:**\n\n|宏定义 #define|const 常量|\n|---|---|\n|宏定义，相当于字符替换|常量声明|\n|预处理器处理|编译器处理|\n|无类型安全检查|有类型安全检查|\n|不分配内存|要分配内存|\n|存储在代码段|存储在数据段|\n|可通过 `#undef` 取消|不可取消|\n\n### 1. C++ 和 C 的 const 区别\n\n- **c语言中，const修饰的值，可以不用初始化，不叫常量，叫做常变量；**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040846520.png)\n\n最终输出为：30、30、30\n\n- **C++中： const 定义的类型必须初始化，否则报错，c 语言中可以不初始化**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040849898.png)\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\t// const int b;\n\tconst int a = 10;\n\t// a 常量，可以定义数组长度\n\tint array[a] = {};\n\n\tint* p = (int*)&a;\n\t*p = 30;\n\n\tcout << a << \" \" << *p << \" \" << *(&a) << endl;\n\n\treturn 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040851384.png)\n\n原因：**const 的编译方式不同，C 语言中，const 就是当作一个变量来编译生成指令的。C++ 中，如果 const 赋值是一个立即数，所有出现 const 常量名字的地方，都被常量的初始化所替换。**\n\n#### 1.1 Debug 调试\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040857151.png)\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040900294.png)\n\n执行完第9行后 a 的内存中的值变成 1e 也即 30；但是本来出现 a 的地方在编译期已经被替换成 10，因此输出 a 依然是 10。\n\n**如果不是立即数，则是常变量**\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint b = 1;\n\tconst int a = b;\n\n\t// 报错，a是常变量\n\t//int array[a] = {};\n\n\tint* p = (int*)&a;\n\t*p = 30;\n\n\tcout << a << \" \" << *p << \" \" << *(&a); // 30 30 30\n\n\treturn 0;\n}\n~~~\n\n### 2. const 与指针\n\nconst 修饰的量常出现的错误：\n\n**（1）常量不能再作为左值**\n**（2）不能把常量的地址泄露给一个普通的指针或者普通的引用变量**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040908264.png)\n\n#### 2.1 const 和 一级指针\n\n**const 如果右边没有指针*，则const 是不参与类型的**\n\n**C++的语言规范：就近原则 const 修饰的是离它最近的类型**\n\n1. `const int* p`；离 const 最近的类型是 int，所以 const 修饰的是 `*p` ，所以 `*p` 无法修改值；可以指向任意 int 的内存，但是不能通过指针简介修改内存的值。\n2. `int const* p`；`*` 不是类型，离 const 最近的类型为 int，`*p` 无法修改，同（1）\n3. `int* const p`；离 const 最近的类型为（int*），const 修饰的是 p，所以不能改变 p 指向的地址，但是可以修改 p 指向的地址的内容。\n4. `const int* const p`；不能修改 p 指向的地址和值。\n\n~~~c++\n#include <iostream>\n \nint main()\n{\n  const int a = 10 ;\n  const int * p = &a;//p指向的地址的内容不能修改\n \n  return 0;\n}\n~~~\n\n> 重点：\n> \n> **const 如果右边没有指针 `*`，则 const 是不参与类型的，仅表示 const 修饰的是一个常量，不能作为左值。**\n> \n> **const 类型转化公式：**\n> \n> - `const int*`  <= `int*` 可以转换\n> - `int*` <= `const int*` 错误\n\n示例1：\n\n~~~c++\n#include <iostream>\n#include <typeinfo>\nusing namespace std;\n\nint main()\n{\n\tint* p = nullptr;\n\tint* const p1 = nullptr;\n\n\tcout << typeid(p).name() << endl;\n\tcout << typeid(p1).name() << endl;\n\n\treturn 0;\n}\n~~~\n\n![](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040921787.png)\n\n示例2：\n\n~~~c++\nint a=10;\nint *p1= &a;\nconst int *p2 = &a;// const int * <= int *\nint *const p3 = &a;// int * <= int *\nint *p4 = p3;//p3是int * 类型，因此没有问题\n~~~\n\n#### 2.2 const 和 二级指针\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040928871.png)\n\n- `const int** q`；离 const 最近的类型为 int，修饰的是 `**q`。\n- `int* const* q`；离 const 最近的类型为 `int*`，修饰的是 `*q`。\n- `int** const q`；离 const 最近的类型为 `int**`，修饰的是 `q`，同时 const 右侧没有 `*` ，q 是 `int**` 类型。\n\n**转化公式：**\n\n- `int**` <= `const int**` 错误\n- `const int **` <= `int **` 错误\n\nconst 与二级指针结合的时候，两边必须同时有 const 或没有 const 才能转换；\n\n- `int**` <= `int* const*` 是 const 和一级指针的结合，const 右边修饰的`*`  （等同于 `int *`  <= `const int *`  ）错误的\n- `int* const*` <=`int**` （等同于`const int *` <= `int` ）可以的\n\n**要看 const 右边的 * 决定 const 修饰的是类型**\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\n\nint main()\n{\n  int a = 10;\n  int * p = &a;\n  const int ** q = &p;//error  \n  \n  /*\n  const int * *q = &p; 相当于（*）q 即 p的地址，赋值了一个const int * \n  而p 是int *类型,把常量的地址泄露给普通的指针（p）\n  修改 const int * p = &a;\n  */\n  \n  return 0;\n}\n~~~\n\n### 3. 引用\n\n1. 引用是必须初始化的，指针可以不初始化。\n2. 引用只有一级引用，没有多级引用；指针可以有一级指针，也可以用多级指针。\n3. 定义一个引用变量和定义一个指针变量，其汇编指令是一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的。\n\n引用的错误用法  `int &a = 10;` 由下面的反汇编可以知道，引用的汇编代码第一步是将引用对象的地址拷贝到寄存器中，10是常量；\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\nint main()\n{\n  int a = 10;\n  int * p = &a;\n  int &b = a;\n \n  std::cout  << a << \" \" << b << \" \" << (*p) << std::endl;\n \n  *p = 20;\n  std::cout << a << \" \" << b << \" \" << (*p) << std::endl;\n \n \n  b = 30;\n  std::cout << a << \" \" << b << \" \" << (*p);\n  return 0;\n}\n~~~\n\n输出：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040938550.png)\n\n **反汇编：指针和引用没有区别**\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040939184.png)\n\n`lea eax,[a]`：将 a 的地址拷贝到寄存器 eax 中\n\n`mov dword ptr [p],eax`：将 eax 中的值拷贝到 p 中。\n\n**反汇编中指针和引用拷贝也是没有区别。**\n\n![指针拷贝 - 1](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941767.png)\n![指针拷贝 - 2](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941833.png)\n\n对指针和引用赋值，都是一样的：获取地址，然后赋值。\n\n#### 3.1 引用别名\n\n~~~c++\n#include <iostream>\n#include <typeinfo.h>\n\nint main()\n{\n  int array[5] = {};\n  int * p = array;\n  int(&q)[5] = array;//定义一个引用指向数组:引用即别名  sizeof(q) =  sizeof(array) \n \n  std::cout << sizeof(array) << \"\\n\" << sizeof(p) << \"\\n\" << sizeof(q) << std::endl;//20 5 20\n \n  return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041039869.png)\n\n关于定义一个引用类型，到底需不需要开辟内存空间，我认为是需要的，上面的汇编代码中，引用和指针的汇编是一模一样的；C++ 中只有 const 类型的数据，要求必须初始化。而引用也必须要初始化，所以引用是指针，还应该是 const 修饰的常指针。 一经声明不可改变。 \n\n站在宏观角度，引用也就是别名，所以不开辟看空间。\n\n站在微观的角度，引用至少要保存一个指针，所以一定要开辟空间。站在底层实现的角度，站在 C++ 对于 C 实现包装的角度，引用就是指针。那么既然是指针至少要占用 4 个字节空间。\n\n### 4. 左值引用\n\n左值：有内存地址，有名字，值可以修改；\n\n如 `int a = 10;` `int &b =a;`\n\n`int &c =10;` //错误 20 是右值，20 = 40 是错误的，其值不能修改，没内存，没名字，是一个立即数；\n\n上述代码是无法编译通过的，因为 10 无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：\n\n~~~c++\nconst int &var = 10;\n~~~\n\n使用常引用来引用常量数字 10，因为此刻内存上产生了临时变量保存了 10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：\n\n~~~c++\nconst int temp = 10; \nconst int &var = temp;\n~~~\n\n根据上述分析，得出如下结论：\n\n左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；\n但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被 const 修饰成常量引用了。\n\n那么 C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。\n\n### 5. 右值引用\n\nC++ 对于左值和右值没有标准定义，但是有一个被广泛认同的说法：\n\n- 可以取地址的，有名字的，非临时的就是左值；\n- 不能取地址的，没有名字的，临时的就是右值；\n\n可见立即数，函数返回的值等都是右值；而非匿名对象(包括变量)，函数返回的引用，const 对象等都是左值。\n\n从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及 const 对象)。\n\n1. **`int &&c = 10;`专门用来引用右值类型，指令上，可以自动产生临时量，然后直接引用临时量   c = 1;**\n\n反汇编：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041045338.png)\n\n2. **一个右值引用变量，本身是一个左值,只能用左值引用来引用它；不能用一个右值引用变量来引用一个左值**\n\n~~~c++\nint && a = 1;\na = 10;\nint &e = a;\n~~~\n\n## 5. 深入理解 C++ 的 new 和 delete\n\n**New 的不同使用方式：**\n\n~~~c++\n#include <iostream>\n#include <new>\n\nint main()\n{\n    //1 抛异常new\n    int* p1;\n    try\n    {\n        p1 = new int(2);//分配内存并初始化\n    }\n    catch (const std::bad_alloc& e)//判断是否抛异常\n    {\n\n    }\n\n    //2 不抛异常new\n    int* p2 = new (std::nothrow)int();//不抛异常\n    //3 开辟常量内存\n    const int* p3 = new const int(40);//开辟一个常量\n\n    //4 定位new\n    int data = 0;\n    int* p4 = new(&data) int(50);//在指定地址内存初始化，本身并不开辟内存，只负责初始化\n    delete p1;\n    delete p2;\n    delete p3;\n    delete p4;\n\n    return 0;\n}\n~~~\n\n#### 1. malloc 与 new 的区别\n\n1. malloc 按字节开辟内存的；new 开辟内存时需要指定类型；\n2. malloc 开辟内存返回的都是 `void *` ，new 相当于运算符重载函数，返回值自动转为指定的类型的指针。\n3. malloc 只负责开辟内存空间，new 不仅仅也有 malloc 功能，还可以进行数据的初始化。\n4. malloc 开辟内存失败返回 nullptr 指针；new 抛出的是 bad_alloc 类型的异常。\n5. malloc 开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要`[]`，而数组需要 `[]`并给上元素个数。\n\n#### 2. free 和 delete 的区别：\n\n1. free 不管释放单个元素内存还是数组内存，只需要传入内存的起始地址即可。  \n2. delete 释放单个元素内存，不需要加中括号，但释放数据内存时需要加中括号。  \n3. delete 执行其实有两步，先调用析构，再释放；free 只有一步。\n\n#### 3. 解析\n\n代码：\n\n~~~c++\n#include <iostream>\n\nint main() \n{\n    int* p = new int;\n    delete p;\n    p = nullptr;\n\n    return 0;\n}\n~~~\n\n反汇编：\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041343548.png)\n\n**new 与 delete 其本质也是函数的调用：运算符重载 new  delete**\n\n~~~c++\nnew -> operator new\ndelete -> operator delete\n~~~\n\n#### 4. 实现\n\n~~~c++\n#include <iostream>\nusing namespace std;\n\n// new：\n// 先调用 operator 开辟内存空间\n// 然后调用对象的构造函数\n// operator new 实现\nvoid* operator new(size_t size)\n{\n    // 开辟\n    void* p = malloc(size);\n    // 判断\n    if (p == nullptr)\n    {\n        throw bad_alloc();\n    }\n\n    cout << \"operator new addr:\" << p << endl;\n\n    return p;\n}\n\n// operator new[] 实现\nvoid* operator new[](size_t size)\n{\n    // 开辟\n    void* p = malloc(size);\n    // 判断\n    if (p == nullptr)\n    {\n        throw bad_alloc();\n    }\n\n    cout << \"operator new[] addr:\" << p << endl;\n\n    return p;\n}\n\n// delete：\n// 调用 p 指向对象的析构函数\n// 再调用 operator delete 释放空间\n// operator delete 实现\nvoid operator delete(void* ptr)\n{\n    cout << \"operator delete addr: \" << ptr << endl;\n    free(ptr);\n}\n\n// operator delete[] 实现\nvoid operator delete[](void* ptr)\n{\n    cout << \"operator delete[] addr: \" << ptr << endl;\n    free(ptr);\n}\n\n// 使用\nint main()\n{\n    int* p = new int(5);\n    delete p;\n    p = nullptr;\n\n    p = new int[5];\n    delete[] p;\n    p = nullptr;\n\n    return 0;\n}\n~~~\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041355889.png)\n\n#### 5. new 和delete 能够混用吗？\n\n**C++为什么区分单个元素和数组的内存分配和释放呢？**\n\n**情况1：int类型下将其混用**\n\n```c++\nint *p = new int;\ndelete[]p;\n \nint *q = new int[10];\ndelete q;\n```\n\n能够混用。对于整型来说，没有构造函数与析构函数，针对于 int 类型，new 与 delete 功能只剩下 malloc 与 free 功能，可以将其混用。\n\n**情况2：类类型下将其混用**\n\n~~~c++\nclass Test\n{\npublic:\n\tTest(int data = 10):ptr(new int(data))\n\t{\n\t\tcout << \"Test()\" << endl;\n\t}\n\t~Test()\n\t{\n\t\tdelete ptr;\n\t\tcout << \"~Test()\" << endl;\n\t}\nprivate:\n\tint *ptr;\n};\n~~~\n\n- **单个元素与 `delete[]` 混用：**\n\n~~~c++\nTest *p1 = new Test();\ndelete[]p1;\n~~~\n\n![报错程序](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041406079.png)\n\n程序崩溃。\n\n- **数组与 delete 进行混用**\n\n~~~c++\nTest *p2 = new Test[5];\ndelete p2;\n~~~\n\n程序崩溃。\n\n**分析：**\n\n正常情况下，每一个 Test 对象有一个整型成员变量，这里分配了 5 个 Test 对象。delete 时先调用析构函数，this 指针将正确的对象的地址传入析构函数中，加了 `[]` 表示有好几个对象，有一个数组其中每一个对象都要进行析构。但 delete 真正执行指令时，底层是 malloc 按字节开辟，并不知道是否开辟了 5 个 Test 对象的数组，因此还要再多开辟一个 4 字节来存储对象的个数，假设它的地址是 `0x100`；但是 new 完之后 p2 返回的地址是 `0x104` 地址，当我们执行 `delete[]` 时，会到 4 字节来取一下对象的个数，将知道了是 5 个并将这块内存平均分为 5 份，将其每一份对象起始地址传给相应的析构函数，正常析构，最后将 `0x100` 开始的 4 字节也释放。\n\n而 p2 出错是给用户返回的存对象开始的起始地址，`delete p2` 认为 p2 只是指向了一个对象，只将 `Test[0]` 对象析构，直接从 `0x104 free(p2)`，但底层实际是从 `0x100` 开辟的，因此崩溃。\n\n而 p1 出错：p1 只是单个元素，从 `0x104` 开始开辟内存，但是 `delete[] p1`，里面并没有那么多元素，最后还释放了 4 个字节的存储对象个数的内存(即从 `0x100` 释放)因此崩溃。\n\n![image.png](https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041405849.png)\n\n","slug":"02.C++ 基础部分/02.C++ 基础精讲","published":1,"date":"2023-08-03T07:05:00.959Z","updated":"2023-08-04T06:06:55.953Z","_id":"clkuty8ua0000ncpkgjf774pk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本节分为 5 大类：</p>\n<ol>\n<li>形参带默认值的函数</li>\n<li>内联函数inline</li>\n<li>详解函数重载</li>\n<li>const 深入应用</li>\n<li>深入理解 C++ 的 new 和 delete</li>\n</ol>\n<h2 id=\"1-形参带默认值的函数\"><a href=\"#1-形参带默认值的函数\" class=\"headerlink\" title=\"1. 形参带默认值的函数\"></a>1. 形参带默认值的函数</h2><p>在 C++ 中，声明一个函数时，可以为函数的参数指定默认值。当调用有默认参数值的函数时，可以不写出参数，这时就相当于以默认值作为参数调用该函数。</p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>在有函数声明（原型）时，默认参数可以放在函数声明或定义中，但是只能放在二者之一。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f = <span class=\"hljs-number\">1.0</span>)</span></span>; <span class=\"hljs-comment\">//函数声明</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f)</span>  <span class=\"hljs-comment\">//函数定义</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">// ....  </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>没有函数（原型）时，默认参数在函数定义时指定。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//没有 函数声明</span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f = <span class=\"hljs-number\">1.0</span>)</span>  <span class=\"hljs-comment\">//函数定义</span></span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.</li>\n</ol>\n<p>就是说，<strong>函数声明时，必须按照从右向左的顺序，依次给与默认值。</strong></p>\n<p>原因：</p>\n<p>函数形参的压栈过程是从右向左。详细请看：[[01.理解 C++ 内核]] 的 <strong>从指令角度掌握函数调用堆栈详细过程。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">f</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1, <span class=\"hljs-type\">int</span> i2 = <span class=\"hljs-number\">2</span>, <span class=\"hljs-type\">int</span> i3 = <span class=\"hljs-number\">3</span>)</span></span>;     <span class=\"hljs-comment\">// 正确</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">g</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1, <span class=\"hljs-type\">int</span> i2 = <span class=\"hljs-number\">2</span>, <span class=\"hljs-type\">int</span> i3)</span></span>;         <span class=\"hljs-comment\">// 错误, i3未指定默认值</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">h</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1 = <span class=\"hljs-number\">1</span>, <span class=\"hljs-type\">int</span> i2, <span class=\"hljs-type\">int</span> i3 = <span class=\"hljs-number\">3</span>)</span></span>;     <span class=\"hljs-comment\">// 错误, i2未指定默认值</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>普通函数和形参带默认值函数对比：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>, <span class=\"hljs-type\">int</span> b  = <span class=\"hljs-number\">10</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>  temp = a + b;<br>  <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br> <br>  <span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(a, b);<br> <br>  ret = <span class=\"hljs-built_in\">sum</span>(a);<span class=\"hljs-comment\">//b 使用默认值</span><br> <br>  ret = <span class=\"hljs-built_in\">sum</span>();<span class=\"hljs-comment\">//都使用默认值</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031520415.png\" alt=\"image.png\"></p>\n<p>对比1，2 发现：</p>\n<p>2 中 b 使用默认值，因此将 b 的值拷贝到寄存器后压栈，而是直接将常量0ah(10) 压栈，减少了此寄存器拷贝；</p>\n<p>同理有3，使用默认值是：调用函数减少了 mov 指令。</p>\n<h2 id=\"2-内联函数-inline\"><a href=\"#2-内联函数-inline\" class=\"headerlink\" title=\"2. 内联函数 inline\"></a>2. 内联函数 inline</h2><p><strong>内联函数与普通函数的区别？</strong></p>\n<ol>\n<li>内联函数；在编译过程中，就没有函数调用开销。在函数的调用点直接将函数的代码进行展开处理</li>\n</ol>\n<p>[[01.理解 C++ 内核]] 中的 <strong>从指令角度掌握函数调用堆栈详细过程</strong> 知道，在调用函数的过程中：</p>\n<p>（1）将函数实数从右向左压栈<br>（2）call指令：<br>        将下一行要执行的代码地址入栈<br>        跳转到函数入口：首先push ebp,将栈底指针入栈，然后给函数开辟栈帧函数执行结束后，栈帧回退。</p>\n<p>在函数调用中，有大量的函数调用开销。如果封装的函数内容简单，函数调用的开销大于函数指令的执行时间，那么就可以使用内联函数（需要大量调用，且指令简单）。在调用点展开内联函数指令</p>\n<ol start=\"2\">\n<li><p>内联函数不在生成相应的函数符号</p>\n</li>\n<li><p>inline 只是建议编译器把这个函数处理成内联函数，具体会由编译器处理觉得是否展开成内联函数。</p>\n</li>\n</ol>\n<p>注意：</p>\n<p>（1）如果用vs调试Debug，不会将函数展开成内联.release版本可以。</p>\n<h2 id=\"3-详解函数重载\"><a href=\"#3-详解函数重载\" class=\"headerlink\" title=\"3. 详解函数重载\"></a>3. 详解函数重载</h2><p><strong>函数重载</strong>：一组函数，其中函数名相同，参数列表的个数或者类型不同，那么这一组函数就称作函数重载。函数重载发生在编译时期。</p>\n<p>（1）函数重载与函数返回值无关，因为在产生符号时没有返回值<br>（2） 函数重载需要在同一个作用域<br>（3）const 或者 volatile 的时候，是如何影响形参的</p>\n<p><strong>C++ 支持函数重载，而 C 则不支持：</strong></p>\n<p>编译器产生的函数符号规则不同：</p>\n<ul>\n<li>C++ 代码：函数符号包含了函数名和参数列表</li>\n<li>C 代码：函数符号只包含了函数名。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<p>** <strong>函数重载需要在同一个作用域下</strong>。**</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b)</span></span>;<br>\t<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;adf&quot;</span>, <span class=\"hljs-string\">&quot;wew&quot;</span>);<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031530000.png\" alt=\"image.png\"></p>\n<p>由于在局部作用域声明了新的 compare，导致无法重载外部作用域的 compare。</p>\n<p><strong>const int 和 int 的重载：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span> </span>&#123;&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a)</span> </span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// ...</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031534968.png\" alt=\"image.png\"></p>\n<p>原因：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">10</span>;<br><br>\tstd::cout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(a).<span class=\"hljs-built_in\">name</span>() &lt;&lt; std::endl;<br>\tstd::cout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(b).<span class=\"hljs-built_in\">name</span>() &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031536065.png\" alt=\"image.png\"></p>\n<p>const int 和 int 在编译器看来都是 int 类型 ，无法完成重载。</p>\n<h3 id=\"3-1-C-和-C-语言如何相互调用\"><a href=\"#3-1-C-和-C-语言如何相互调用\" class=\"headerlink\" title=\"3.1 C++ 和 C 语言如何相互调用\"></a>3.1 C++ 和 C 语言如何相互调用</h3><p>由于 C++ 和 C 语言的编译器生成的函数符号不同，在 C++ 使用 c 语言需要使用exten “C”{};</p>\n<h4 id=\"1-C-调用-C\"><a href=\"#1-C-调用-C\" class=\"headerlink\" title=\"1. C++ 调用 C\"></a>1. C++ 调用 C</h4><p>对于c++，由于c++的编译器对c语言兼容，因此在c++中调用c语言编写的函数，只需要在函数声明前面加上关键字<code>extern &quot;C&quot;</code>，表示采用类c语言的方式解析函数符号。例子如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// add.h</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __ADD_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __ADD_H__</span><br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><br><span class=\"hljs-comment\">// add.c</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-comment\">// main.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;add.h&quot;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 + 1 = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">add</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在例子中，<code>main.cpp</code> 为<code>c++</code> 代码，<code>add.c</code> 为 c 语言代码，当 c++ 编译器识别到<code>extern &quot;C&quot;</code> 关键字时，会去寻找 <code>_add_</code> 函数的实现而不是寻找类似<code>_int_add_int_int_</code> 这样带参数信息的函数实现。</p>\n<h4 id=\"2-C-调用-C\"><a href=\"#2-C-调用-C\" class=\"headerlink\" title=\"2. C 调用 C++\"></a>2. C 调用 C++</h4><p>c 语言调用 c++ 代码却并不容易，原因是 c 语言并不兼容 c++。就算 c 语言可以调用 c++，也会因为无法识别 c++ 新定义的符号而编译报错。因此，为了实现 c 语言调用 c++ 函数，必须实现以下两个步骤：</p>\n<ol>\n<li>将 c++ 相关函数封装为静态库或动态库（因为调用库函数时编译器并不知道里面执行的是什么语言）；</li>\n<li>对外提供遵循类 c 语言规约的接口函数。例子如下所示：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// printNum.h</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __PRINTNUM_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __PRINTNUM_H__</span><br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><span class=\"hljs-comment\">// printNum.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;printNum.h&quot;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; &lt;&lt; <span class=\"hljs-string\">&quot;num is &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class=\"hljs-comment\">// main.c</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-built_in\">printNum</span>(<span class=\"hljs-number\">5</span>);<br></code></pre></td></tr></table></figure>\n\n<p>通过将 <code>_cout_</code>函数封装为类 c 语言规约的接口函数，使得 <code>main.c</code> 中可以成功调用 c++ 函数 <code>_printNum_</code> 。值得注意的是，<code>main.c</code> 不可以直接引入 <code>printNum.h</code>，因为 c 语言不能识别 <code>extern &quot;C&quot;</code> 关键字。可以利用 c++ 预定义宏实现头文件的改写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __PRINTNUM_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __PRINTNUM_H__</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __cplusplus</span><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> &#123; <br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __cplusplus</span><br>&#125;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><ol>\n<li>c 语言与 c++ 的相互调用可以通过 <code>extern &quot;C&quot;</code> 关键字实现</li>\n<li>c++ 中调用 c 代码，只须在 c++ 中为 c 代码函数声明之前加上 <code>extern &quot;C&quot;</code></li>\n<li>c 语言调用 c++ 代码，则需要将 c++ 代码编译成静态库或动态库，然后对外提供用 <code>extern &quot;C&quot;</code> 声明的类 c 封装函数</li>\n</ol>\n<h2 id=\"4-const-深入应用\"><a href=\"#4-const-深入应用\" class=\"headerlink\" title=\"4. const 深入应用\"></a>4. const 深入应用</h2><p><strong>const 作用：</strong></p>\n<ol>\n<li>修饰变量，说明该变量不可以被改变；</li>\n<li>修饰指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）；</li>\n<li>修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；</li>\n<li>修饰成员函数，说明该成员函数内不能修改成员变量。</li>\n</ol>\n<p><strong>const 的指针与引用：</strong></p>\n<ul>\n<li>指针<ul>\n<li>指向常量的指针（pointer to const）</li>\n<li>自身是常量的指针（常量指针，const pointer）</li>\n</ul>\n</li>\n<li>引用<ul>\n<li>指向常量的引用（reference to const）</li>\n<li>没有 const reference，因为引用只是对象的别名，引用不是对象，不能用 const 修饰</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 类</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span><br>&#123;<br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a;                <span class=\"hljs-comment\">// 常对象成员，可以使用初始化列表或者类内初始化</span><br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 构造函数</span><br>    <span class=\"hljs-built_in\">A</span>() : <span class=\"hljs-built_in\">a</span>(<span class=\"hljs-number\">0</span>) &#123; &#125;;<br>    <span class=\"hljs-built_in\">A</span>(<span class=\"hljs-type\">int</span> x) : <span class=\"hljs-built_in\">a</span>(x) &#123; &#125;;        <span class=\"hljs-comment\">// 初始化列表</span><br><br>    <span class=\"hljs-comment\">// const可用于对重载函数的区分</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span></span>;             <span class=\"hljs-comment\">// 普通成员函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span></span>;       <span class=\"hljs-comment\">// 常成员函数，不得修改类中的任何数据成员的值</span><br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 对象</span><br>    A b;                        <span class=\"hljs-comment\">// 普通对象，可以调用全部成员函数</span><br>    <span class=\"hljs-type\">const</span> A a;                  <span class=\"hljs-comment\">// 常对象，只能调用常成员函数</span><br>    <span class=\"hljs-type\">const</span> A *p = &amp;a;            <span class=\"hljs-comment\">// 指针变量，指向常对象</span><br>    <span class=\"hljs-type\">const</span> A &amp;q = a;             <span class=\"hljs-comment\">// 指向常对象的引用</span><br><br>    <span class=\"hljs-comment\">// 指针</span><br>    <span class=\"hljs-type\">char</span> greeting[] = <span class=\"hljs-string\">&quot;Hello&quot;</span>;<br>    <span class=\"hljs-type\">char</span>* p1 = greeting;                <span class=\"hljs-comment\">// 指针变量，指向字符数组变量</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* p2 = greeting;          <span class=\"hljs-comment\">// 指针变量，指向字符数组常量（const 后面是 char，说明指向的字符（char）不可改变）</span><br>    <span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> p3 = greeting;          <span class=\"hljs-comment\">// 自身是常量的指针，指向字符数组变量（const 后面是 p3，说明 p3 指针自身不可改变）</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> p4 = greeting;    <span class=\"hljs-comment\">// 自身是常量的指针，指向字符数组常量</span><br>&#125;<br><br><span class=\"hljs-comment\">// 函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> Var)</span></span>;           <span class=\"hljs-comment\">// 传递过来的参数在函数内不可变</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* Var)</span></span>;         <span class=\"hljs-comment\">// 参数指针所指内容为常量</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> Var)</span></span>;         <span class=\"hljs-comment\">// 参数指针为常量</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function4</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>&amp; Var)</span></span>;          <span class=\"hljs-comment\">// 引用参数在函数内为常量</span><br><br><span class=\"hljs-comment\">// 函数返回值</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">function5</span><span class=\"hljs-params\">()</span></span>;      <span class=\"hljs-comment\">// 返回一个常数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>* <span class=\"hljs-title\">function6</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">// 返回一个指向常量的指针变量，使用：const int *p = function6();</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span>* <span class=\"hljs-type\">const</span> <span class=\"hljs-title\">function7</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">// 返回一个指向变量的常指针，使用：int* const p = function7();</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>宏定义 <code>#define</code> 和 const 常量:</strong></p>\n<table>\n<thead>\n<tr>\n<th>宏定义 #define</th>\n<th>const 常量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宏定义，相当于字符替换</td>\n<td>常量声明</td>\n</tr>\n<tr>\n<td>预处理器处理</td>\n<td>编译器处理</td>\n</tr>\n<tr>\n<td>无类型安全检查</td>\n<td>有类型安全检查</td>\n</tr>\n<tr>\n<td>不分配内存</td>\n<td>要分配内存</td>\n</tr>\n<tr>\n<td>存储在代码段</td>\n<td>存储在数据段</td>\n</tr>\n<tr>\n<td>可通过 <code>#undef</code> 取消</td>\n<td>不可取消</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-C-和-C-的-const-区别\"><a href=\"#1-C-和-C-的-const-区别\" class=\"headerlink\" title=\"1. C++ 和 C 的 const 区别\"></a>1. C++ 和 C 的 const 区别</h3><ul>\n<li><strong>c语言中，const修饰的值，可以不用初始化，不叫常量，叫做常变量；</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040846520.png\" alt=\"image.png\"></p>\n<p>最终输出为：30、30、30</p>\n<ul>\n<li><strong>C++中： const 定义的类型必须初始化，否则报错，c 语言中可以不初始化</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040849898.png\" alt=\"image.png\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// const int b;</span><br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-comment\">// a 常量，可以定义数组长度</span><br>\t<span class=\"hljs-type\">int</span> array[a] = &#123;&#125;;<br><br>\t<span class=\"hljs-type\">int</span>* p = (<span class=\"hljs-type\">int</span>*)&amp;a;<br>\t*p = <span class=\"hljs-number\">30</span>;<br><br>\tcout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *p &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *(&amp;a) &lt;&lt; endl;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040851384.png\" alt=\"image.png\"></p>\n<p>原因：<strong>const 的编译方式不同，C 语言中，const 就是当作一个变量来编译生成指令的。C++ 中，如果 const 赋值是一个立即数，所有出现 const 常量名字的地方，都被常量的初始化所替换。</strong></p>\n<h4 id=\"1-1-Debug-调试\"><a href=\"#1-1-Debug-调试\" class=\"headerlink\" title=\"1.1 Debug 调试\"></a>1.1 Debug 调试</h4><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040857151.png\" alt=\"image.png\"><br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040900294.png\" alt=\"image.png\"></p>\n<p>执行完第9行后 a 的内存中的值变成 1e 也即 30；但是本来出现 a 的地方在编译期已经被替换成 10，因此输出 a 依然是 10。</p>\n<p><strong>如果不是立即数，则是常变量</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = b;<br><br>\t<span class=\"hljs-comment\">// 报错，a是常变量</span><br>\t<span class=\"hljs-comment\">//int array[a] = &#123;&#125;;</span><br><br>\t<span class=\"hljs-type\">int</span>* p = (<span class=\"hljs-type\">int</span>*)&amp;a;<br>\t*p = <span class=\"hljs-number\">30</span>;<br><br>\tcout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *p &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *(&amp;a); <span class=\"hljs-comment\">// 30 30 30</span><br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-const-与指针\"><a href=\"#2-const-与指针\" class=\"headerlink\" title=\"2. const 与指针\"></a>2. const 与指针</h3><p>const 修饰的量常出现的错误：</p>\n<p><strong>（1）常量不能再作为左值</strong><br><strong>（2）不能把常量的地址泄露给一个普通的指针或者普通的引用变量</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040908264.png\" alt=\"image.png\"></p>\n<h4 id=\"2-1-const-和-一级指针\"><a href=\"#2-1-const-和-一级指针\" class=\"headerlink\" title=\"2.1 const 和 一级指针\"></a>2.1 const 和 一级指针</h4><p><strong>const 如果右边没有指针*，则const 是不参与类型的</strong></p>\n<p><strong>C++的语言规范：就近原则 const 修饰的是离它最近的类型</strong></p>\n<ol>\n<li><code>const int* p</code>；离 const 最近的类型是 int，所以 const 修饰的是 <code>*p</code> ，所以 <code>*p</code> 无法修改值；可以指向任意 int 的内存，但是不能通过指针简介修改内存的值。</li>\n<li><code>int const* p</code>；<code>*</code> 不是类型，离 const 最近的类型为 int，<code>*p</code> 无法修改，同（1）</li>\n<li><code>int* const p</code>；离 const 最近的类型为（int*），const 修饰的是 p，所以不能改变 p 指向的地址，但是可以修改 p 指向的地址的内容。</li>\n<li><code>const int* const p</code>；不能修改 p 指向的地址和值。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span> ;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> * p = &amp;a;<span class=\"hljs-comment\">//p指向的地址的内容不能修改</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重点：</p>\n<p><strong>const 如果右边没有指针 <code>*</code>，则 const 是不参与类型的，仅表示 const 修饰的是一个常量，不能作为左值。</strong></p>\n<p><strong>const 类型转化公式：</strong></p>\n<ul>\n<li><code>const int*</code>  &lt;&#x3D; <code>int*</code> 可以转换</li>\n<li><code>int*</code> &lt;&#x3D; <code>const int*</code> 错误</li>\n</ul>\n</blockquote>\n<p>示例1：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span>* p = <span class=\"hljs-literal\">nullptr</span>;<br>\t<span class=\"hljs-type\">int</span>* <span class=\"hljs-type\">const</span> p1 = <span class=\"hljs-literal\">nullptr</span>;<br><br>\tcout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(p).<span class=\"hljs-built_in\">name</span>() &lt;&lt; endl;<br>\tcout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(p1).<span class=\"hljs-built_in\">name</span>() &lt;&lt; endl;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040921787.png\"></p>\n<p>示例2：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> *p1= &amp;a;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *p2 = &amp;a;<span class=\"hljs-comment\">// const int * &lt;= int *</span><br><span class=\"hljs-type\">int</span> *<span class=\"hljs-type\">const</span> p3 = &amp;a;<span class=\"hljs-comment\">// int * &lt;= int *</span><br><span class=\"hljs-type\">int</span> *p4 = p3;<span class=\"hljs-comment\">//p3是int * 类型，因此没有问题</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-const-和-二级指针\"><a href=\"#2-2-const-和-二级指针\" class=\"headerlink\" title=\"2.2 const 和 二级指针\"></a>2.2 const 和 二级指针</h4><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040928871.png\" alt=\"image.png\"></p>\n<ul>\n<li><code>const int** q</code>；离 const 最近的类型为 int，修饰的是 <code>**q</code>。</li>\n<li><code>int* const* q</code>；离 const 最近的类型为 <code>int*</code>，修饰的是 <code>*q</code>。</li>\n<li><code>int** const q</code>；离 const 最近的类型为 <code>int**</code>，修饰的是 <code>q</code>，同时 const 右侧没有 <code>*</code> ，q 是 <code>int**</code> 类型。</li>\n</ul>\n<p><strong>转化公式：</strong></p>\n<ul>\n<li><code>int**</code> &lt;&#x3D; <code>const int**</code> 错误</li>\n<li><code>const int **</code> &lt;&#x3D; <code>int **</code> 错误</li>\n</ul>\n<p>const 与二级指针结合的时候，两边必须同时有 const 或没有 const 才能转换；</p>\n<ul>\n<li><code>int**</code> &lt;&#x3D; <code>int* const*</code> 是 const 和一级指针的结合，const 右边修饰的<code>*</code>  （等同于 <code>int *</code>  &lt;&#x3D; <code>const int *</code>  ）错误的</li>\n<li><code>int* const*</code> &lt;&#x3D;<code>int**</code> （等同于<code>const int *</code> &lt;&#x3D; <code>int</code> ）可以的</li>\n</ul>\n<p><strong>要看 const 右边的 * 决定 const 修饰的是类型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> * p = &amp;a;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> ** q = &amp;p;<span class=\"hljs-comment\">//error  </span><br>  <br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  const int * *q = &amp;p; 相当于（*）q 即 p的地址，赋值了一个const int * </span><br><span class=\"hljs-comment\">  而p 是int *类型,把常量的地址泄露给普通的指针（p）</span><br><span class=\"hljs-comment\">  修改 const int * p = &amp;a;</span><br><span class=\"hljs-comment\">  */</span><br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3. 引用\"></a>3. 引用</h3><ol>\n<li>引用是必须初始化的，指针可以不初始化。</li>\n<li>引用只有一级引用，没有多级引用；指针可以有一级指针，也可以用多级指针。</li>\n<li>定义一个引用变量和定义一个指针变量，其汇编指令是一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的。</li>\n</ol>\n<p>引用的错误用法  <code>int &amp;a = 10;</code> 由下面的反汇编可以知道，引用的汇编代码第一步是将引用对象的地址拷贝到寄存器中，10是常量；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> * p = &amp;a;<br>  <span class=\"hljs-type\">int</span> &amp;b = a;<br> <br>  std::cout  &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p) &lt;&lt; std::endl;<br> <br>  *p = <span class=\"hljs-number\">20</span>;<br>  std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p) &lt;&lt; std::endl;<br> <br> <br>  b = <span class=\"hljs-number\">30</span>;<br>  std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040938550.png\" alt=\"image.png\"></p>\n<p> <strong>反汇编：指针和引用没有区别</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040939184.png\" alt=\"image.png\"></p>\n<p><code>lea eax,[a]</code>：将 a 的地址拷贝到寄存器 eax 中</p>\n<p><code>mov dword ptr [p],eax</code>：将 eax 中的值拷贝到 p 中。</p>\n<p><strong>反汇编中指针和引用拷贝也是没有区别。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941767.png\" alt=\"指针拷贝 - 1\"><br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941833.png\" alt=\"指针拷贝 - 2\"></p>\n<p>对指针和引用赋值，都是一样的：获取地址，然后赋值。</p>\n<h4 id=\"3-1-引用别名\"><a href=\"#3-1-引用别名\" class=\"headerlink\" title=\"3.1 引用别名\"></a>3.1 引用别名</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> array[<span class=\"hljs-number\">5</span>] = &#123;&#125;;<br>  <span class=\"hljs-type\">int</span> * p = array;<br>  <span class=\"hljs-built_in\">int</span>(&amp;q)[<span class=\"hljs-number\">5</span>] = array;<span class=\"hljs-comment\">//定义一个引用指向数组:引用即别名  sizeof(q) =  sizeof(array) </span><br> <br>  std::cout &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(array) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(p) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(q) &lt;&lt; std::endl;<span class=\"hljs-comment\">//20 5 20</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041039869.png\" alt=\"image.png\"></p>\n<p>关于定义一个引用类型，到底需不需要开辟内存空间，我认为是需要的，上面的汇编代码中，引用和指针的汇编是一模一样的；C++ 中只有 const 类型的数据，要求必须初始化。而引用也必须要初始化，所以引用是指针，还应该是 const 修饰的常指针。 一经声明不可改变。 </p>\n<p>站在宏观角度，引用也就是别名，所以不开辟看空间。</p>\n<p>站在微观的角度，引用至少要保存一个指针，所以一定要开辟空间。站在底层实现的角度，站在 C++ 对于 C 实现包装的角度，引用就是指针。那么既然是指针至少要占用 4 个字节空间。</p>\n<h3 id=\"4-左值引用\"><a href=\"#4-左值引用\" class=\"headerlink\" title=\"4. 左值引用\"></a>4. 左值引用</h3><p>左值：有内存地址，有名字，值可以修改；</p>\n<p>如 <code>int a = 10;</code> <code>int &amp;b =a;</code></p>\n<p><code>int &amp;c =10;</code> &#x2F;&#x2F;错误 20 是右值，20 &#x3D; 40 是错误的，其值不能修改，没内存，没名字，是一个立即数；</p>\n<p>上述代码是无法编译通过的，因为 10 无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;var = <span class=\"hljs-number\">10</span>;<br></code></pre></td></tr></table></figure>\n\n<p>使用常引用来引用常量数字 10，因为此刻内存上产生了临时变量保存了 10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">10</span>; <br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;var = temp;<br></code></pre></td></tr></table></figure>\n\n<p>根据上述分析，得出如下结论：</p>\n<p>左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；<br>但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被 const 修饰成常量引用了。</p>\n<p>那么 C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。</p>\n<h3 id=\"5-右值引用\"><a href=\"#5-右值引用\" class=\"headerlink\" title=\"5. 右值引用\"></a>5. 右值引用</h3><p>C++ 对于左值和右值没有标准定义，但是有一个被广泛认同的说法：</p>\n<ul>\n<li>可以取地址的，有名字的，非临时的就是左值；</li>\n<li>不能取地址的，没有名字的，临时的就是右值；</li>\n</ul>\n<p>可见立即数，函数返回的值等都是右值；而非匿名对象(包括变量)，函数返回的引用，const 对象等都是左值。</p>\n<p>从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及 const 对象)。</p>\n<ol>\n<li><strong><code>int &amp;&amp;c = 10;</code>专门用来引用右值类型，指令上，可以自动产生临时量，然后直接引用临时量   c &#x3D; 1;</strong></li>\n</ol>\n<p>反汇编：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041045338.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li><strong>一个右值引用变量，本身是一个左值,只能用左值引用来引用它；不能用一个右值引用变量来引用一个左值</strong></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> &amp;&amp; a = <span class=\"hljs-number\">1</span>;<br>a = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> &amp;e = a;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-深入理解-C-的-new-和-delete\"><a href=\"#5-深入理解-C-的-new-和-delete\" class=\"headerlink\" title=\"5. 深入理解 C++ 的 new 和 delete\"></a>5. 深入理解 C++ 的 new 和 delete</h2><p><strong>New 的不同使用方式：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;new&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//1 抛异常new</span><br>    <span class=\"hljs-type\">int</span>* p1;<br>    <span class=\"hljs-keyword\">try</span><br>    &#123;<br>        p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//分配内存并初始化</span><br>    &#125;<br>    <span class=\"hljs-built_in\">catch</span> (<span class=\"hljs-type\">const</span> std::bad_alloc&amp; e)<span class=\"hljs-comment\">//判断是否抛异常</span><br>    &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">//2 不抛异常new</span><br>    <span class=\"hljs-type\">int</span>* p2 = <span class=\"hljs-built_in\">new</span> (std::nothrow)<span class=\"hljs-built_in\">int</span>();<span class=\"hljs-comment\">//不抛异常</span><br>    <span class=\"hljs-comment\">//3 开辟常量内存</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>* p3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">40</span>);<span class=\"hljs-comment\">//开辟一个常量</span><br><br>    <span class=\"hljs-comment\">//4 定位new</span><br>    <span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span>* p4 = <span class=\"hljs-built_in\">new</span>(&amp;data) <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">50</span>);<span class=\"hljs-comment\">//在指定地址内存初始化，本身并不开辟内存，只负责初始化</span><br>    <span class=\"hljs-keyword\">delete</span> p1;<br>    <span class=\"hljs-keyword\">delete</span> p2;<br>    <span class=\"hljs-keyword\">delete</span> p3;<br>    <span class=\"hljs-keyword\">delete</span> p4;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-malloc-与-new-的区别\"><a href=\"#1-malloc-与-new-的区别\" class=\"headerlink\" title=\"1. malloc 与 new 的区别\"></a>1. malloc 与 new 的区别</h4><ol>\n<li>malloc 按字节开辟内存的；new 开辟内存时需要指定类型；</li>\n<li>malloc 开辟内存返回的都是 <code>void *</code> ，new 相当于运算符重载函数，返回值自动转为指定的类型的指针。</li>\n<li>malloc 只负责开辟内存空间，new 不仅仅也有 malloc 功能，还可以进行数据的初始化。</li>\n<li>malloc 开辟内存失败返回 nullptr 指针；new 抛出的是 bad_alloc 类型的异常。</li>\n<li>malloc 开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要<code>[]</code>，而数组需要 <code>[]</code>并给上元素个数。</li>\n</ol>\n<h4 id=\"2-free-和-delete-的区别：\"><a href=\"#2-free-和-delete-的区别：\" class=\"headerlink\" title=\"2. free 和 delete 的区别：\"></a>2. free 和 delete 的区别：</h4><ol>\n<li>free 不管释放单个元素内存还是数组内存，只需要传入内存的起始地址即可。  </li>\n<li>delete 释放单个元素内存，不需要加中括号，但释放数据内存时需要加中括号。  </li>\n<li>delete 执行其实有两步，先调用析构，再释放；free 只有一步。</li>\n</ol>\n<h4 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3. 解析\"></a>3. 解析</h4><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>;<br>    <span class=\"hljs-keyword\">delete</span> p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反汇编：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041343548.png\" alt=\"image.png\"></p>\n<p><strong>new 与 delete 其本质也是函数的调用：运算符重载 new  delete</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">new</span> -&gt; <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">new</span><br><span class=\"hljs-keyword\">delete</span> -&gt; <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">delete</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-实现\"><a href=\"#4-实现\" class=\"headerlink\" title=\"4. 实现\"></a>4. 实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">// new：</span><br><span class=\"hljs-comment\">// 先调用 operator 开辟内存空间</span><br><span class=\"hljs-comment\">// 然后调用对象的构造函数</span><br><span class=\"hljs-comment\">// operator new 实现</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 开辟</span><br>    <span class=\"hljs-type\">void</span>* p = <span class=\"hljs-built_in\">malloc</span>(size);<br>    <span class=\"hljs-comment\">// 判断</span><br>    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-literal\">nullptr</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">bad_alloc</span>();<br>    &#125;<br><br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator new addr:&quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">// operator new[] 实现</span><br><span class=\"hljs-type\">void</span>* <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">new</span>[](<span class=\"hljs-type\">size_t</span> size)<br>&#123;<br>    <span class=\"hljs-comment\">// 开辟</span><br>    <span class=\"hljs-type\">void</span>* p = <span class=\"hljs-built_in\">malloc</span>(size);<br>    <span class=\"hljs-comment\">// 判断</span><br>    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-literal\">nullptr</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">bad_alloc</span>();<br>    &#125;<br><br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator new[] addr:&quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">// delete：</span><br><span class=\"hljs-comment\">// 调用 p 指向对象的析构函数</span><br><span class=\"hljs-comment\">// 再调用 operator delete 释放空间</span><br><span class=\"hljs-comment\">// operator delete 实现</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>* ptr)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator delete addr: &quot;</span> &lt;&lt; ptr &lt;&lt; endl;<br>    <span class=\"hljs-built_in\">free</span>(ptr);<br>&#125;<br><br><span class=\"hljs-comment\">// operator delete[] 实现</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">delete</span>[](<span class=\"hljs-type\">void</span>* ptr)<br>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator delete[] addr: &quot;</span> &lt;&lt; ptr &lt;&lt; endl;<br>    <span class=\"hljs-built_in\">free</span>(ptr);<br>&#125;<br><br><span class=\"hljs-comment\">// 使用</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-keyword\">delete</span> p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">delete</span>[] p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041355889.png\" alt=\"image.png\"></p>\n<h4 id=\"5-new-和delete-能够混用吗？\"><a href=\"#5-new-和delete-能够混用吗？\" class=\"headerlink\" title=\"5. new 和delete 能够混用吗？\"></a>5. new 和delete 能够混用吗？</h4><p><strong>C++为什么区分单个元素和数组的内存分配和释放呢？</strong></p>\n<p><strong>情况1：int类型下将其混用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>;<br><span class=\"hljs-keyword\">delete</span>[]p;<br> <br><span class=\"hljs-type\">int</span> *q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">10</span>];<br><span class=\"hljs-keyword\">delete</span> q;<br></code></pre></td></tr></table></figure>\n\n<p>能够混用。对于整型来说，没有构造函数与析构函数，针对于 int 类型，new 与 delete 功能只剩下 malloc 与 free 功能，可以将其混用。</p>\n<p><strong>情况2：类类型下将其混用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">Test</span>(<span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">10</span>):<span class=\"hljs-built_in\">ptr</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(data))<br>\t&#123;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Test()&quot;</span> &lt;&lt; endl;<br>\t&#125;<br>\t~<span class=\"hljs-built_in\">Test</span>()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">delete</span> ptr;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;~Test()&quot;</span> &lt;&lt; endl;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-type\">int</span> *ptr;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>单个元素与 <code>delete[]</code> 混用：</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Test *p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Test</span>();<br><span class=\"hljs-keyword\">delete</span>[]p1;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041406079.png\" alt=\"报错程序\"></p>\n<p>程序崩溃。</p>\n<ul>\n<li><strong>数组与 delete 进行混用</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Test *p2 = <span class=\"hljs-keyword\">new</span> Test[<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">delete</span> p2;<br></code></pre></td></tr></table></figure>\n\n<p>程序崩溃。</p>\n<p><strong>分析：</strong></p>\n<p>正常情况下，每一个 Test 对象有一个整型成员变量，这里分配了 5 个 Test 对象。delete 时先调用析构函数，this 指针将正确的对象的地址传入析构函数中，加了 <code>[]</code> 表示有好几个对象，有一个数组其中每一个对象都要进行析构。但 delete 真正执行指令时，底层是 malloc 按字节开辟，并不知道是否开辟了 5 个 Test 对象的数组，因此还要再多开辟一个 4 字节来存储对象的个数，假设它的地址是 <code>0x100</code>；但是 new 完之后 p2 返回的地址是 <code>0x104</code> 地址，当我们执行 <code>delete[]</code> 时，会到 4 字节来取一下对象的个数，将知道了是 5 个并将这块内存平均分为 5 份，将其每一份对象起始地址传给相应的析构函数，正常析构，最后将 <code>0x100</code> 开始的 4 字节也释放。</p>\n<p>而 p2 出错是给用户返回的存对象开始的起始地址，<code>delete p2</code> 认为 p2 只是指向了一个对象，只将 <code>Test[0]</code> 对象析构，直接从 <code>0x104 free(p2)</code>，但底层实际是从 <code>0x100</code> 开辟的，因此崩溃。</p>\n<p>而 p1 出错：p1 只是单个元素，从 <code>0x104</code> 开始开辟内存，但是 <code>delete[] p1</code>，里面并没有那么多元素，最后还释放了 4 个字节的存储对象个数的内存(即从 <code>0x100</code> 释放)因此崩溃。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041405849.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本节分为 5 大类：</p>\n<ol>\n<li>形参带默认值的函数</li>\n<li>内联函数inline</li>\n<li>详解函数重载</li>\n<li>const 深入应用</li>\n<li>深入理解 C++ 的 new 和 delete</li>\n</ol>\n<h2 id=\"1-形参带默认值的函数\"><a href=\"#1-形参带默认值的函数\" class=\"headerlink\" title=\"1. 形参带默认值的函数\"></a>1. 形参带默认值的函数</h2><p>在 C++ 中，声明一个函数时，可以为函数的参数指定默认值。当调用有默认参数值的函数时，可以不写出参数，这时就相当于以默认值作为参数调用该函数。</p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>在有函数声明（原型）时，默认参数可以放在函数声明或定义中，但是只能放在二者之一。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f = <span class=\"hljs-number\">1.0</span>)</span></span>; <span class=\"hljs-comment\">//函数声明</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f)</span>  <span class=\"hljs-comment\">//函数定义</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-comment\">// ....  </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>没有函数（原型）时，默认参数在函数定义时指定。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//没有 函数声明</span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> f = <span class=\"hljs-number\">1.0</span>)</span>  <span class=\"hljs-comment\">//函数定义</span></span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在具有多个参数的函数中指定默认值时,默认参数都必须出现在不默认参数的右边,一旦某个参数开始指定默认值,它右边的所有参数都必须指定默认值.</li>\n</ol>\n<p>就是说，<strong>函数声明时，必须按照从右向左的顺序，依次给与默认值。</strong></p>\n<p>原因：</p>\n<p>函数形参的压栈过程是从右向左。详细请看：[[01.理解 C++ 内核]] 的 <strong>从指令角度掌握函数调用堆栈详细过程。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">f</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1, <span class=\"hljs-type\">int</span> i2 = <span class=\"hljs-number\">2</span>, <span class=\"hljs-type\">int</span> i3 = <span class=\"hljs-number\">3</span>)</span></span>;     <span class=\"hljs-comment\">// 正确</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">g</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1, <span class=\"hljs-type\">int</span> i2 = <span class=\"hljs-number\">2</span>, <span class=\"hljs-type\">int</span> i3)</span></span>;         <span class=\"hljs-comment\">// 错误, i3未指定默认值</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">h</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i1 = <span class=\"hljs-number\">1</span>, <span class=\"hljs-type\">int</span> i2, <span class=\"hljs-type\">int</span> i3 = <span class=\"hljs-number\">3</span>)</span></span>;     <span class=\"hljs-comment\">// 错误, i2未指定默认值</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>普通函数和形参带默认值函数对比：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>, <span class=\"hljs-type\">int</span> b  = <span class=\"hljs-number\">10</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>  temp = a + b;<br>  <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">20</span>;<br> <br>  <span class=\"hljs-type\">int</span> ret = <span class=\"hljs-built_in\">sum</span>(a, b);<br> <br>  ret = <span class=\"hljs-built_in\">sum</span>(a);<span class=\"hljs-comment\">//b 使用默认值</span><br> <br>  ret = <span class=\"hljs-built_in\">sum</span>();<span class=\"hljs-comment\">//都使用默认值</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031520415.png\" alt=\"image.png\"></p>\n<p>对比1，2 发现：</p>\n<p>2 中 b 使用默认值，因此将 b 的值拷贝到寄存器后压栈，而是直接将常量0ah(10) 压栈，减少了此寄存器拷贝；</p>\n<p>同理有3，使用默认值是：调用函数减少了 mov 指令。</p>\n<h2 id=\"2-内联函数-inline\"><a href=\"#2-内联函数-inline\" class=\"headerlink\" title=\"2. 内联函数 inline\"></a>2. 内联函数 inline</h2><p><strong>内联函数与普通函数的区别？</strong></p>\n<ol>\n<li>内联函数；在编译过程中，就没有函数调用开销。在函数的调用点直接将函数的代码进行展开处理</li>\n</ol>\n<p>[[01.理解 C++ 内核]] 中的 <strong>从指令角度掌握函数调用堆栈详细过程</strong> 知道，在调用函数的过程中：</p>\n<p>（1）将函数实数从右向左压栈<br>（2）call指令：<br>        将下一行要执行的代码地址入栈<br>        跳转到函数入口：首先push ebp,将栈底指针入栈，然后给函数开辟栈帧函数执行结束后，栈帧回退。</p>\n<p>在函数调用中，有大量的函数调用开销。如果封装的函数内容简单，函数调用的开销大于函数指令的执行时间，那么就可以使用内联函数（需要大量调用，且指令简单）。在调用点展开内联函数指令</p>\n<ol start=\"2\">\n<li><p>内联函数不在生成相应的函数符号</p>\n</li>\n<li><p>inline 只是建议编译器把这个函数处理成内联函数，具体会由编译器处理觉得是否展开成内联函数。</p>\n</li>\n</ol>\n<p>注意：</p>\n<p>（1）如果用vs调试Debug，不会将函数展开成内联.release版本可以。</p>\n<h2 id=\"3-详解函数重载\"><a href=\"#3-详解函数重载\" class=\"headerlink\" title=\"3. 详解函数重载\"></a>3. 详解函数重载</h2><p><strong>函数重载</strong>：一组函数，其中函数名相同，参数列表的个数或者类型不同，那么这一组函数就称作函数重载。函数重载发生在编译时期。</p>\n<p>（1）函数重载与函数返回值无关，因为在产生符号时没有返回值<br>（2） 函数重载需要在同一个作用域<br>（3）const 或者 volatile 的时候，是如何影响形参的</p>\n<p><strong>C++ 支持函数重载，而 C 则不支持：</strong></p>\n<p>编译器产生的函数符号规则不同：</p>\n<ul>\n<li>C++ 代码：函数符号包含了函数名和参数列表</li>\n<li>C 代码：函数符号只包含了函数名。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<p>** <strong>函数重载需要在同一个作用域下</strong>。**</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a &gt; b;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a, <span class=\"hljs-type\">double</span> b)</span></span>;<br>\t<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;adf&quot;</span>, <span class=\"hljs-string\">&quot;wew&quot;</span>);<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031530000.png\" alt=\"image.png\"></p>\n<p>由于在局部作用域声明了新的 compare，导致无法重载外部作用域的 compare。</p>\n<p><strong>const int 和 int 的重载：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span> </span>&#123;&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a)</span> </span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// ...</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031534968.png\" alt=\"image.png\"></p>\n<p>原因：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">10</span>;<br><br>\tstd::cout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(a).<span class=\"hljs-built_in\">name</span>() &lt;&lt; std::endl;<br>\tstd::cout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(b).<span class=\"hljs-built_in\">name</span>() &lt;&lt; std::endl;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308031536065.png\" alt=\"image.png\"></p>\n<p>const int 和 int 在编译器看来都是 int 类型 ，无法完成重载。</p>\n<h3 id=\"3-1-C-和-C-语言如何相互调用\"><a href=\"#3-1-C-和-C-语言如何相互调用\" class=\"headerlink\" title=\"3.1 C++ 和 C 语言如何相互调用\"></a>3.1 C++ 和 C 语言如何相互调用</h3><p>由于 C++ 和 C 语言的编译器生成的函数符号不同，在 C++ 使用 c 语言需要使用exten “C”{};</p>\n<h4 id=\"1-C-调用-C\"><a href=\"#1-C-调用-C\" class=\"headerlink\" title=\"1. C++ 调用 C\"></a>1. C++ 调用 C</h4><p>对于c++，由于c++的编译器对c语言兼容，因此在c++中调用c语言编写的函数，只需要在函数声明前面加上关键字<code>extern &quot;C&quot;</code>，表示采用类c语言的方式解析函数符号。例子如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// add.h</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __ADD_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __ADD_H__</span><br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><br><span class=\"hljs-comment\">// add.c</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-comment\">// main.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;add.h&quot;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 + 1 = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">add</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在例子中，<code>main.cpp</code> 为<code>c++</code> 代码，<code>add.c</code> 为 c 语言代码，当 c++ 编译器识别到<code>extern &quot;C&quot;</code> 关键字时，会去寻找 <code>_add_</code> 函数的实现而不是寻找类似<code>_int_add_int_int_</code> 这样带参数信息的函数实现。</p>\n<h4 id=\"2-C-调用-C\"><a href=\"#2-C-调用-C\" class=\"headerlink\" title=\"2. C 调用 C++\"></a>2. C 调用 C++</h4><p>c 语言调用 c++ 代码却并不容易，原因是 c 语言并不兼容 c++。就算 c 语言可以调用 c++，也会因为无法识别 c++ 新定义的符号而编译报错。因此，为了实现 c 语言调用 c++ 函数，必须实现以下两个步骤：</p>\n<ol>\n<li>将 c++ 相关函数封装为静态库或动态库（因为调用库函数时编译器并不知道里面执行的是什么语言）；</li>\n<li>对外提供遵循类 c 语言规约的接口函数。例子如下所示：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// printNum.h</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __PRINTNUM_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __PRINTNUM_H__</span><br><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><span class=\"hljs-comment\">// printNum.cpp</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;printNum.h&quot;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; &lt;&lt; <span class=\"hljs-string\">&quot;num is &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class=\"hljs-comment\">// main.c</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-built_in\">printNum</span>(<span class=\"hljs-number\">5</span>);<br></code></pre></td></tr></table></figure>\n\n<p>通过将 <code>_cout_</code>函数封装为类 c 语言规约的接口函数，使得 <code>main.c</code> 中可以成功调用 c++ 函数 <code>_printNum_</code> 。值得注意的是，<code>main.c</code> 不可以直接引入 <code>printNum.h</code>，因为 c 语言不能识别 <code>extern &quot;C&quot;</code> 关键字。可以利用 c++ 预定义宏实现头文件的改写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __PRINTNUM_H__</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __PRINTNUM_H__</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __cplusplus</span><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">&quot;C&quot;</span> &#123; <br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __cplusplus</span><br>&#125;<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><ol>\n<li>c 语言与 c++ 的相互调用可以通过 <code>extern &quot;C&quot;</code> 关键字实现</li>\n<li>c++ 中调用 c 代码，只须在 c++ 中为 c 代码函数声明之前加上 <code>extern &quot;C&quot;</code></li>\n<li>c 语言调用 c++ 代码，则需要将 c++ 代码编译成静态库或动态库，然后对外提供用 <code>extern &quot;C&quot;</code> 声明的类 c 封装函数</li>\n</ol>\n<h2 id=\"4-const-深入应用\"><a href=\"#4-const-深入应用\" class=\"headerlink\" title=\"4. const 深入应用\"></a>4. const 深入应用</h2><p><strong>const 作用：</strong></p>\n<ol>\n<li>修饰变量，说明该变量不可以被改变；</li>\n<li>修饰指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）；</li>\n<li>修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；</li>\n<li>修饰成员函数，说明该成员函数内不能修改成员变量。</li>\n</ol>\n<p><strong>const 的指针与引用：</strong></p>\n<ul>\n<li>指针<ul>\n<li>指向常量的指针（pointer to const）</li>\n<li>自身是常量的指针（常量指针，const pointer）</li>\n</ul>\n</li>\n<li>引用<ul>\n<li>指向常量的引用（reference to const）</li>\n<li>没有 const reference，因为引用只是对象的别名，引用不是对象，不能用 const 修饰</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 类</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span><br>&#123;<br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a;                <span class=\"hljs-comment\">// 常对象成员，可以使用初始化列表或者类内初始化</span><br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 构造函数</span><br>    <span class=\"hljs-built_in\">A</span>() : <span class=\"hljs-built_in\">a</span>(<span class=\"hljs-number\">0</span>) &#123; &#125;;<br>    <span class=\"hljs-built_in\">A</span>(<span class=\"hljs-type\">int</span> x) : <span class=\"hljs-built_in\">a</span>(x) &#123; &#125;;        <span class=\"hljs-comment\">// 初始化列表</span><br><br>    <span class=\"hljs-comment\">// const可用于对重载函数的区分</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span></span>;             <span class=\"hljs-comment\">// 普通成员函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span></span>;       <span class=\"hljs-comment\">// 常成员函数，不得修改类中的任何数据成员的值</span><br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 对象</span><br>    A b;                        <span class=\"hljs-comment\">// 普通对象，可以调用全部成员函数</span><br>    <span class=\"hljs-type\">const</span> A a;                  <span class=\"hljs-comment\">// 常对象，只能调用常成员函数</span><br>    <span class=\"hljs-type\">const</span> A *p = &amp;a;            <span class=\"hljs-comment\">// 指针变量，指向常对象</span><br>    <span class=\"hljs-type\">const</span> A &amp;q = a;             <span class=\"hljs-comment\">// 指向常对象的引用</span><br><br>    <span class=\"hljs-comment\">// 指针</span><br>    <span class=\"hljs-type\">char</span> greeting[] = <span class=\"hljs-string\">&quot;Hello&quot;</span>;<br>    <span class=\"hljs-type\">char</span>* p1 = greeting;                <span class=\"hljs-comment\">// 指针变量，指向字符数组变量</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* p2 = greeting;          <span class=\"hljs-comment\">// 指针变量，指向字符数组常量（const 后面是 char，说明指向的字符（char）不可改变）</span><br>    <span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> p3 = greeting;          <span class=\"hljs-comment\">// 自身是常量的指针，指向字符数组变量（const 后面是 p3，说明 p3 指针自身不可改变）</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> p4 = greeting;    <span class=\"hljs-comment\">// 自身是常量的指针，指向字符数组常量</span><br>&#125;<br><br><span class=\"hljs-comment\">// 函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> Var)</span></span>;           <span class=\"hljs-comment\">// 传递过来的参数在函数内不可变</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* Var)</span></span>;         <span class=\"hljs-comment\">// 参数指针所指内容为常量</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* <span class=\"hljs-type\">const</span> Var)</span></span>;         <span class=\"hljs-comment\">// 参数指针为常量</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function4</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>&amp; Var)</span></span>;          <span class=\"hljs-comment\">// 引用参数在函数内为常量</span><br><br><span class=\"hljs-comment\">// 函数返回值</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">function5</span><span class=\"hljs-params\">()</span></span>;      <span class=\"hljs-comment\">// 返回一个常数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>* <span class=\"hljs-title\">function6</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">// 返回一个指向常量的指针变量，使用：const int *p = function6();</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span>* <span class=\"hljs-type\">const</span> <span class=\"hljs-title\">function7</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">// 返回一个指向变量的常指针，使用：int* const p = function7();</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>宏定义 <code>#define</code> 和 const 常量:</strong></p>\n<table>\n<thead>\n<tr>\n<th>宏定义 #define</th>\n<th>const 常量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宏定义，相当于字符替换</td>\n<td>常量声明</td>\n</tr>\n<tr>\n<td>预处理器处理</td>\n<td>编译器处理</td>\n</tr>\n<tr>\n<td>无类型安全检查</td>\n<td>有类型安全检查</td>\n</tr>\n<tr>\n<td>不分配内存</td>\n<td>要分配内存</td>\n</tr>\n<tr>\n<td>存储在代码段</td>\n<td>存储在数据段</td>\n</tr>\n<tr>\n<td>可通过 <code>#undef</code> 取消</td>\n<td>不可取消</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-C-和-C-的-const-区别\"><a href=\"#1-C-和-C-的-const-区别\" class=\"headerlink\" title=\"1. C++ 和 C 的 const 区别\"></a>1. C++ 和 C 的 const 区别</h3><ul>\n<li><strong>c语言中，const修饰的值，可以不用初始化，不叫常量，叫做常变量；</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040846520.png\" alt=\"image.png\"></p>\n<p>最终输出为：30、30、30</p>\n<ul>\n<li><strong>C++中： const 定义的类型必须初始化，否则报错，c 语言中可以不初始化</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040849898.png\" alt=\"image.png\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// const int b;</span><br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>\t<span class=\"hljs-comment\">// a 常量，可以定义数组长度</span><br>\t<span class=\"hljs-type\">int</span> array[a] = &#123;&#125;;<br><br>\t<span class=\"hljs-type\">int</span>* p = (<span class=\"hljs-type\">int</span>*)&amp;a;<br>\t*p = <span class=\"hljs-number\">30</span>;<br><br>\tcout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *p &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *(&amp;a) &lt;&lt; endl;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040851384.png\" alt=\"image.png\"></p>\n<p>原因：<strong>const 的编译方式不同，C 语言中，const 就是当作一个变量来编译生成指令的。C++ 中，如果 const 赋值是一个立即数，所有出现 const 常量名字的地方，都被常量的初始化所替换。</strong></p>\n<h4 id=\"1-1-Debug-调试\"><a href=\"#1-1-Debug-调试\" class=\"headerlink\" title=\"1.1 Debug 调试\"></a>1.1 Debug 调试</h4><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040857151.png\" alt=\"image.png\"><br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040900294.png\" alt=\"image.png\"></p>\n<p>执行完第9行后 a 的内存中的值变成 1e 也即 30；但是本来出现 a 的地方在编译期已经被替换成 10，因此输出 a 依然是 10。</p>\n<p><strong>如果不是立即数，则是常变量</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = b;<br><br>\t<span class=\"hljs-comment\">// 报错，a是常变量</span><br>\t<span class=\"hljs-comment\">//int array[a] = &#123;&#125;;</span><br><br>\t<span class=\"hljs-type\">int</span>* p = (<span class=\"hljs-type\">int</span>*)&amp;a;<br>\t*p = <span class=\"hljs-number\">30</span>;<br><br>\tcout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *p &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; *(&amp;a); <span class=\"hljs-comment\">// 30 30 30</span><br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-const-与指针\"><a href=\"#2-const-与指针\" class=\"headerlink\" title=\"2. const 与指针\"></a>2. const 与指针</h3><p>const 修饰的量常出现的错误：</p>\n<p><strong>（1）常量不能再作为左值</strong><br><strong>（2）不能把常量的地址泄露给一个普通的指针或者普通的引用变量</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040908264.png\" alt=\"image.png\"></p>\n<h4 id=\"2-1-const-和-一级指针\"><a href=\"#2-1-const-和-一级指针\" class=\"headerlink\" title=\"2.1 const 和 一级指针\"></a>2.1 const 和 一级指针</h4><p><strong>const 如果右边没有指针*，则const 是不参与类型的</strong></p>\n<p><strong>C++的语言规范：就近原则 const 修饰的是离它最近的类型</strong></p>\n<ol>\n<li><code>const int* p</code>；离 const 最近的类型是 int，所以 const 修饰的是 <code>*p</code> ，所以 <code>*p</code> 无法修改值；可以指向任意 int 的内存，但是不能通过指针简介修改内存的值。</li>\n<li><code>int const* p</code>；<code>*</code> 不是类型，离 const 最近的类型为 int，<code>*p</code> 无法修改，同（1）</li>\n<li><code>int* const p</code>；离 const 最近的类型为（int*），const 修饰的是 p，所以不能改变 p 指向的地址，但是可以修改 p 指向的地址的内容。</li>\n<li><code>const int* const p</code>；不能修改 p 指向的地址和值。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span> ;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> * p = &amp;a;<span class=\"hljs-comment\">//p指向的地址的内容不能修改</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重点：</p>\n<p><strong>const 如果右边没有指针 <code>*</code>，则 const 是不参与类型的，仅表示 const 修饰的是一个常量，不能作为左值。</strong></p>\n<p><strong>const 类型转化公式：</strong></p>\n<ul>\n<li><code>const int*</code>  &lt;&#x3D; <code>int*</code> 可以转换</li>\n<li><code>int*</code> &lt;&#x3D; <code>const int*</code> 错误</li>\n</ul>\n</blockquote>\n<p>示例1：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span>* p = <span class=\"hljs-literal\">nullptr</span>;<br>\t<span class=\"hljs-type\">int</span>* <span class=\"hljs-type\">const</span> p1 = <span class=\"hljs-literal\">nullptr</span>;<br><br>\tcout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(p).<span class=\"hljs-built_in\">name</span>() &lt;&lt; endl;<br>\tcout &lt;&lt; <span class=\"hljs-built_in\">typeid</span>(p1).<span class=\"hljs-built_in\">name</span>() &lt;&lt; endl;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040921787.png\"></p>\n<p>示例2：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> *p1= &amp;a;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *p2 = &amp;a;<span class=\"hljs-comment\">// const int * &lt;= int *</span><br><span class=\"hljs-type\">int</span> *<span class=\"hljs-type\">const</span> p3 = &amp;a;<span class=\"hljs-comment\">// int * &lt;= int *</span><br><span class=\"hljs-type\">int</span> *p4 = p3;<span class=\"hljs-comment\">//p3是int * 类型，因此没有问题</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-const-和-二级指针\"><a href=\"#2-2-const-和-二级指针\" class=\"headerlink\" title=\"2.2 const 和 二级指针\"></a>2.2 const 和 二级指针</h4><p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040928871.png\" alt=\"image.png\"></p>\n<ul>\n<li><code>const int** q</code>；离 const 最近的类型为 int，修饰的是 <code>**q</code>。</li>\n<li><code>int* const* q</code>；离 const 最近的类型为 <code>int*</code>，修饰的是 <code>*q</code>。</li>\n<li><code>int** const q</code>；离 const 最近的类型为 <code>int**</code>，修饰的是 <code>q</code>，同时 const 右侧没有 <code>*</code> ，q 是 <code>int**</code> 类型。</li>\n</ul>\n<p><strong>转化公式：</strong></p>\n<ul>\n<li><code>int**</code> &lt;&#x3D; <code>const int**</code> 错误</li>\n<li><code>const int **</code> &lt;&#x3D; <code>int **</code> 错误</li>\n</ul>\n<p>const 与二级指针结合的时候，两边必须同时有 const 或没有 const 才能转换；</p>\n<ul>\n<li><code>int**</code> &lt;&#x3D; <code>int* const*</code> 是 const 和一级指针的结合，const 右边修饰的<code>*</code>  （等同于 <code>int *</code>  &lt;&#x3D; <code>const int *</code>  ）错误的</li>\n<li><code>int* const*</code> &lt;&#x3D;<code>int**</code> （等同于<code>const int *</code> &lt;&#x3D; <code>int</code> ）可以的</li>\n</ul>\n<p><strong>要看 const 右边的 * 决定 const 修饰的是类型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> * p = &amp;a;<br>  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> ** q = &amp;p;<span class=\"hljs-comment\">//error  </span><br>  <br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  const int * *q = &amp;p; 相当于（*）q 即 p的地址，赋值了一个const int * </span><br><span class=\"hljs-comment\">  而p 是int *类型,把常量的地址泄露给普通的指针（p）</span><br><span class=\"hljs-comment\">  修改 const int * p = &amp;a;</span><br><span class=\"hljs-comment\">  */</span><br>  <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3. 引用\"></a>3. 引用</h3><ol>\n<li>引用是必须初始化的，指针可以不初始化。</li>\n<li>引用只有一级引用，没有多级引用；指针可以有一级指针，也可以用多级指针。</li>\n<li>定义一个引用变量和定义一个指针变量，其汇编指令是一样的；通过引用变量修改所引用内存的值，和通过指针解引用修改指针指向的内存的值，其底层指令也是一模一样的。</li>\n</ol>\n<p>引用的错误用法  <code>int &amp;a = 10;</code> 由下面的反汇编可以知道，引用的汇编代码第一步是将引用对象的地址拷贝到寄存器中，10是常量；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-type\">int</span> * p = &amp;a;<br>  <span class=\"hljs-type\">int</span> &amp;b = a;<br> <br>  std::cout  &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p) &lt;&lt; std::endl;<br> <br>  *p = <span class=\"hljs-number\">20</span>;<br>  std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p) &lt;&lt; std::endl;<br> <br> <br>  b = <span class=\"hljs-number\">30</span>;<br>  std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; (*p);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040938550.png\" alt=\"image.png\"></p>\n<p> <strong>反汇编：指针和引用没有区别</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040939184.png\" alt=\"image.png\"></p>\n<p><code>lea eax,[a]</code>：将 a 的地址拷贝到寄存器 eax 中</p>\n<p><code>mov dword ptr [p],eax</code>：将 eax 中的值拷贝到 p 中。</p>\n<p><strong>反汇编中指针和引用拷贝也是没有区别。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941767.png\" alt=\"指针拷贝 - 1\"><br><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308040941833.png\" alt=\"指针拷贝 - 2\"></p>\n<p>对指针和引用赋值，都是一样的：获取地址，然后赋值。</p>\n<h4 id=\"3-1-引用别名\"><a href=\"#3-1-引用别名\" class=\"headerlink\" title=\"3.1 引用别名\"></a>3.1 引用别名</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;typeinfo.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> array[<span class=\"hljs-number\">5</span>] = &#123;&#125;;<br>  <span class=\"hljs-type\">int</span> * p = array;<br>  <span class=\"hljs-built_in\">int</span>(&amp;q)[<span class=\"hljs-number\">5</span>] = array;<span class=\"hljs-comment\">//定义一个引用指向数组:引用即别名  sizeof(q) =  sizeof(array) </span><br> <br>  std::cout &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(array) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(p) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(q) &lt;&lt; std::endl;<span class=\"hljs-comment\">//20 5 20</span><br> <br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041039869.png\" alt=\"image.png\"></p>\n<p>关于定义一个引用类型，到底需不需要开辟内存空间，我认为是需要的，上面的汇编代码中，引用和指针的汇编是一模一样的；C++ 中只有 const 类型的数据，要求必须初始化。而引用也必须要初始化，所以引用是指针，还应该是 const 修饰的常指针。 一经声明不可改变。 </p>\n<p>站在宏观角度，引用也就是别名，所以不开辟看空间。</p>\n<p>站在微观的角度，引用至少要保存一个指针，所以一定要开辟空间。站在底层实现的角度，站在 C++ 对于 C 实现包装的角度，引用就是指针。那么既然是指针至少要占用 4 个字节空间。</p>\n<h3 id=\"4-左值引用\"><a href=\"#4-左值引用\" class=\"headerlink\" title=\"4. 左值引用\"></a>4. 左值引用</h3><p>左值：有内存地址，有名字，值可以修改；</p>\n<p>如 <code>int a = 10;</code> <code>int &amp;b =a;</code></p>\n<p><code>int &amp;c =10;</code> &#x2F;&#x2F;错误 20 是右值，20 &#x3D; 40 是错误的，其值不能修改，没内存，没名字，是一个立即数；</p>\n<p>上述代码是无法编译通过的，因为 10 无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;var = <span class=\"hljs-number\">10</span>;<br></code></pre></td></tr></table></figure>\n\n<p>使用常引用来引用常量数字 10，因为此刻内存上产生了临时变量保存了 10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">10</span>; <br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;var = temp;<br></code></pre></td></tr></table></figure>\n\n<p>根据上述分析，得出如下结论：</p>\n<p>左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；<br>但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被 const 修饰成常量引用了。</p>\n<p>那么 C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。</p>\n<h3 id=\"5-右值引用\"><a href=\"#5-右值引用\" class=\"headerlink\" title=\"5. 右值引用\"></a>5. 右值引用</h3><p>C++ 对于左值和右值没有标准定义，但是有一个被广泛认同的说法：</p>\n<ul>\n<li>可以取地址的，有名字的，非临时的就是左值；</li>\n<li>不能取地址的，没有名字的，临时的就是右值；</li>\n</ul>\n<p>可见立即数，函数返回的值等都是右值；而非匿名对象(包括变量)，函数返回的引用，const 对象等都是左值。</p>\n<p>从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及 const 对象)。</p>\n<ol>\n<li><strong><code>int &amp;&amp;c = 10;</code>专门用来引用右值类型，指令上，可以自动产生临时量，然后直接引用临时量   c &#x3D; 1;</strong></li>\n</ol>\n<p>反汇编：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041045338.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li><strong>一个右值引用变量，本身是一个左值,只能用左值引用来引用它；不能用一个右值引用变量来引用一个左值</strong></li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> &amp;&amp; a = <span class=\"hljs-number\">1</span>;<br>a = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> &amp;e = a;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-深入理解-C-的-new-和-delete\"><a href=\"#5-深入理解-C-的-new-和-delete\" class=\"headerlink\" title=\"5. 深入理解 C++ 的 new 和 delete\"></a>5. 深入理解 C++ 的 new 和 delete</h2><p><strong>New 的不同使用方式：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;new&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//1 抛异常new</span><br>    <span class=\"hljs-type\">int</span>* p1;<br>    <span class=\"hljs-keyword\">try</span><br>    &#123;<br>        p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//分配内存并初始化</span><br>    &#125;<br>    <span class=\"hljs-built_in\">catch</span> (<span class=\"hljs-type\">const</span> std::bad_alloc&amp; e)<span class=\"hljs-comment\">//判断是否抛异常</span><br>    &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">//2 不抛异常new</span><br>    <span class=\"hljs-type\">int</span>* p2 = <span class=\"hljs-built_in\">new</span> (std::nothrow)<span class=\"hljs-built_in\">int</span>();<span class=\"hljs-comment\">//不抛异常</span><br>    <span class=\"hljs-comment\">//3 开辟常量内存</span><br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>* p3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">40</span>);<span class=\"hljs-comment\">//开辟一个常量</span><br><br>    <span class=\"hljs-comment\">//4 定位new</span><br>    <span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span>* p4 = <span class=\"hljs-built_in\">new</span>(&amp;data) <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">50</span>);<span class=\"hljs-comment\">//在指定地址内存初始化，本身并不开辟内存，只负责初始化</span><br>    <span class=\"hljs-keyword\">delete</span> p1;<br>    <span class=\"hljs-keyword\">delete</span> p2;<br>    <span class=\"hljs-keyword\">delete</span> p3;<br>    <span class=\"hljs-keyword\">delete</span> p4;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-malloc-与-new-的区别\"><a href=\"#1-malloc-与-new-的区别\" class=\"headerlink\" title=\"1. malloc 与 new 的区别\"></a>1. malloc 与 new 的区别</h4><ol>\n<li>malloc 按字节开辟内存的；new 开辟内存时需要指定类型；</li>\n<li>malloc 开辟内存返回的都是 <code>void *</code> ，new 相当于运算符重载函数，返回值自动转为指定的类型的指针。</li>\n<li>malloc 只负责开辟内存空间，new 不仅仅也有 malloc 功能，还可以进行数据的初始化。</li>\n<li>malloc 开辟内存失败返回 nullptr 指针；new 抛出的是 bad_alloc 类型的异常。</li>\n<li>malloc 开辟单个元素内存与数组内存是一样的，都是给字节数；new开辟时对单个元素内存后面不需要<code>[]</code>，而数组需要 <code>[]</code>并给上元素个数。</li>\n</ol>\n<h4 id=\"2-free-和-delete-的区别：\"><a href=\"#2-free-和-delete-的区别：\" class=\"headerlink\" title=\"2. free 和 delete 的区别：\"></a>2. free 和 delete 的区别：</h4><ol>\n<li>free 不管释放单个元素内存还是数组内存，只需要传入内存的起始地址即可。  </li>\n<li>delete 释放单个元素内存，不需要加中括号，但释放数据内存时需要加中括号。  </li>\n<li>delete 执行其实有两步，先调用析构，再释放；free 只有一步。</li>\n</ol>\n<h4 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3. 解析\"></a>3. 解析</h4><p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>;<br>    <span class=\"hljs-keyword\">delete</span> p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反汇编：</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041343548.png\" alt=\"image.png\"></p>\n<p><strong>new 与 delete 其本质也是函数的调用：运算符重载 new  delete</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">new</span> -&gt; <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">new</span><br><span class=\"hljs-keyword\">delete</span> -&gt; <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">delete</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-实现\"><a href=\"#4-实现\" class=\"headerlink\" title=\"4. 实现\"></a>4. 实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">// new：</span><br><span class=\"hljs-comment\">// 先调用 operator 开辟内存空间</span><br><span class=\"hljs-comment\">// 然后调用对象的构造函数</span><br><span class=\"hljs-comment\">// operator new 实现</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// 开辟</span><br>    <span class=\"hljs-type\">void</span>* p = <span class=\"hljs-built_in\">malloc</span>(size);<br>    <span class=\"hljs-comment\">// 判断</span><br>    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-literal\">nullptr</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">bad_alloc</span>();<br>    &#125;<br><br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator new addr:&quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">// operator new[] 实现</span><br><span class=\"hljs-type\">void</span>* <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">new</span>[](<span class=\"hljs-type\">size_t</span> size)<br>&#123;<br>    <span class=\"hljs-comment\">// 开辟</span><br>    <span class=\"hljs-type\">void</span>* p = <span class=\"hljs-built_in\">malloc</span>(size);<br>    <span class=\"hljs-comment\">// 判断</span><br>    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-literal\">nullptr</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">bad_alloc</span>();<br>    &#125;<br><br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator new[] addr:&quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br><br><span class=\"hljs-comment\">// delete：</span><br><span class=\"hljs-comment\">// 调用 p 指向对象的析构函数</span><br><span class=\"hljs-comment\">// 再调用 operator delete 释放空间</span><br><span class=\"hljs-comment\">// operator delete 实现</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>* ptr)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator delete addr: &quot;</span> &lt;&lt; ptr &lt;&lt; endl;<br>    <span class=\"hljs-built_in\">free</span>(ptr);<br>&#125;<br><br><span class=\"hljs-comment\">// operator delete[] 实现</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">delete</span>[](<span class=\"hljs-type\">void</span>* ptr)<br>&#123;<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;operator delete[] addr: &quot;</span> &lt;&lt; ptr &lt;&lt; endl;<br>    <span class=\"hljs-built_in\">free</span>(ptr);<br>&#125;<br><br><span class=\"hljs-comment\">// 使用</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-keyword\">delete</span> p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">delete</span>[] p;<br>    p = <span class=\"hljs-literal\">nullptr</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041355889.png\" alt=\"image.png\"></p>\n<h4 id=\"5-new-和delete-能够混用吗？\"><a href=\"#5-new-和delete-能够混用吗？\" class=\"headerlink\" title=\"5. new 和delete 能够混用吗？\"></a>5. new 和delete 能够混用吗？</h4><p><strong>C++为什么区分单个元素和数组的内存分配和释放呢？</strong></p>\n<p><strong>情况1：int类型下将其混用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>;<br><span class=\"hljs-keyword\">delete</span>[]p;<br> <br><span class=\"hljs-type\">int</span> *q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">10</span>];<br><span class=\"hljs-keyword\">delete</span> q;<br></code></pre></td></tr></table></figure>\n\n<p>能够混用。对于整型来说，没有构造函数与析构函数，针对于 int 类型，new 与 delete 功能只剩下 malloc 与 free 功能，可以将其混用。</p>\n<p><strong>情况2：类类型下将其混用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">Test</span>(<span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">10</span>):<span class=\"hljs-built_in\">ptr</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>(data))<br>\t&#123;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Test()&quot;</span> &lt;&lt; endl;<br>\t&#125;<br>\t~<span class=\"hljs-built_in\">Test</span>()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">delete</span> ptr;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;~Test()&quot;</span> &lt;&lt; endl;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-type\">int</span> *ptr;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>单个元素与 <code>delete[]</code> 混用：</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Test *p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Test</span>();<br><span class=\"hljs-keyword\">delete</span>[]p1;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041406079.png\" alt=\"报错程序\"></p>\n<p>程序崩溃。</p>\n<ul>\n<li><strong>数组与 delete 进行混用</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Test *p2 = <span class=\"hljs-keyword\">new</span> Test[<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">delete</span> p2;<br></code></pre></td></tr></table></figure>\n\n<p>程序崩溃。</p>\n<p><strong>分析：</strong></p>\n<p>正常情况下，每一个 Test 对象有一个整型成员变量，这里分配了 5 个 Test 对象。delete 时先调用析构函数，this 指针将正确的对象的地址传入析构函数中，加了 <code>[]</code> 表示有好几个对象，有一个数组其中每一个对象都要进行析构。但 delete 真正执行指令时，底层是 malloc 按字节开辟，并不知道是否开辟了 5 个 Test 对象的数组，因此还要再多开辟一个 4 字节来存储对象的个数，假设它的地址是 <code>0x100</code>；但是 new 完之后 p2 返回的地址是 <code>0x104</code> 地址，当我们执行 <code>delete[]</code> 时，会到 4 字节来取一下对象的个数，将知道了是 5 个并将这块内存平均分为 5 份，将其每一份对象起始地址传给相应的析构函数，正常析构，最后将 <code>0x100</code> 开始的 4 字节也释放。</p>\n<p>而 p2 出错是给用户返回的存对象开始的起始地址，<code>delete p2</code> 认为 p2 只是指向了一个对象，只将 <code>Test[0]</code> 对象析构，直接从 <code>0x104 free(p2)</code>，但底层实际是从 <code>0x100</code> 开辟的，因此崩溃。</p>\n<p>而 p1 出错：p1 只是单个元素，从 <code>0x104</code> 开始开辟内存，但是 <code>delete[] p1</code>，里面并没有那么多元素，最后还释放了 4 个字节的存储对象个数的内存(即从 <code>0x100</code> 释放)因此崩溃。</p>\n<p><img src=\"https://raw.githubusercontent.com/Yakumo-Sue/PicGo/main/images202308041405849.png\" alt=\"image.png\"></p>\n"},{"_content":"","source":"_posts/02.C++ 基础部分/00.C++ 基本语法学习.md","raw":"","slug":"02.C++ 基础部分/00.C++ 基本语法学习","published":1,"date":"2023-08-03T07:08:54.439Z","updated":"2023-08-03T07:08:54.439Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clkuty8uf0001ncpk9kdpehq2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C++ 面向对象","index_img":"/img/Blog-Logo/C++_Logo.png","banner_img":"/img/Post-Banner/01.blogs/1316853.jpeg","_content":"\n本节分为 7 大类：\n\n1. 类和对象、this 指针\n2. 构造函数和析构函数\n3. 深拷贝和浅拷贝\n4. 类和对象代码应用实践\n5. 构造函数的初始化列表\n6. 类的各种成员方法及区别\n7. 指向类成员的指针\n\n## 1. 类和对象、this 指针\n\n","source":"_posts/02.C++ 基础部分/03.C++ 面向对象.md","raw":"---\ntitle: C++ 面向对象\ntags: [C++]\nindex_img: /img/Blog-Logo/C++_Logo.png\nbanner_img: /img/Post-Banner/01.blogs/1316853.jpeg\n---\n\n本节分为 7 大类：\n\n1. 类和对象、this 指针\n2. 构造函数和析构函数\n3. 深拷贝和浅拷贝\n4. 类和对象代码应用实践\n5. 构造函数的初始化列表\n6. 类的各种成员方法及区别\n7. 指向类成员的指针\n\n## 1. 类和对象、this 指针\n\n","slug":"02.C++ 基础部分/03.C++ 面向对象","published":1,"date":"2023-08-04T06:09:27.166Z","updated":"2023-08-04T06:12:12.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkw6w7mw0000acpk88orduw7","content":"<p>本节分为 7 大类：</p>\n<ol>\n<li>类和对象、this 指针</li>\n<li>构造函数和析构函数</li>\n<li>深拷贝和浅拷贝</li>\n<li>类和对象代码应用实践</li>\n<li>构造函数的初始化列表</li>\n<li>类的各种成员方法及区别</li>\n<li>指向类成员的指针</li>\n</ol>\n<h2 id=\"1-类和对象、this-指针\"><a href=\"#1-类和对象、this-指针\" class=\"headerlink\" title=\"1. 类和对象、this 指针\"></a>1. 类和对象、this 指针</h2>","site":{"data":{}},"excerpt":"","more":"<p>本节分为 7 大类：</p>\n<ol>\n<li>类和对象、this 指针</li>\n<li>构造函数和析构函数</li>\n<li>深拷贝和浅拷贝</li>\n<li>类和对象代码应用实践</li>\n<li>构造函数的初始化列表</li>\n<li>类的各种成员方法及区别</li>\n<li>指向类成员的指针</li>\n</ol>\n<h2 id=\"1-类和对象、this-指针\"><a href=\"#1-类和对象、this-指针\" class=\"headerlink\" title=\"1. 类和对象、this 指针\"></a>1. 类和对象、this 指针</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clkrobmbf0001u0pkc6e72u5t","tag_id":"clkrx9my1000188pk03r77a6c","_id":"clkrx9my2000388pkeoylfiwh"},{"post_id":"clkrobmbf0001u0pkc6e72u5t","tag_id":"clkrx9osa000488pk90nigter","_id":"clkrx9osa000588pkdy0w46xg"},{"post_id":"clkrobmbf0001u0pkc6e72u5t","tag_id":"clkrx9my0000088pk9qa334re","_id":"clkrx9vjo000688pkblob304d"},{"post_id":"clkrobmbf0001u0pkc6e72u5t","tag_id":"clkrxabij000988pk2ejf91d2","_id":"clkrxabij000a88pkgz8vbqsd"},{"post_id":"clkrobmbf0001u0pkc6e72u5t","tag_id":"clkrxaf45000d88pk4evxcnph","_id":"clkrxaf45000e88pk7qs9aan9"},{"post_id":"clkufs4140000b0pkgkc45jvo","tag_id":"clkufs41a0001b0pk3lazgbar","_id":"clkufs41b0002b0pk2ckdbh6k"},{"post_id":"clkuty8ua0000ncpkgjf774pk","tag_id":"clkufs41a0001b0pk3lazgbar","_id":"clkuty8uh0002ncpk5cxcdh3r"},{"post_id":"clkw6w7mw0000acpk88orduw7","tag_id":"clkufs41a0001b0pk3lazgbar","_id":"clkw6w7n30001acpkgb2xdi0q"}],"Tag":[{"name":"Hexo","_id":"clkrx9my0000088pk9qa334re"},{"name":"Fluid","_id":"clkrx9my1000188pk03r77a6c"},{"name":"Blog","_id":"clkrx9osa000488pk90nigter"},{"name":"Obdidi","_id":"clkrxa9vs000788pke2prhtx5"},{"name":"Obdidian","_id":"clkrxabij000988pk2ejf91d2"},{"name":"Github","_id":"clkrxade8000b88pk1q1k0kg3"},{"name":"Github Pages","_id":"clkrxaf45000d88pk4evxcnph"},{"name":"C++","_id":"clkufs41a0001b0pk3lazgbar"}]}}